
AK_Laby_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  08014c88  08014c88  00024c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015610  08015610  00030378  2**0
                  CONTENTS
  4 .ARM          00000000  08015610  08015610  00030378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015610  08015610  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015610  08015610  00025610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015614  08015614  00025614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08015618  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000378  08015990  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08015990  0003094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035125  00000000  00000000  000303eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005074  00000000  00000000  00065510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f08  00000000  00000000  0006a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002400  00000000  00000000  0006d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d4e5  00000000  00000000  0006f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029176  00000000  00000000  0009cd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011308b  00000000  00000000  000c5eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000e238  00000000  00000000  001d8f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001e71b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c70 	.word	0x08014c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08014c70 	.word	0x08014c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <MX_ADC1_Init+0xe4>)
 8000d1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d36:	2204      	movs	r2, #4
 8000d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d76:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d78:	f009 fdee 	bl	800a958 <HAL_ADC_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d82:	f001 fe71 	bl	8002a68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000d92:	f00a febf 	bl	800bb14 <HAL_ADCEx_MultiModeConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d9c:	f001 fe64 	bl	8002a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_ADC1_Init+0xe8>)
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da4:	2306      	movs	r3, #6
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dac:	237f      	movs	r3, #127	; 0x7f
 8000dae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_ADC1_Init+0xe0>)
 8000dbe:	f00a f8ef 	bl	800afa0 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000dc8:	f001 fe4e 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000394 	.word	0x20000394
 8000dd8:	50040000 	.word	0x50040000
 8000ddc:	14f00020 	.word	0x14f00020

08000de0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ac      	sub	sp, #176	; 0xb0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2288      	movs	r2, #136	; 0x88
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00f fb84 	bl	801050e <memset>
  if(adcHandle->Instance==ADC1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_ADC_MspInit+0xc8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d147      	bne.n	8000ea0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e14:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00c ff99 	bl	800dd78 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e4c:	f001 fe0c 	bl	8002a68 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_ADC_MspInit+0xcc>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e86:	230b      	movs	r3, #11
 8000e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f00a fffc 	bl	800be98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	37b0      	adds	r7, #176	; 0xb0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	50040000 	.word	0x50040000
 8000eac:	40021000 	.word	0x40021000

08000eb0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <BSP_I2C1_Init+0x70>)
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <BSP_I2C1_Init+0x74>)
 8000ebe:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <BSP_I2C1_Init+0x78>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	4918      	ldr	r1, [pc, #96]	; (8000f28 <BSP_I2C1_Init+0x78>)
 8000ec8:	600a      	str	r2, [r1, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d122      	bne.n	8000f14 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <BSP_I2C1_Init+0x70>)
 8000ed0:	f00b fdbc 	bl	800ca4c <HAL_I2C_GetState>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d11c      	bne.n	8000f14 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000eda:	4811      	ldr	r0, [pc, #68]	; (8000f20 <BSP_I2C1_Init+0x70>)
 8000edc:	f000 f8fe 	bl	80010dc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d116      	bne.n	8000f14 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <BSP_I2C1_Init+0x70>)
 8000ee8:	f000 f8b4 	bl	8001054 <MX_I2C1_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ef2:	f06f 0307 	mvn.w	r3, #7
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	e00c      	b.n	8000f14 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <BSP_I2C1_Init+0x70>)
 8000efe:	f00c f877 	bl	800cff0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f08:	f06f 0307 	mvn.w	r3, #7
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e001      	b.n	8000f14 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200003f8 	.word	0x200003f8
 8000f24:	40005400 	.word	0x40005400
 8000f28:	2000044c 	.word	0x2000044c

08000f2c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <BSP_I2C1_DeInit+0x48>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d014      	beq.n	8000f68 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <BSP_I2C1_DeInit+0x48>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <BSP_I2C1_DeInit+0x48>)
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <BSP_I2C1_DeInit+0x48>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <BSP_I2C1_DeInit+0x4c>)
 8000f52:	f000 f923 	bl	800119c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <BSP_I2C1_DeInit+0x4c>)
 8000f58:	f00b fb07 	bl	800c56a <HAL_I2C_DeInit>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f62:	f06f 0307 	mvn.w	r3, #7
 8000f66:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000044c 	.word	0x2000044c
 8000f78:	200003f8 	.word	0x200003f8

08000f7c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	81fb      	strh	r3, [r7, #14]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	81bb      	strh	r3, [r7, #12]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f96:	89ba      	ldrh	r2, [r7, #12]
 8000f98:	89f9      	ldrh	r1, [r7, #14]
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <BSP_I2C1_WriteReg+0x60>)
 8000fac:	f00b fb20 	bl	800c5f0 <HAL_I2C_Mem_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00c      	beq.n	8000fd0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <BSP_I2C1_WriteReg+0x60>)
 8000fb8:	f00b fd56 	bl	800ca68 <HAL_I2C_GetError>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d103      	bne.n	8000fca <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fc2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e002      	b.n	8000fd0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000fca:	f06f 0303 	mvn.w	r3, #3
 8000fce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000fd0:	697b      	ldr	r3, [r7, #20]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200003f8 	.word	0x200003f8

08000fe0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	60ba      	str	r2, [r7, #8]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	81bb      	strh	r3, [r7, #12]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ffa:	89ba      	ldrh	r2, [r7, #12]
 8000ffc:	89f9      	ldrh	r1, [r7, #14]
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <BSP_I2C1_ReadReg+0x60>)
 8001010:	f00b fc02 	bl	800c818 <HAL_I2C_Mem_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00c      	beq.n	8001034 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <BSP_I2C1_ReadReg+0x60>)
 800101c:	f00b fd24 	bl	800ca68 <HAL_I2C_GetError>
 8001020:	4603      	mov	r3, r0
 8001022:	2b04      	cmp	r3, #4
 8001024:	d103      	bne.n	800102e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001026:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e002      	b.n	8001034 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800102e:	f06f 0303 	mvn.w	r3, #3
 8001032:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001034:	697b      	ldr	r3, [r7, #20]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003f8 	.word	0x200003f8

08001044 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001048:	f009 fa24 	bl	800a494 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <MX_I2C1_Init+0x80>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <MX_I2C1_Init+0x84>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f00b f9cc 	bl	800c434 <HAL_I2C_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00b ffa1 	bl	800cff0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f00b ffe3 	bl	800d086 <HAL_I2CEx_ConfigDigitalFilter>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	10909cec 	.word	0x10909cec

080010dc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ac      	sub	sp, #176	; 0xb0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2288      	movs	r2, #136	; 0x88
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00f fa0e 	bl	801050e <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4618      	mov	r0, r3
 8001100:	f00c fe3a 	bl	800dd78 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <I2C1_MspInit+0xb8>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <I2C1_MspInit+0xb8>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <I2C1_MspInit+0xb8>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001136:	2304      	movs	r3, #4
 8001138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	4619      	mov	r1, r3
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <I2C1_MspInit+0xbc>)
 8001144:	f00a fea8 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001162:	2304      	movs	r3, #4
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001168:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116c:	4619      	mov	r1, r3
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <I2C1_MspInit+0xbc>)
 8001170:	f00a fe92 	bl	800be98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <I2C1_MspInit+0xb8>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <I2C1_MspInit+0xb8>)
 800117a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <I2C1_MspInit+0xb8>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800118c:	bf00      	nop
 800118e:	37b0      	adds	r7, #176	; 0xb0
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	48000400 	.word	0x48000400

0800119c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <I2C1_MspDeInit+0x30>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <I2C1_MspDeInit+0x30>)
 80011aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <I2C1_MspDeInit+0x34>)
 80011b6:	f00b f819 	bl	800c1ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80011ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <I2C1_MspDeInit+0x34>)
 80011c0:	f00b f814 	bl	800c1ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400

080011d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <MX_GPIO_Init+0x128>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a43      	ldr	r2, [pc, #268]	; (80012fc <MX_GPIO_Init+0x128>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <MX_GPIO_Init+0x128>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <MX_GPIO_Init+0x128>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <MX_GPIO_Init+0x128>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <MX_GPIO_Init+0x128>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <MX_GPIO_Init+0x128>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a37      	ldr	r2, [pc, #220]	; (80012fc <MX_GPIO_Init+0x128>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <MX_GPIO_Init+0x128>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MX_GPIO_Init+0x128>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <MX_GPIO_Init+0x128>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_GPIO_Init+0x128>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f00b f8be 	bl	800c3d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800125e:	4828      	ldr	r0, [pc, #160]	; (8001300 <MX_GPIO_Init+0x12c>)
 8001260:	f00b f8b8 	bl	800c3d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <MX_GPIO_Init+0x130>)
 800126a:	f00b f8b3 	bl	800c3d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Blue_IT_Pin;
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001274:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_Blue_IT_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	481f      	ldr	r0, [pc, #124]	; (8001304 <MX_GPIO_Init+0x130>)
 8001286:	f00a fe07 	bl	800be98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D7_Pin|LCD_RS_Pin;
 800128a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f00a fdf7 	bl	800be98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80012aa:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_GPIO_Init+0x12c>)
 80012c4:	f00a fde8 	bl	800be98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <MX_GPIO_Init+0x130>)
 80012e0:	f00a fdda 	bl	800be98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f00a fd9e 	bl	800be2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f00a fdb7 	bl	800be62 <HAL_NVIC_EnableIRQ>

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800

08001308 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8001310:	e002      	b.n	8001318 <Delay+0x10>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3b01      	subs	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <Delay+0xa>
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <lcd_delay>:
void lcd_delay(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	Delay(200);
 8001330:	20c8      	movs	r0, #200	; 0xc8
 8001332:	f7ff ffe9 	bl	8001308 <Delay>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <lcd_cmd>:

void lcd_cmd(char out_char)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8001346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8001350:	4b5e      	ldr	r3, [pc, #376]	; (80014cc <lcd_cmd+0x190>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <lcd_cmd+0x194>)
 8001358:	2220      	movs	r2, #32
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800135c:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <lcd_cmd+0x194>)
 800135e:	2210      	movs	r2, #16
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <lcd_cmd+0x194>)
 8001364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800136a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800136e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001372:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8001374:	f7ff ffda 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <lcd_cmd+0x190>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a53      	ldr	r2, [pc, #332]	; (80014cc <lcd_cmd+0x190>)
 800137e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001382:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <lcd_cmd+0x5a>
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <lcd_cmd+0x194>)
 8001390:	2220      	movs	r2, #32
 8001392:	619a      	str	r2, [r3, #24]
 8001394:	e003      	b.n	800139e <lcd_cmd+0x62>
 8001396:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <lcd_cmd+0x194>)
 8001398:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800139c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <lcd_cmd+0x74>
 80013a8:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <lcd_cmd+0x194>)
 80013aa:	2210      	movs	r2, #16
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	e003      	b.n	80013b8 <lcd_cmd+0x7c>
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <lcd_cmd+0x194>)
 80013b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013b6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <lcd_cmd+0x90>
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <lcd_cmd+0x194>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	e003      	b.n	80013d4 <lcd_cmd+0x98>
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <lcd_cmd+0x194>)
 80013ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013d2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da05      	bge.n	80013e8 <lcd_cmd+0xac>
 80013dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	e004      	b.n	80013f2 <lcd_cmd+0xb6>
 80013e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013f0:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80013f2:	f7ff ff9b 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <lcd_cmd+0x190>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <lcd_cmd+0x194>)
 80013fe:	2220      	movs	r2, #32
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <lcd_cmd+0x194>)
 8001404:	2210      	movs	r2, #16
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <lcd_cmd+0x194>)
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800141a:	f7ff ff87 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <lcd_cmd+0x190>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <lcd_cmd+0x190>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <lcd_cmd+0x100>
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <lcd_cmd+0x194>)
 8001436:	2220      	movs	r2, #32
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	e003      	b.n	8001444 <lcd_cmd+0x108>
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <lcd_cmd+0x194>)
 800143e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001442:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <lcd_cmd+0x11a>
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <lcd_cmd+0x194>)
 8001450:	2210      	movs	r2, #16
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e003      	b.n	800145e <lcd_cmd+0x122>
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <lcd_cmd+0x194>)
 8001458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800145c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <lcd_cmd+0x136>
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <lcd_cmd+0x194>)
 800146a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	e003      	b.n	800147a <lcd_cmd+0x13e>
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <lcd_cmd+0x194>)
 8001474:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001478:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <lcd_cmd+0x154>
 8001484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e004      	b.n	800149a <lcd_cmd+0x15e>
 8001490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001498:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800149a:	f7ff ff47 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <lcd_cmd+0x190>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <lcd_cmd+0x194>)
 80014a6:	2220      	movs	r2, #32
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <lcd_cmd+0x194>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <lcd_cmd+0x194>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80014b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000400 	.word	0x48000400

080014d4 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80014de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ec:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <lcd_char_cp+0x194>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80014f4:	4b5d      	ldr	r3, [pc, #372]	; (800166c <lcd_char_cp+0x198>)
 80014f6:	2220      	movs	r2, #32
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <lcd_char_cp+0x198>)
 80014fc:	2210      	movs	r2, #16
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8001500:	4b5a      	ldr	r3, [pc, #360]	; (800166c <lcd_char_cp+0x198>)
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8001508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8001512:	f7ff ff0b 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <lcd_char_cp+0x194>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a53      	ldr	r2, [pc, #332]	; (8001668 <lcd_char_cp+0x194>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <lcd_char_cp+0x60>
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <lcd_char_cp+0x198>)
 800152e:	2220      	movs	r2, #32
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	e003      	b.n	800153c <lcd_char_cp+0x68>
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <lcd_char_cp+0x198>)
 8001536:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800153a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <lcd_char_cp+0x7a>
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <lcd_char_cp+0x198>)
 8001548:	2210      	movs	r2, #16
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	e003      	b.n	8001556 <lcd_char_cp+0x82>
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <lcd_char_cp+0x198>)
 8001550:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001554:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <lcd_char_cp+0x96>
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <lcd_char_cp+0x198>)
 8001562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	e003      	b.n	8001572 <lcd_char_cp+0x9e>
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <lcd_char_cp+0x198>)
 800156c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001570:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da05      	bge.n	8001586 <lcd_char_cp+0xb2>
 800157a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	619a      	str	r2, [r3, #24]
 8001584:	e004      	b.n	8001590 <lcd_char_cp+0xbc>
 8001586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800158e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8001590:	f7ff fecc 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <lcd_char_cp+0x194>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <lcd_char_cp+0x198>)
 800159c:	2220      	movs	r2, #32
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <lcd_char_cp+0x198>)
 80015a2:	2210      	movs	r2, #16
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <lcd_char_cp+0x198>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80015ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80015b8:	f7ff feb8 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <lcd_char_cp+0x194>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <lcd_char_cp+0x194>)
 80015c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c6:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <lcd_char_cp+0x106>
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <lcd_char_cp+0x198>)
 80015d4:	2220      	movs	r2, #32
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	e003      	b.n	80015e2 <lcd_char_cp+0x10e>
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <lcd_char_cp+0x198>)
 80015dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015e0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <lcd_char_cp+0x120>
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <lcd_char_cp+0x198>)
 80015ee:	2210      	movs	r2, #16
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	e003      	b.n	80015fc <lcd_char_cp+0x128>
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <lcd_char_cp+0x198>)
 80015f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015fa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <lcd_char_cp+0x13c>
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <lcd_char_cp+0x198>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	e003      	b.n	8001618 <lcd_char_cp+0x144>
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <lcd_char_cp+0x198>)
 8001612:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001616:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <lcd_char_cp+0x15a>
 8001622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	e004      	b.n	8001638 <lcd_char_cp+0x164>
 800162e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001636:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8001638:	f7ff fe78 	bl	800132c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <lcd_char_cp+0x194>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <lcd_char_cp+0x198>)
 8001644:	2220      	movs	r2, #32
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <lcd_char_cp+0x198>)
 800164a:	2210      	movs	r2, #16
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <lcd_char_cp+0x198>)
 8001650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	48000800 	.word	0x48000800
 800166c:	48000400 	.word	0x48000400

08001670 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8001678:	e008      	b.n	800168c <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff26 	bl	80014d4 <lcd_char_cp>
        lcd_delay();
 8001688:	f7ff fe50 	bl	800132c <lcd_delay>
	while(*out_char)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f2      	bne.n	800167a <lcd_out_cp+0xa>
	}

}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	460b      	mov	r3, r1
 80016aa:	71bb      	strb	r3, [r7, #6]
 80016ac:	4613      	mov	r3, r2
 80016ae:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 80016b0:	20fa      	movs	r0, #250	; 0xfa
 80016b2:	f008 fefb 	bl	800a4ac <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff fe40 	bl	800133c <lcd_cmd>
    HAL_Delay(50);
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f008 fef5 	bl	800a4ac <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe30 	bl	800133c <lcd_cmd>
    HAL_Delay(50);
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f008 fee5 	bl	800a4ac <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80016e2:	2006      	movs	r0, #6
 80016e4:	f7ff fe2a 	bl	800133c <lcd_cmd>
    HAL_Delay(50);
 80016e8:	2032      	movs	r0, #50	; 0x32
 80016ea:	f008 fedf 	bl	800a4ac <HAL_Delay>
    lcd_cmd(0x0E);
 80016ee:	200e      	movs	r0, #14
 80016f0:	f7ff fe24 	bl	800133c <lcd_cmd>
    HAL_Delay(50);
 80016f4:	2032      	movs	r0, #50	; 0x32
 80016f6:	f008 fed9 	bl	800a4ac <HAL_Delay>
    lcd_cmd(0x0C);
 80016fa:	200c      	movs	r0, #12
 80016fc:	f7ff fe1e 	bl	800133c <lcd_cmd>
    HAL_Delay(50);
 8001700:	2032      	movs	r0, #50	; 0x32
 8001702:	f008 fed3 	bl	800a4ac <HAL_Delay>
    lcd_cmd(0x01);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe18 	bl	800133c <lcd_cmd>
    HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f008 fecd 	bl	800a4ac <HAL_Delay>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	460a      	mov	r2, r1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	4613      	mov	r3, r2
 8001728:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	337f      	adds	r3, #127	; 0x7f
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fe00 	bl	800133c <lcd_cmd>
 800173c:	e008      	b.n	8001750 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d105      	bne.n	8001750 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	3b41      	subs	r3, #65	; 0x41
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fdf6 	bl	800133c <lcd_cmd>
	}
    HAL_Delay(5);
 8001750:	2005      	movs	r0, #5
 8001752:	f008 feab 	bl	800a4ac <HAL_Delay>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <lcd_char>:

void lcd_char(unsigned char row, unsigned char column, char out_char)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	460b      	mov	r3, r1
 800176a:	71bb      	strb	r3, [r7, #6]
 800176c:	4613      	mov	r3, r2
 800176e:	717b      	strb	r3, [r7, #5]
	lcd_gotoxy(row, column);
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ffcf 	bl	800171a <lcd_gotoxy>
	lcd_char_cp(out_char);
 800177c:	797b      	ldrb	r3, [r7, #5]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fea8 	bl	80014d4 <lcd_char_cp>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	603a      	str	r2, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	460b      	mov	r3, r1
 800179a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800179c:	79ba      	ldrb	r2, [r7, #6]
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffb9 	bl	800171a <lcd_gotoxy>
	lcd_out_cp(out_char);
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f7ff ff61 	bl	8001670 <lcd_out_cp>
    HAL_Delay(5);
 80017ae:	2005      	movs	r0, #5
 80017b0:	f008 fe7c 	bl	800a4ac <HAL_Delay>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <lcd_clear>:
void lcd_clear(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fdbb 	bl	800133c <lcd_cmd>
    HAL_Delay(5);
 80017c6:	2005      	movs	r0, #5
 80017c8:	f008 fe70 	bl	800a4ac <HAL_Delay>

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <adc_konwersja>:
bool przerwanie=false;
uint8_t jednostka_temperatury=0;
uint8_t mnoznik=10;

uint32_t adc_konwersja(bool wyswietl)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	char buf[16];
	uint32_t raw;
	HAL_ADC_Start(&hadc1);
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <adc_konwersja+0x60>)
 80017dc:	f009 fa0c 	bl	800abf8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <adc_konwersja+0x60>)
 80017e6:	f009 faf5 	bl	800add4 <HAL_ADC_PollForConversion>
	raw=HAL_ADC_GetValue(&hadc1);
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <adc_konwersja+0x60>)
 80017ec:	f009 fbca 	bl	800af84 <HAL_ADC_GetValue>
 80017f0:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <adc_konwersja+0x60>)
 80017f4:	f009 faba 	bl	800ad6c <HAL_ADC_Stop>
	if(wyswietl){
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d013      	beq.n	8001826 <adc_konwersja+0x56>
		sprintf(buf,"Odczytano: %lu",raw);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	490b      	ldr	r1, [pc, #44]	; (8001834 <adc_konwersja+0x64>)
 8001806:	4618      	mov	r0, r3
 8001808:	f00e fe1e 	bl	8010448 <siprintf>
		lcd_print(1,1,buf);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	461a      	mov	r2, r3
 8001812:	2101      	movs	r1, #1
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ffb9 	bl	800178c <lcd_print>
		HAL_Delay(1000);
 800181a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181e:	f008 fe45 	bl	800a4ac <HAL_Delay>
		lcd_clear();
 8001822:	f7ff ffcb 	bl	80017bc <lcd_clear>
	}
	return raw;
 8001826:	69fb      	ldr	r3, [r7, #28]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000394 	.word	0x20000394
 8001834:	08014c88 	.word	0x08014c88

08001838 <zmiana_temp>:
uint8_t zmiana_temp(struct przyciski p)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_Delay(150);
 8001844:	2096      	movs	r0, #150	; 0x96
 8001846:	f008 fe31 	bl	800a4ac <HAL_Delay>
	bool petla=true;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
	uint8_t j=0;
 800184e:	2300      	movs	r3, #0
 8001850:	75bb      	strb	r3, [r7, #22]
	while(petla)
 8001852:	e054      	b.n	80018fe <zmiana_temp+0xc6>
	{
		lcd_clear();
 8001854:	f7ff ffb2 	bl	80017bc <lcd_clear>
		lcd_print(1,1,"Jednostka");
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <zmiana_temp+0xd8>)
 800185a:	2101      	movs	r1, #1
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff ff95 	bl	800178c <lcd_print>
		switch(j)
 8001862:	7dbb      	ldrb	r3, [r7, #22]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <zmiana_temp+0x36>
 8001868:	2b01      	cmp	r3, #1
 800186a:	d006      	beq.n	800187a <zmiana_temp+0x42>
 800186c:	e00b      	b.n	8001886 <zmiana_temp+0x4e>
		{
		case 0:
			lcd_print(2,1,"Celsjusz");
 800186e:	4a29      	ldr	r2, [pc, #164]	; (8001914 <zmiana_temp+0xdc>)
 8001870:	2101      	movs	r1, #1
 8001872:	2002      	movs	r0, #2
 8001874:	f7ff ff8a 	bl	800178c <lcd_print>
			break;
 8001878:	e005      	b.n	8001886 <zmiana_temp+0x4e>
		case 1:
			lcd_print(2,1,"Fahrenheit");
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <zmiana_temp+0xe0>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f7ff ff84 	bl	800178c <lcd_print>
			break;
 8001884:	bf00      	nop
		}
		HAL_Delay(100);
 8001886:	2064      	movs	r0, #100	; 0x64
 8001888:	f008 fe10 	bl	800a4ac <HAL_Delay>
		uint16_t raw=adc_konwersja(false);
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff ff9f 	bl	80017d0 <adc_konwersja>
 8001892:	4603      	mov	r3, r0
 8001894:	82bb      	strh	r3, [r7, #20]
		if (raw>= p.up-150 && raw<=p.up+150)
 8001896:	8aba      	ldrh	r2, [r7, #20]
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	3b96      	subs	r3, #150	; 0x96
 800189c:	429a      	cmp	r2, r3
 800189e:	db0d      	blt.n	80018bc <zmiana_temp+0x84>
 80018a0:	8aba      	ldrh	r2, [r7, #20]
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	3396      	adds	r3, #150	; 0x96
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dc08      	bgt.n	80018bc <zmiana_temp+0x84>
		{
			if(j==1)
 80018aa:	7dbb      	ldrb	r3, [r7, #22]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <zmiana_temp+0x7e>
			{
				j=0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75bb      	strb	r3, [r7, #22]
 80018b4:	e002      	b.n	80018bc <zmiana_temp+0x84>
			}
			else
				j++;
 80018b6:	7dbb      	ldrb	r3, [r7, #22]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75bb      	strb	r3, [r7, #22]
		}
		if(raw>= p.down-150 && raw<=p.down+150)
 80018bc:	8aba      	ldrh	r2, [r7, #20]
 80018be:	89bb      	ldrh	r3, [r7, #12]
 80018c0:	3b96      	subs	r3, #150	; 0x96
 80018c2:	429a      	cmp	r2, r3
 80018c4:	db0d      	blt.n	80018e2 <zmiana_temp+0xaa>
 80018c6:	8aba      	ldrh	r2, [r7, #20]
 80018c8:	89bb      	ldrh	r3, [r7, #12]
 80018ca:	3396      	adds	r3, #150	; 0x96
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dc08      	bgt.n	80018e2 <zmiana_temp+0xaa>
		{
			if(j==0)
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <zmiana_temp+0xa4>
			{
				j=1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75bb      	strb	r3, [r7, #22]
 80018da:	e002      	b.n	80018e2 <zmiana_temp+0xaa>
			}
			else
				j--;
 80018dc:	7dbb      	ldrb	r3, [r7, #22]
 80018de:	3b01      	subs	r3, #1
 80018e0:	75bb      	strb	r3, [r7, #22]
			}
		if (raw>= p.select-150 && raw<=p.select+150)
 80018e2:	8aba      	ldrh	r2, [r7, #20]
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	3b96      	subs	r3, #150	; 0x96
 80018e8:	429a      	cmp	r2, r3
 80018ea:	db06      	blt.n	80018fa <zmiana_temp+0xc2>
 80018ec:	8aba      	ldrh	r2, [r7, #20]
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	3396      	adds	r3, #150	; 0x96
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dc01      	bgt.n	80018fa <zmiana_temp+0xc2>
		{
			petla=false;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
		}
		lcd_clear();
 80018fa:	f7ff ff5f 	bl	80017bc <lcd_clear>
	while(petla)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1a7      	bne.n	8001854 <zmiana_temp+0x1c>
		}
		return j;
 8001904:	7dbb      	ldrb	r3, [r7, #22]

}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08014c98 	.word	0x08014c98
 8001914:	08014ca4 	.word	0x08014ca4
 8001918:	08014cb0 	.word	0x08014cb0

0800191c <wyswietl_date>:
void wyswietl_date()
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b090      	sub	sp, #64	; 0x40
 8001920:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	char buf[17];
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	482a      	ldr	r0, [pc, #168]	; (80019d4 <wyswietl_date+0xb8>)
 800192c:	f00d f805 	bl	800e93a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date, RTC_FORMAT_BIN);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <wyswietl_date+0xb8>)
 800193a:	f00d f8e1 	bl	800eb00 <HAL_RTC_GetDate>
	for(int i=0;i<2;i++)
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001942:	e03e      	b.n	80019c2 <wyswietl_date+0xa6>
	{
		lcd_char(1,16,6);
 8001944:	2206      	movs	r2, #6
 8001946:	2110      	movs	r1, #16
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff ff08 	bl	800175e <lcd_char>
		if(i%2==0)
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d110      	bne.n	800197a <wyswietl_date+0x5e>
		{
			sprintf(buf,"%02d:%02d %02d.%02d.20%02d",time.Hours,time.Minutes,date.Date,date.Month,date.Year);
 8001958:	7e3b      	ldrb	r3, [r7, #24]
 800195a:	461c      	mov	r4, r3
 800195c:	7e7b      	ldrb	r3, [r7, #25]
 800195e:	461d      	mov	r5, r3
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	7d7a      	ldrb	r2, [r7, #21]
 8001964:	7df9      	ldrb	r1, [r7, #23]
 8001966:	4638      	mov	r0, r7
 8001968:	9102      	str	r1, [sp, #8]
 800196a:	9201      	str	r2, [sp, #4]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	462b      	mov	r3, r5
 8001970:	4622      	mov	r2, r4
 8001972:	4919      	ldr	r1, [pc, #100]	; (80019d8 <wyswietl_date+0xbc>)
 8001974:	f00e fd68 	bl	8010448 <siprintf>
 8001978:	e00f      	b.n	800199a <wyswietl_date+0x7e>
		}
		else
		{
			sprintf(buf,"%02d %02d %02d.%02d.20%02d",time.Hours,time.Minutes,date.Date,date.Month,date.Year);
 800197a:	7e3b      	ldrb	r3, [r7, #24]
 800197c:	461c      	mov	r4, r3
 800197e:	7e7b      	ldrb	r3, [r7, #25]
 8001980:	461d      	mov	r5, r3
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	7d7a      	ldrb	r2, [r7, #21]
 8001986:	7df9      	ldrb	r1, [r7, #23]
 8001988:	4638      	mov	r0, r7
 800198a:	9102      	str	r1, [sp, #8]
 800198c:	9201      	str	r2, [sp, #4]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	462b      	mov	r3, r5
 8001992:	4622      	mov	r2, r4
 8001994:	4911      	ldr	r1, [pc, #68]	; (80019dc <wyswietl_date+0xc0>)
 8001996:	f00e fd57 	bl	8010448 <siprintf>
		}
		lcd_print(1,1,"Godzina i data");
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <wyswietl_date+0xc4>)
 800199c:	2101      	movs	r1, #1
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fef4 	bl	800178c <lcd_print>
		lcd_print(2,1,buf);
 80019a4:	463b      	mov	r3, r7
 80019a6:	461a      	mov	r2, r3
 80019a8:	2101      	movs	r1, #1
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff feee 	bl	800178c <lcd_print>
		HAL_Delay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b4:	f008 fd7a 	bl	800a4ac <HAL_Delay>
		lcd_clear();
 80019b8:	f7ff ff00 	bl	80017bc <lcd_clear>
	for(int i=0;i<2;i++)
 80019bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019be:	3301      	adds	r3, #1
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	ddbd      	ble.n	8001944 <wyswietl_date+0x28>
	}

}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdb0      	pop	{r4, r5, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000454 	.word	0x20000454
 80019d8:	08014cbc 	.word	0x08014cbc
 80019dc:	08014cd8 	.word	0x08014cd8
 80019e0:	08014cf4 	.word	0x08014cf4

080019e4 <wywolaj_funkcje>:
void wywolaj_funkcje(uint8_t licznik)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	switch(licznik)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d81d      	bhi.n	8001a30 <wywolaj_funkcje+0x4c>
 80019f4:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <wywolaj_funkcje+0x18>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a1b 	.word	0x08001a1b
 8001a04:	08001a23 	.word	0x08001a23
 8001a08:	08001a2b 	.word	0x08001a2b
	{
		case 0:
			Temp_Sensor_Handler(0,jednostka_temperatury);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <wywolaj_funkcje+0x54>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	2000      	movs	r0, #0
 8001a14:	f00d fbd4 	bl	800f1c0 <Temp_Sensor_Handler>
			break;
 8001a18:	e00a      	b.n	8001a30 <wywolaj_funkcje+0x4c>
		case 1:
			Hum_Sensor_Handler(0);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f00d fd28 	bl	800f470 <Hum_Sensor_Handler>
			break;
 8001a20:	e006      	b.n	8001a30 <wywolaj_funkcje+0x4c>
		case 2:
			Press_Sensor_Handler(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f00d fcae 	bl	800f384 <Press_Sensor_Handler>
			break;
 8001a28:	e002      	b.n	8001a30 <wywolaj_funkcje+0x4c>
		case 3:
			wyswietl_date();
 8001a2a:	f7ff ff77 	bl	800191c <wyswietl_date>
			break;
 8001a2e:	bf00      	nop

	}
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000451 	.word	0x20000451

08001a3c <menu_acykliczne>:
void menu_acykliczne(uint8_t *licz,struct przyciski p){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4638      	mov	r0, r7
 8001a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t licznik=*licz;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	75fb      	strb	r3, [r7, #23]
	uint32_t raw;
	bool petla=true;
 8001a50:	2301      	movs	r3, #1
 8001a52:	75bb      	strb	r3, [r7, #22]
	while(petla)
 8001a54:	e05d      	b.n	8001b12 <menu_acykliczne+0xd6>
	{
		switch(licznik){
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d81f      	bhi.n	8001a9c <menu_acykliczne+0x60>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <menu_acykliczne+0x28>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a7f 	.word	0x08001a7f
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001a93 	.word	0x08001a93
			case 0:
				wywolaj_funkcje(licznik);
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffb4 	bl	80019e4 <wywolaj_funkcje>
				break;
 8001a7c:	e00e      	b.n	8001a9c <menu_acykliczne+0x60>
			case 1:
				wywolaj_funkcje(licznik);
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ffaf 	bl	80019e4 <wywolaj_funkcje>
				break;
 8001a86:	e009      	b.n	8001a9c <menu_acykliczne+0x60>
			case 2:
				wywolaj_funkcje(licznik);
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffaa 	bl	80019e4 <wywolaj_funkcje>
				break;
 8001a90:	e004      	b.n	8001a9c <menu_acykliczne+0x60>
			case 3:
				wywolaj_funkcje(licznik);
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffa5 	bl	80019e4 <wywolaj_funkcje>
				break;
 8001a9a:	bf00      	nop
		}
		raw=adc_konwersja(false);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fe97 	bl	80017d0 <adc_konwersja>
 8001aa2:	6138      	str	r0, [r7, #16]
		if(raw>=p.right && raw<=p.right+150)
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d30e      	bcc.n	8001acc <menu_acykliczne+0x90>
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	3396      	adds	r3, #150	; 0x96
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d808      	bhi.n	8001acc <menu_acykliczne+0x90>
		{
			  if(licznik==3)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d102      	bne.n	8001ac6 <menu_acykliczne+0x8a>
			  {
				  licznik=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
 8001ac4:	e002      	b.n	8001acc <menu_acykliczne+0x90>
			  }
			  else
				  licznik++;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	75fb      	strb	r3, [r7, #23]
		}
		if(raw>=p.left-150 && raw<=p.left+150)
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	3b96      	subs	r3, #150	; 0x96
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d30e      	bcc.n	8001af6 <menu_acykliczne+0xba>
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	3396      	adds	r3, #150	; 0x96
 8001adc:	461a      	mov	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d808      	bhi.n	8001af6 <menu_acykliczne+0xba>
		{
			  if(licznik==0)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <menu_acykliczne+0xb4>
			  {
				  licznik=3;
 8001aea:	2303      	movs	r3, #3
 8001aec:	75fb      	strb	r3, [r7, #23]
 8001aee:	e002      	b.n	8001af6 <menu_acykliczne+0xba>
			  }
			  else
			  {
				  licznik--;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
			  }
		}
		if (raw>=p.select-150 && raw<=p.select+150)
 8001af6:	883b      	ldrh	r3, [r7, #0]
 8001af8:	3b96      	subs	r3, #150	; 0x96
 8001afa:	461a      	mov	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d307      	bcc.n	8001b12 <menu_acykliczne+0xd6>
 8001b02:	883b      	ldrh	r3, [r7, #0]
 8001b04:	3396      	adds	r3, #150	; 0x96
 8001b06:	461a      	mov	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d801      	bhi.n	8001b12 <menu_acykliczne+0xd6>
		{
			petla=false;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75bb      	strb	r3, [r7, #22]
	while(petla)
 8001b12:	7dbb      	ldrb	r3, [r7, #22]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d19e      	bne.n	8001a56 <menu_acykliczne+0x1a>

		}
	}

}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <zmiana_mnoznika>:
void zmiana_mnoznika(struct przyciski p)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t raw;
	uint8_t j=mnoznik;
 8001b30:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <zmiana_mnoznika+0xec>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool edytowanie_nieukonczone=true;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	char buf[17];
	HAL_Delay(150);
 8001b3e:	2096      	movs	r0, #150	; 0x96
 8001b40:	f008 fcb4 	bl	800a4ac <HAL_Delay>
	do
	{
		raw=adc_konwersja(false);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fe43 	bl	80017d0 <adc_konwersja>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (raw>= p.up-150 && raw<=p.up+150)
 8001b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	3b96      	subs	r3, #150	; 0x96
 8001b54:	429a      	cmp	r2, r3
 8001b56:	db11      	blt.n	8001b7c <zmiana_mnoznika+0x58>
 8001b58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	3396      	adds	r3, #150	; 0x96
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dc0c      	bgt.n	8001b7c <zmiana_mnoznika+0x58>
		{
			if(j==60)
 8001b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b66:	2b3c      	cmp	r3, #60	; 0x3c
 8001b68:	d103      	bne.n	8001b72 <zmiana_mnoznika+0x4e>
			{
				j=1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b70:	e004      	b.n	8001b7c <zmiana_mnoznika+0x58>
			}
			else
				j++;
 8001b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b76:	3301      	adds	r3, #1
 8001b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  }
		if (raw>= p.down-150 && raw<=p.down+150)
 8001b7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b7e:	89bb      	ldrh	r3, [r7, #12]
 8001b80:	3b96      	subs	r3, #150	; 0x96
 8001b82:	429a      	cmp	r2, r3
 8001b84:	db11      	blt.n	8001baa <zmiana_mnoznika+0x86>
 8001b86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	3396      	adds	r3, #150	; 0x96
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dc0c      	bgt.n	8001baa <zmiana_mnoznika+0x86>
		{
			if(j==1)
 8001b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d103      	bne.n	8001ba0 <zmiana_mnoznika+0x7c>
			{
				j=60;
 8001b98:	233c      	movs	r3, #60	; 0x3c
 8001b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b9e:	e004      	b.n	8001baa <zmiana_mnoznika+0x86>
			}
			else
				j--;
 8001ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		if (raw>= p.select-150 && raw<=p.select+150)
 8001baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	3b96      	subs	r3, #150	; 0x96
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	db0b      	blt.n	8001bcc <zmiana_mnoznika+0xa8>
 8001bb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	3396      	adds	r3, #150	; 0x96
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dc06      	bgt.n	8001bcc <zmiana_mnoznika+0xa8>
		{
			edytowanie_nieukonczone=false;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			mnoznik=j;
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <zmiana_mnoznika+0xec>)
 8001bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bca:	7013      	strb	r3, [r2, #0]
		}
		sprintf(buf,"%d sekund",j);
 8001bcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	490f      	ldr	r1, [pc, #60]	; (8001c14 <zmiana_mnoznika+0xf0>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00e fc36 	bl	8010448 <siprintf>
		lcd_print(1,1,"Czas wysw");
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <zmiana_mnoznika+0xf4>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fdd3 	bl	800178c <lcd_print>
		lcd_print(2,1,buf);
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	461a      	mov	r2, r3
 8001bec:	2101      	movs	r1, #1
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f7ff fdcc 	bl	800178c <lcd_print>
		HAL_Delay(150);
 8001bf4:	2096      	movs	r0, #150	; 0x96
 8001bf6:	f008 fc59 	bl	800a4ac <HAL_Delay>
		lcd_clear();
 8001bfa:	f7ff fddf 	bl	80017bc <lcd_clear>

	}
	while(edytowanie_nieukonczone);
 8001bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d19e      	bne.n	8001b44 <zmiana_mnoznika+0x20>
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	08014d04 	.word	0x08014d04
 8001c18:	08014d10 	.word	0x08014d10

08001c1c <lcd_create_custom_char>:
void lcd_create_custom_char(uint8_t char_addr, char* char_data) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
 char_addr &= 0x07;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	71fb      	strb	r3, [r7, #7]
 lcd_cmd(0x40 + (char_addr * 8));
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	3308      	adds	r3, #8
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb7e 	bl	800133c <lcd_cmd>
 for (int i = 0; i < 8; ++i) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e009      	b.n	8001c5a <lcd_create_custom_char+0x3e>
 lcd_char_cp(char_data[i]);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fc40 	bl	80014d4 <lcd_char_cp>
 for (int i = 0; i < 8; ++i) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	ddf2      	ble.n	8001c46 <lcd_create_custom_char+0x2a>
 }}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <edytowanie_godziny>:
void edytowanie_godziny(RTC_TimeTypeDef *time,uint8_t *migniecie,struct przyciski p)
{
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b088      	sub	sp, #32
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
 8001c78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c7c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t raw;
	char buf[16];
	lcd_print(1,1,"HH:MM");
 8001c80:	4a3f      	ldr	r2, [pc, #252]	; (8001d80 <edytowanie_godziny+0x114>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fd81 	bl	800178c <lcd_print>
			if(*migniecie<=6)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d810      	bhi.n	8001cb4 <edytowanie_godziny+0x48>
			{
				sprintf(buf,"%02d:%02d",time->Hours,time->Minutes);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	f107 000c 	add.w	r0, r7, #12
 8001ca0:	4938      	ldr	r1, [pc, #224]	; (8001d84 <edytowanie_godziny+0x118>)
 8001ca2:	f00e fbd1 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e01f      	b.n	8001cf4 <edytowanie_godziny+0x88>
			}
			else if(*migniecie<=9)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d80f      	bhi.n	8001cdc <edytowanie_godziny+0x70>
			{
				sprintf(buf,"  :%02d",time->Minutes);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4930      	ldr	r1, [pc, #192]	; (8001d88 <edytowanie_godziny+0x11c>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00e fbbd 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e00b      	b.n	8001cf4 <edytowanie_godziny+0x88>
			}else
			{
				sprintf(buf,"  :%02d",time->Minutes);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4928      	ldr	r1, [pc, #160]	; (8001d88 <edytowanie_godziny+0x11c>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00e fbad 	bl	8010448 <siprintf>
				*migniecie=0;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
			}
				lcd_print(2,1,buf);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f7ff fd45 	bl	800178c <lcd_print>
				HAL_Delay(100);
 8001d02:	2064      	movs	r0, #100	; 0x64
 8001d04:	f008 fbd2 	bl	800a4ac <HAL_Delay>

			raw=adc_konwersja(false);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff fd61 	bl	80017d0 <adc_konwersja>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	83fb      	strh	r3, [r7, #30]
			if(raw>=p.up-150 && raw<=p.up+150)
 8001d12:	8bfa      	ldrh	r2, [r7, #30]
 8001d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d16:	3b96      	subs	r3, #150	; 0x96
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	db12      	blt.n	8001d42 <edytowanie_godziny+0xd6>
 8001d1c:	8bfa      	ldrh	r2, [r7, #30]
 8001d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d20:	3396      	adds	r3, #150	; 0x96
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dc0d      	bgt.n	8001d42 <edytowanie_godziny+0xd6>
			{
				  if(time->Hours==23)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b17      	cmp	r3, #23
 8001d2c:	d103      	bne.n	8001d36 <edytowanie_godziny+0xca>
				  {
					  time->Hours=0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e005      	b.n	8001d42 <edytowanie_godziny+0xd6>
				  }
				  else
					  time->Hours++;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	701a      	strb	r2, [r3, #0]
			}
			if(raw>=p.down-150 && raw<=p.down+150)
 8001d42:	8bfa      	ldrh	r2, [r7, #30]
 8001d44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d46:	3b96      	subs	r3, #150	; 0x96
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	db12      	blt.n	8001d72 <edytowanie_godziny+0x106>
 8001d4c:	8bfa      	ldrh	r2, [r7, #30]
 8001d4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d50:	3396      	adds	r3, #150	; 0x96
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dc0d      	bgt.n	8001d72 <edytowanie_godziny+0x106>
			{
				  if(time->Hours==0)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <edytowanie_godziny+0xfa>
				  {
					  time->Hours=23;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2217      	movs	r2, #23
 8001d62:	701a      	strb	r2, [r3, #0]
				  {
					  time->Hours--;
				  }
			}

}
 8001d64:	e005      	b.n	8001d72 <edytowanie_godziny+0x106>
					  time->Hours--;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr
 8001d80:	08014d1c 	.word	0x08014d1c
 8001d84:	08014d24 	.word	0x08014d24
 8001d88:	08014d30 	.word	0x08014d30

08001d8c <edytowanie_minuty>:
void edytowanie_minuty(RTC_TimeTypeDef *time,uint8_t *migniecie,struct przyciski p)
{
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b088      	sub	sp, #32
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
 8001d98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d9c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t raw;
	char buf[16];
	lcd_print(1,1,"HH:MM");
 8001da0:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <edytowanie_minuty+0x114>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fcf1 	bl	800178c <lcd_print>
			if(*migniecie<=6)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d810      	bhi.n	8001dd4 <edytowanie_minuty+0x48>
			{
				sprintf(buf,"%02d:%02d",time->Hours,time->Minutes);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	f107 000c 	add.w	r0, r7, #12
 8001dc0:	4938      	ldr	r1, [pc, #224]	; (8001ea4 <edytowanie_minuty+0x118>)
 8001dc2:	f00e fb41 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e01f      	b.n	8001e14 <edytowanie_minuty+0x88>
			}
			else if(*migniecie<=9)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	d80f      	bhi.n	8001dfc <edytowanie_minuty+0x70>
			{
				sprintf(buf,"%02d:  ",time->Hours);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4930      	ldr	r1, [pc, #192]	; (8001ea8 <edytowanie_minuty+0x11c>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00e fb2d 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e00b      	b.n	8001e14 <edytowanie_minuty+0x88>
			}else
			{
				sprintf(buf,"%02d:  ",time->Hours);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4928      	ldr	r1, [pc, #160]	; (8001ea8 <edytowanie_minuty+0x11c>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00e fb1d 	bl	8010448 <siprintf>
				*migniecie=0;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			}
				lcd_print(2,1,buf);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f7ff fcb5 	bl	800178c <lcd_print>
				HAL_Delay(100);
 8001e22:	2064      	movs	r0, #100	; 0x64
 8001e24:	f008 fb42 	bl	800a4ac <HAL_Delay>

			raw=adc_konwersja(false);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fcd1 	bl	80017d0 <adc_konwersja>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	83fb      	strh	r3, [r7, #30]
			if(raw>=p.up-150 && raw<=p.up+150)
 8001e32:	8bfa      	ldrh	r2, [r7, #30]
 8001e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e36:	3b96      	subs	r3, #150	; 0x96
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	db12      	blt.n	8001e62 <edytowanie_minuty+0xd6>
 8001e3c:	8bfa      	ldrh	r2, [r7, #30]
 8001e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e40:	3396      	adds	r3, #150	; 0x96
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dc0d      	bgt.n	8001e62 <edytowanie_minuty+0xd6>
			{
				  if(time->Minutes==59)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e4c:	d103      	bne.n	8001e56 <edytowanie_minuty+0xca>
				  {
					  time->Minutes=0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	705a      	strb	r2, [r3, #1]
 8001e54:	e005      	b.n	8001e62 <edytowanie_minuty+0xd6>
				  }
				  else
					  time->Minutes++;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	705a      	strb	r2, [r3, #1]
			}
			if(raw>=p.down-150 && raw<=p.down+150)
 8001e62:	8bfa      	ldrh	r2, [r7, #30]
 8001e64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e66:	3b96      	subs	r3, #150	; 0x96
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	db12      	blt.n	8001e92 <edytowanie_minuty+0x106>
 8001e6c:	8bfa      	ldrh	r2, [r7, #30]
 8001e6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e70:	3396      	adds	r3, #150	; 0x96
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dc0d      	bgt.n	8001e92 <edytowanie_minuty+0x106>
			{
				  if(time->Minutes==0)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <edytowanie_minuty+0xfa>
				  {
					  time->Minutes=59;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	223b      	movs	r2, #59	; 0x3b
 8001e82:	705a      	strb	r2, [r3, #1]
				  else
				  {
					  time->Minutes--;
				  }
			}
}
 8001e84:	e005      	b.n	8001e92 <edytowanie_minuty+0x106>
					  time->Minutes--;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	705a      	strb	r2, [r3, #1]
}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e9c:	b002      	add	sp, #8
 8001e9e:	4770      	bx	lr
 8001ea0:	08014d1c 	.word	0x08014d1c
 8001ea4:	08014d24 	.word	0x08014d24
 8001ea8:	08014d38 	.word	0x08014d38

08001eac <edytowanie_dnia>:
void edytowanie_dnia(RTC_DateTypeDef *date,uint8_t *migniecie,struct przyciski p)
{
 8001eac:	b082      	sub	sp, #8
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b08a      	sub	sp, #40	; 0x28
 8001eb2:	af02      	add	r7, sp, #8
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
 8001eb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ebc:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t raw;
	char buf[16];
	lcd_print(1,1,"DD.MM.YYYY");
 8001ec0:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <edytowanie_dnia+0x124>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff fc61 	bl	800178c <lcd_print>
			if(*migniecie<=6)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d815      	bhi.n	8001efe <edytowanie_dnia+0x52>
			{
				sprintf(buf,"%02d.%02d.20%02d",date->Date,date->Month,date->Year);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	789b      	ldrb	r3, [r3, #2]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	785b      	ldrb	r3, [r3, #1]
 8001edc:	4619      	mov	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	f107 000c 	add.w	r0, r7, #12
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	493a      	ldr	r1, [pc, #232]	; (8001fd4 <edytowanie_dnia+0x128>)
 8001eec:	f00e faac 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e021      	b.n	8001f42 <edytowanie_dnia+0x96>
			}
			else if(*migniecie<=9)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	d810      	bhi.n	8001f28 <edytowanie_dnia+0x7c>
			{
				sprintf(buf,"  .%02d.20%02d",date->Month,date->Year);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	78db      	ldrb	r3, [r3, #3]
 8001f10:	f107 000c 	add.w	r0, r7, #12
 8001f14:	4930      	ldr	r1, [pc, #192]	; (8001fd8 <edytowanie_dnia+0x12c>)
 8001f16:	f00e fa97 	bl	8010448 <siprintf>
				*migniecie+=1;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e00c      	b.n	8001f42 <edytowanie_dnia+0x96>
			}else
			{
				sprintf(buf,"  .%02d.20%02d",date->Month,date->Year);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	78db      	ldrb	r3, [r3, #3]
 8001f32:	f107 000c 	add.w	r0, r7, #12
 8001f36:	4928      	ldr	r1, [pc, #160]	; (8001fd8 <edytowanie_dnia+0x12c>)
 8001f38:	f00e fa86 	bl	8010448 <siprintf>
				*migniecie=0;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
			}
				lcd_print(2,1,buf);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	461a      	mov	r2, r3
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7ff fc1e 	bl	800178c <lcd_print>
				HAL_Delay(100);
 8001f50:	2064      	movs	r0, #100	; 0x64
 8001f52:	f008 faab 	bl	800a4ac <HAL_Delay>

			raw=adc_konwersja(false);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff fc3a 	bl	80017d0 <adc_konwersja>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	83fb      	strh	r3, [r7, #30]
			if(raw>=p.up-150 && raw<=p.up+150)
 8001f60:	8bfa      	ldrh	r2, [r7, #30]
 8001f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f64:	3b96      	subs	r3, #150	; 0x96
 8001f66:	429a      	cmp	r2, r3
 8001f68:	db12      	blt.n	8001f90 <edytowanie_dnia+0xe4>
 8001f6a:	8bfa      	ldrh	r2, [r7, #30]
 8001f6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6e:	3396      	adds	r3, #150	; 0x96
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dc0d      	bgt.n	8001f90 <edytowanie_dnia+0xe4>
			{
				  if(date->Date==31)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	2b1f      	cmp	r3, #31
 8001f7a:	d103      	bne.n	8001f84 <edytowanie_dnia+0xd8>
				  {
					  date->Date=1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	709a      	strb	r2, [r3, #2]
 8001f82:	e005      	b.n	8001f90 <edytowanie_dnia+0xe4>
				  }
				  else
					  date->Date++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	709a      	strb	r2, [r3, #2]
			}
			if(raw>=p.down-150 && raw<=p.down+150)
 8001f90:	8bfa      	ldrh	r2, [r7, #30]
 8001f92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001f94:	3b96      	subs	r3, #150	; 0x96
 8001f96:	429a      	cmp	r2, r3
 8001f98:	db12      	blt.n	8001fc0 <edytowanie_dnia+0x114>
 8001f9a:	8bfa      	ldrh	r2, [r7, #30]
 8001f9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001f9e:	3396      	adds	r3, #150	; 0x96
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dc0d      	bgt.n	8001fc0 <edytowanie_dnia+0x114>
			{
				  if(date->Date==1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d103      	bne.n	8001fb4 <edytowanie_dnia+0x108>
				  {
					  date->Date=31;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	221f      	movs	r2, #31
 8001fb0:	709a      	strb	r2, [r3, #2]
				  else
				  {
					  date->Date--;
				  }
			}
}
 8001fb2:	e005      	b.n	8001fc0 <edytowanie_dnia+0x114>
					  date->Date--;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	709a      	strb	r2, [r3, #2]
}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fca:	b002      	add	sp, #8
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	08014d40 	.word	0x08014d40
 8001fd4:	08014d4c 	.word	0x08014d4c
 8001fd8:	08014d60 	.word	0x08014d60

08001fdc <edytowanie_miesiaca>:
void edytowanie_miesiaca(RTC_DateTypeDef *date,uint8_t *migniecie,struct przyciski p)
{
 8001fdc:	b082      	sub	sp, #8
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	; 0x28
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
 8001fe8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fec:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t raw;
	char buf[16];
	lcd_print(1,1,"DD.MM.YYYY");
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <edytowanie_miesiaca+0x124>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff fbc9 	bl	800178c <lcd_print>
			if(*migniecie<=6)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d815      	bhi.n	800202e <edytowanie_miesiaca+0x52>
			{
				sprintf(buf,"%02d.%02d.20%02d",date->Date,date->Month,date->Year);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	789b      	ldrb	r3, [r3, #2]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	4619      	mov	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	78db      	ldrb	r3, [r3, #3]
 8002012:	f107 000c 	add.w	r0, r7, #12
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	493a      	ldr	r1, [pc, #232]	; (8002104 <edytowanie_miesiaca+0x128>)
 800201c:	f00e fa14 	bl	8010448 <siprintf>
				*migniecie+=1;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e021      	b.n	8002072 <edytowanie_miesiaca+0x96>
			}
			else if(*migniecie<=9)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b09      	cmp	r3, #9
 8002034:	d810      	bhi.n	8002058 <edytowanie_miesiaca+0x7c>
			{
				sprintf(buf,"%02d.  .20%02d",date->Date,date->Year);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	78db      	ldrb	r3, [r3, #3]
 8002040:	f107 000c 	add.w	r0, r7, #12
 8002044:	4930      	ldr	r1, [pc, #192]	; (8002108 <edytowanie_miesiaca+0x12c>)
 8002046:	f00e f9ff 	bl	8010448 <siprintf>
				*migniecie+=1;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e00c      	b.n	8002072 <edytowanie_miesiaca+0x96>
			}else
			{
				sprintf(buf,"%02d.  .20%02d",date->Date,date->Year);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	789b      	ldrb	r3, [r3, #2]
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	f107 000c 	add.w	r0, r7, #12
 8002066:	4928      	ldr	r1, [pc, #160]	; (8002108 <edytowanie_miesiaca+0x12c>)
 8002068:	f00e f9ee 	bl	8010448 <siprintf>
				*migniecie=0;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
			}
				lcd_print(2,1,buf);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	461a      	mov	r2, r3
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f7ff fb86 	bl	800178c <lcd_print>
				HAL_Delay(100);
 8002080:	2064      	movs	r0, #100	; 0x64
 8002082:	f008 fa13 	bl	800a4ac <HAL_Delay>

			raw=adc_konwersja(false);
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff fba2 	bl	80017d0 <adc_konwersja>
 800208c:	4603      	mov	r3, r0
 800208e:	83fb      	strh	r3, [r7, #30]
			if(raw>=p.up-150 && raw<=p.up+150)
 8002090:	8bfa      	ldrh	r2, [r7, #30]
 8002092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002094:	3b96      	subs	r3, #150	; 0x96
 8002096:	429a      	cmp	r2, r3
 8002098:	db12      	blt.n	80020c0 <edytowanie_miesiaca+0xe4>
 800209a:	8bfa      	ldrh	r2, [r7, #30]
 800209c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800209e:	3396      	adds	r3, #150	; 0x96
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dc0d      	bgt.n	80020c0 <edytowanie_miesiaca+0xe4>
			{
				  if(date->Month==12)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d103      	bne.n	80020b4 <edytowanie_miesiaca+0xd8>
				  {
					  date->Month=1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	705a      	strb	r2, [r3, #1]
 80020b2:	e005      	b.n	80020c0 <edytowanie_miesiaca+0xe4>
				  }
				  else
					  date->Month++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	705a      	strb	r2, [r3, #1]
			}
			if(raw>=p.down-150 && raw<=p.down+150)
 80020c0:	8bfa      	ldrh	r2, [r7, #30]
 80020c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020c4:	3b96      	subs	r3, #150	; 0x96
 80020c6:	429a      	cmp	r2, r3
 80020c8:	db12      	blt.n	80020f0 <edytowanie_miesiaca+0x114>
 80020ca:	8bfa      	ldrh	r2, [r7, #30]
 80020cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020ce:	3396      	adds	r3, #150	; 0x96
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dc0d      	bgt.n	80020f0 <edytowanie_miesiaca+0x114>
			{
				  if(date->Month==1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d103      	bne.n	80020e4 <edytowanie_miesiaca+0x108>
				  {
					  date->Month=12;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	220c      	movs	r2, #12
 80020e0:	705a      	strb	r2, [r3, #1]
				  else
				  {
					  date->Month--;
				  }
			}
}
 80020e2:	e005      	b.n	80020f0 <edytowanie_miesiaca+0x114>
					  date->Month--;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	705a      	strb	r2, [r3, #1]
}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020fa:	b002      	add	sp, #8
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	08014d40 	.word	0x08014d40
 8002104:	08014d4c 	.word	0x08014d4c
 8002108:	08014d70 	.word	0x08014d70

0800210c <edytowanie_roku>:
void edytowanie_roku(RTC_DateTypeDef *date,uint8_t *migniecie,struct przyciski p)
{
 800210c:	b082      	sub	sp, #8
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af02      	add	r7, sp, #8
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
 8002118:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800211c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t raw;
	char buf[16];
	lcd_print(1,1,"DD.MM.YYYY");
 8002120:	4a43      	ldr	r2, [pc, #268]	; (8002230 <edytowanie_roku+0x124>)
 8002122:	2101      	movs	r1, #1
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff fb31 	bl	800178c <lcd_print>
			if(*migniecie<=6)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d815      	bhi.n	800215e <edytowanie_roku+0x52>
			{
				sprintf(buf,"%02d.%02d.20%02d",date->Date,date->Month,date->Year);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	4619      	mov	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	f107 000c 	add.w	r0, r7, #12
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	460b      	mov	r3, r1
 800214a:	493a      	ldr	r1, [pc, #232]	; (8002234 <edytowanie_roku+0x128>)
 800214c:	f00e f97c 	bl	8010448 <siprintf>
				*migniecie+=1;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e021      	b.n	80021a2 <edytowanie_roku+0x96>
			}
			else if(*migniecie<=9)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b09      	cmp	r3, #9
 8002164:	d810      	bhi.n	8002188 <edytowanie_roku+0x7c>
			{
				sprintf(buf,"%02d.%02d.    ",date->Date,date->Month);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	785b      	ldrb	r3, [r3, #1]
 8002170:	f107 000c 	add.w	r0, r7, #12
 8002174:	4930      	ldr	r1, [pc, #192]	; (8002238 <edytowanie_roku+0x12c>)
 8002176:	f00e f967 	bl	8010448 <siprintf>
				*migniecie+=1;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e00c      	b.n	80021a2 <edytowanie_roku+0x96>
			}else
			{
				sprintf(buf,"%02d.%02d.    ",date->Date,date->Month);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	f107 000c 	add.w	r0, r7, #12
 8002196:	4928      	ldr	r1, [pc, #160]	; (8002238 <edytowanie_roku+0x12c>)
 8002198:	f00e f956 	bl	8010448 <siprintf>
				*migniecie=0;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
			}
				lcd_print(2,1,buf);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	461a      	mov	r2, r3
 80021a8:	2101      	movs	r1, #1
 80021aa:	2002      	movs	r0, #2
 80021ac:	f7ff faee 	bl	800178c <lcd_print>
				HAL_Delay(100);
 80021b0:	2064      	movs	r0, #100	; 0x64
 80021b2:	f008 f97b 	bl	800a4ac <HAL_Delay>

			raw=adc_konwersja(false);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff fb0a 	bl	80017d0 <adc_konwersja>
 80021bc:	4603      	mov	r3, r0
 80021be:	83fb      	strh	r3, [r7, #30]
			if(raw>=p.up-150 && raw<=p.up+150)
 80021c0:	8bfa      	ldrh	r2, [r7, #30]
 80021c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021c4:	3b96      	subs	r3, #150	; 0x96
 80021c6:	429a      	cmp	r2, r3
 80021c8:	db12      	blt.n	80021f0 <edytowanie_roku+0xe4>
 80021ca:	8bfa      	ldrh	r2, [r7, #30]
 80021cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ce:	3396      	adds	r3, #150	; 0x96
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0d      	bgt.n	80021f0 <edytowanie_roku+0xe4>
			{
				  if(date->Year==99)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	78db      	ldrb	r3, [r3, #3]
 80021d8:	2b63      	cmp	r3, #99	; 0x63
 80021da:	d103      	bne.n	80021e4 <edytowanie_roku+0xd8>
				  {
					  date->Year=0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	70da      	strb	r2, [r3, #3]
 80021e2:	e005      	b.n	80021f0 <edytowanie_roku+0xe4>
				  }
				  else
					  date->Year++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	78db      	ldrb	r3, [r3, #3]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	70da      	strb	r2, [r3, #3]
			}
			if(raw>=p.down-150 && raw<=p.down+150)
 80021f0:	8bfa      	ldrh	r2, [r7, #30]
 80021f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021f4:	3b96      	subs	r3, #150	; 0x96
 80021f6:	429a      	cmp	r2, r3
 80021f8:	db12      	blt.n	8002220 <edytowanie_roku+0x114>
 80021fa:	8bfa      	ldrh	r2, [r7, #30]
 80021fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021fe:	3396      	adds	r3, #150	; 0x96
 8002200:	429a      	cmp	r2, r3
 8002202:	dc0d      	bgt.n	8002220 <edytowanie_roku+0x114>
			{
				  if(date->Year==0)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <edytowanie_roku+0x108>
				  {
					  date->Year=99;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2263      	movs	r2, #99	; 0x63
 8002210:	70da      	strb	r2, [r3, #3]
				  else
				  {
					  date->Year--;
				  }
			}
}
 8002212:	e005      	b.n	8002220 <edytowanie_roku+0x114>
					  date->Year--;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	3b01      	subs	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	70da      	strb	r2, [r3, #3]
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800222a:	b002      	add	sp, #8
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	08014d40 	.word	0x08014d40
 8002234:	08014d4c 	.word	0x08014d4c
 8002238:	08014d80 	.word	0x08014d80

0800223c <konfiguracja_daty>:

void konfiguracja_daty(RTC_TimeTypeDef *time,RTC_DateTypeDef *date,struct przyciski p)
{
 800223c:	b082      	sub	sp, #8
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af02      	add	r7, sp, #8
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
 8002248:	f107 0118 	add.w	r1, r7, #24
 800224c:	e881 000c 	stmia.w	r1, {r2, r3}
	lcd_clear();
 8002250:	f7ff fab4 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"Konfiguracja");
 8002254:	4a6f      	ldr	r2, [pc, #444]	; (8002414 <konfiguracja_daty+0x1d8>)
 8002256:	2101      	movs	r1, #1
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fa97 	bl	800178c <lcd_print>
	lcd_print(2,1,"daty i godziny");
 800225e:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <konfiguracja_daty+0x1dc>)
 8002260:	2101      	movs	r1, #1
 8002262:	2002      	movs	r0, #2
 8002264:	f7ff fa92 	bl	800178c <lcd_print>
	HAL_Delay(2000);
 8002268:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800226c:	f008 f91e 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 8002270:	f7ff faa4 	bl	80017bc <lcd_clear>
	uint8_t edycja=0;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
	bool edytowanie_nieukonczone=true;
 8002278:	2301      	movs	r3, #1
 800227a:	73bb      	strb	r3, [r7, #14]
	uint8_t migniecie=0;
 800227c:	2300      	movs	r3, #0
 800227e:	72fb      	strb	r3, [r7, #11]
	uint16_t raw;
	do
	{
		switch(edycja)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d01e      	beq.n	80022c4 <konfiguracja_daty+0x88>
 8002286:	2b02      	cmp	r3, #2
 8002288:	dc28      	bgt.n	80022dc <konfiguracja_daty+0xa0>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <konfiguracja_daty+0x58>
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00c      	beq.n	80022ac <konfiguracja_daty+0x70>
 8002292:	e023      	b.n	80022dc <konfiguracja_daty+0xa0>
		{
			case 0:
				edytowanie_dnia(date, &migniecie, p);
 8002294:	f107 010b 	add.w	r1, r7, #11
 8002298:	8c3b      	ldrh	r3, [r7, #32]
 800229a:	f8ad 3000 	strh.w	r3, [sp]
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	cb0c      	ldmia	r3, {r2, r3}
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	f7ff fe01 	bl	8001eac <edytowanie_dnia>
				break;
 80022aa:	e017      	b.n	80022dc <konfiguracja_daty+0xa0>
			case 1:
				edytowanie_miesiaca(date, &migniecie, p);
 80022ac:	f107 010b 	add.w	r1, r7, #11
 80022b0:	8c3b      	ldrh	r3, [r7, #32]
 80022b2:	f8ad 3000 	strh.w	r3, [sp]
 80022b6:	f107 0318 	add.w	r3, r7, #24
 80022ba:	cb0c      	ldmia	r3, {r2, r3}
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f7ff fe8d 	bl	8001fdc <edytowanie_miesiaca>
				break;
 80022c2:	e00b      	b.n	80022dc <konfiguracja_daty+0xa0>
			case 2:
				edytowanie_roku(date, &migniecie, p);
 80022c4:	f107 010b 	add.w	r1, r7, #11
 80022c8:	8c3b      	ldrh	r3, [r7, #32]
 80022ca:	f8ad 3000 	strh.w	r3, [sp]
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	cb0c      	ldmia	r3, {r2, r3}
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f7ff ff19 	bl	800210c <edytowanie_roku>
				break;
 80022da:	bf00      	nop
		}
		raw=adc_konwersja(false);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fa77 	bl	80017d0 <adc_konwersja>
 80022e2:	4603      	mov	r3, r0
 80022e4:	81bb      	strh	r3, [r7, #12]
		if(raw>=p.left-150 && raw<=p.left+150)
 80022e6:	89ba      	ldrh	r2, [r7, #12]
 80022e8:	8b7b      	ldrh	r3, [r7, #26]
 80022ea:	3b96      	subs	r3, #150	; 0x96
 80022ec:	429a      	cmp	r2, r3
 80022ee:	db0a      	blt.n	8002306 <konfiguracja_daty+0xca>
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	3396      	adds	r3, #150	; 0x96
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dc05      	bgt.n	8002306 <konfiguracja_daty+0xca>
		{
			if(edycja!=0)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <konfiguracja_daty+0xca>
			{
				edycja--;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3b01      	subs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(raw>=p.right && raw<=p.right+150)
 8002306:	8bbb      	ldrh	r3, [r7, #28]
 8002308:	89ba      	ldrh	r2, [r7, #12]
 800230a:	429a      	cmp	r2, r3
 800230c:	d30a      	bcc.n	8002324 <konfiguracja_daty+0xe8>
 800230e:	89ba      	ldrh	r2, [r7, #12]
 8002310:	8bbb      	ldrh	r3, [r7, #28]
 8002312:	3396      	adds	r3, #150	; 0x96
 8002314:	429a      	cmp	r2, r3
 8002316:	dc05      	bgt.n	8002324 <konfiguracja_daty+0xe8>
		{
			if(edycja!=2)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d002      	beq.n	8002324 <konfiguracja_daty+0xe8>
			{
				edycja++;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(raw>=p.select-150 && raw<=p.select+150)
 8002324:	89ba      	ldrh	r2, [r7, #12]
 8002326:	8b3b      	ldrh	r3, [r7, #24]
 8002328:	3b96      	subs	r3, #150	; 0x96
 800232a:	429a      	cmp	r2, r3
 800232c:	db06      	blt.n	800233c <konfiguracja_daty+0x100>
 800232e:	89ba      	ldrh	r2, [r7, #12]
 8002330:	8b3b      	ldrh	r3, [r7, #24]
 8002332:	3396      	adds	r3, #150	; 0x96
 8002334:	429a      	cmp	r2, r3
 8002336:	dc01      	bgt.n	800233c <konfiguracja_daty+0x100>
		{
			edytowanie_nieukonczone=false;
 8002338:	2300      	movs	r3, #0
 800233a:	73bb      	strb	r3, [r7, #14]
		}
	}
	while(edytowanie_nieukonczone);
 800233c:	7bbb      	ldrb	r3, [r7, #14]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d19e      	bne.n	8002280 <konfiguracja_daty+0x44>
	edytowanie_nieukonczone=true;
 8002342:	2301      	movs	r3, #1
 8002344:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(300);
 8002346:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800234a:	f008 f8af 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 800234e:	f7ff fa35 	bl	80017bc <lcd_clear>
	edycja=0;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
	do
	{
		switch(edycja)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <konfiguracja_daty+0x126>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d00c      	beq.n	800237a <konfiguracja_daty+0x13e>
 8002360:	e017      	b.n	8002392 <konfiguracja_daty+0x156>
		{
			case 0:
				edytowanie_godziny(time,&migniecie,p);
 8002362:	f107 010b 	add.w	r1, r7, #11
 8002366:	8c3b      	ldrh	r3, [r7, #32]
 8002368:	f8ad 3000 	strh.w	r3, [sp]
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	cb0c      	ldmia	r3, {r2, r3}
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fc7a 	bl	8001c6c <edytowanie_godziny>
				break;
 8002378:	e00b      	b.n	8002392 <konfiguracja_daty+0x156>
			case 1:
				edytowanie_minuty(time, &migniecie,p);
 800237a:	f107 010b 	add.w	r1, r7, #11
 800237e:	8c3b      	ldrh	r3, [r7, #32]
 8002380:	f8ad 3000 	strh.w	r3, [sp]
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	cb0c      	ldmia	r3, {r2, r3}
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fcfe 	bl	8001d8c <edytowanie_minuty>
				break;
 8002390:	bf00      	nop
		}
		raw=adc_konwersja(false);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fa1c 	bl	80017d0 <adc_konwersja>
 8002398:	4603      	mov	r3, r0
 800239a:	81bb      	strh	r3, [r7, #12]
		if(raw>=p.left-150 && raw<=p.left+150)
 800239c:	89ba      	ldrh	r2, [r7, #12]
 800239e:	8b7b      	ldrh	r3, [r7, #26]
 80023a0:	3b96      	subs	r3, #150	; 0x96
 80023a2:	429a      	cmp	r2, r3
 80023a4:	db06      	blt.n	80023b4 <konfiguracja_daty+0x178>
 80023a6:	89ba      	ldrh	r2, [r7, #12]
 80023a8:	8b7b      	ldrh	r3, [r7, #26]
 80023aa:	3396      	adds	r3, #150	; 0x96
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dc01      	bgt.n	80023b4 <konfiguracja_daty+0x178>
		{
			edycja=0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
		}
		if(raw>=p.right && raw<=p.right+150)
 80023b4:	8bbb      	ldrh	r3, [r7, #28]
 80023b6:	89ba      	ldrh	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d306      	bcc.n	80023ca <konfiguracja_daty+0x18e>
 80023bc:	89ba      	ldrh	r2, [r7, #12]
 80023be:	8bbb      	ldrh	r3, [r7, #28]
 80023c0:	3396      	adds	r3, #150	; 0x96
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dc01      	bgt.n	80023ca <konfiguracja_daty+0x18e>
		{
			edycja=1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
		}
		if(raw>=p.select-150 && raw<=p.select+150)
 80023ca:	89ba      	ldrh	r2, [r7, #12]
 80023cc:	8b3b      	ldrh	r3, [r7, #24]
 80023ce:	3b96      	subs	r3, #150	; 0x96
 80023d0:	429a      	cmp	r2, r3
 80023d2:	db06      	blt.n	80023e2 <konfiguracja_daty+0x1a6>
 80023d4:	89ba      	ldrh	r2, [r7, #12]
 80023d6:	8b3b      	ldrh	r3, [r7, #24]
 80023d8:	3396      	adds	r3, #150	; 0x96
 80023da:	429a      	cmp	r2, r3
 80023dc:	dc01      	bgt.n	80023e2 <konfiguracja_daty+0x1a6>
		{
			edytowanie_nieukonczone=false;
 80023de:	2300      	movs	r3, #0
 80023e0:	73bb      	strb	r3, [r7, #14]
		}
	}
	while(edytowanie_nieukonczone);
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1b6      	bne.n	8002356 <konfiguracja_daty+0x11a>
	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <konfiguracja_daty+0x1e0>)
 80023ee:	f00c fa07 	bl	800e800 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 80023f2:	2200      	movs	r2, #0
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	4809      	ldr	r0, [pc, #36]	; (800241c <konfiguracja_daty+0x1e0>)
 80023f8:	f00c fafb 	bl	800e9f2 <HAL_RTC_SetDate>
	HAL_Delay(150);
 80023fc:	2096      	movs	r0, #150	; 0x96
 80023fe:	f008 f855 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 8002402:	f7ff f9db 	bl	80017bc <lcd_clear>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002410:	b002      	add	sp, #8
 8002412:	4770      	bx	lr
 8002414:	08014d90 	.word	0x08014d90
 8002418:	08014da0 	.word	0x08014da0
 800241c:	20000454 	.word	0x20000454

08002420 <wywolaj_menu>:
void wywolaj_menu(uint8_t *licznik,struct przyciski p)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4638      	mov	r0, r7
 800242a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t j=0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(przerwanie==true)
 8002434:	e0c9      	b.n	80025ca <wywolaj_menu+0x1aa>
	{
		uint32_t raw=adc_konwersja(false);
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff f9ca 	bl	80017d0 <adc_konwersja>
 800243c:	62b8      	str	r0, [r7, #40]	; 0x28
		lcd_print(1,1,"wybierz opcje:");
 800243e:	4a68      	ldr	r2, [pc, #416]	; (80025e0 <wywolaj_menu+0x1c0>)
 8002440:	2101      	movs	r1, #1
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff f9a2 	bl	800178c <lcd_print>
		if (raw>= p.up-150 && raw<=p.up+150)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	3b96      	subs	r3, #150	; 0x96
 800244c:	461a      	mov	r2, r3
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	4293      	cmp	r3, r2
 8002452:	d312      	bcc.n	800247a <wywolaj_menu+0x5a>
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	3396      	adds	r3, #150	; 0x96
 8002458:	461a      	mov	r2, r3
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	4293      	cmp	r3, r2
 800245e:	d80c      	bhi.n	800247a <wywolaj_menu+0x5a>
		{
			if(j==4)
 8002460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002464:	2b04      	cmp	r3, #4
 8002466:	d103      	bne.n	8002470 <wywolaj_menu+0x50>
			{
				j=0;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800246e:	e004      	b.n	800247a <wywolaj_menu+0x5a>
			}
			else
				j++;
 8002470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002474:	3301      	adds	r3, #1
 8002476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  }
		if (raw>= p.down-150 && raw<=p.down+150)
 800247a:	893b      	ldrh	r3, [r7, #8]
 800247c:	3b96      	subs	r3, #150	; 0x96
 800247e:	461a      	mov	r2, r3
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	4293      	cmp	r3, r2
 8002484:	d312      	bcc.n	80024ac <wywolaj_menu+0x8c>
 8002486:	893b      	ldrh	r3, [r7, #8]
 8002488:	3396      	adds	r3, #150	; 0x96
 800248a:	461a      	mov	r2, r3
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	4293      	cmp	r3, r2
 8002490:	d80c      	bhi.n	80024ac <wywolaj_menu+0x8c>
		{
			if(j==0)
 8002492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <wywolaj_menu+0x82>
			{
				j=4;
 800249a:	2304      	movs	r3, #4
 800249c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024a0:	e004      	b.n	80024ac <wywolaj_menu+0x8c>
			}
			else
				j--;
 80024a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		if (raw>= p.select-150 && raw<=p.select+150)
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	3b96      	subs	r3, #150	; 0x96
 80024b0:	461a      	mov	r2, r3
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d354      	bcc.n	8002562 <wywolaj_menu+0x142>
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	3396      	adds	r3, #150	; 0x96
 80024bc:	461a      	mov	r2, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d84e      	bhi.n	8002562 <wywolaj_menu+0x142>
		{
			switch(j)
 80024c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d84a      	bhi.n	8002562 <wywolaj_menu+0x142>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <wywolaj_menu+0xb4>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	0800250f 	.word	0x0800250f
 80024e0:	08002523 	.word	0x08002523
 80024e4:	08002557 	.word	0x08002557
			{
				case 0:
					przerwanie=false;
 80024e8:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <wywolaj_menu+0x1c4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2120      	movs	r1, #32
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f6:	f009 ff6d 	bl	800c3d4 <HAL_GPIO_WritePin>
					break;
 80024fa:	e032      	b.n	8002562 <wywolaj_menu+0x142>
				case 1:
					menu_acykliczne(licznik,p);
 80024fc:	463b      	mov	r3, r7
 80024fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fa9b 	bl	8001a3c <menu_acykliczne>
					HAL_Delay(150);
 8002506:	2096      	movs	r0, #150	; 0x96
 8002508:	f007 ffd0 	bl	800a4ac <HAL_Delay>
					break;
 800250c:	e029      	b.n	8002562 <wywolaj_menu+0x142>
				case 2:
					jednostka_temperatury=zmiana_temp(p);
 800250e:	463b      	mov	r3, r7
 8002510:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002514:	f7ff f990 	bl	8001838 <zmiana_temp>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <wywolaj_menu+0x1c8>)
 800251e:	701a      	strb	r2, [r3, #0]
					break;
 8002520:	e01f      	b.n	8002562 <wywolaj_menu+0x142>
				case 3:
					RTC_TimeTypeDef time;
					RTC_DateTypeDef date;
					HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	2200      	movs	r2, #0
 8002528:	4619      	mov	r1, r3
 800252a:	4830      	ldr	r0, [pc, #192]	; (80025ec <wywolaj_menu+0x1cc>)
 800252c:	f00c fa05 	bl	800e93a <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc,&date, RTC_FORMAT_BIN);
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	2200      	movs	r2, #0
 8002536:	4619      	mov	r1, r3
 8002538:	482c      	ldr	r0, [pc, #176]	; (80025ec <wywolaj_menu+0x1cc>)
 800253a:	f00c fae1 	bl	800eb00 <HAL_RTC_GetDate>
					konfiguracja_daty(&time, &date, p);
 800253e:	f107 0110 	add.w	r1, r7, #16
 8002542:	f107 0014 	add.w	r0, r7, #20
 8002546:	893b      	ldrh	r3, [r7, #8]
 8002548:	f8ad 3000 	strh.w	r3, [sp]
 800254c:	463b      	mov	r3, r7
 800254e:	cb0c      	ldmia	r3, {r2, r3}
 8002550:	f7ff fe74 	bl	800223c <konfiguracja_daty>
					break;
 8002554:	e005      	b.n	8002562 <wywolaj_menu+0x142>
				case 4:
					zmiana_mnoznika(p);
 8002556:	463b      	mov	r3, r7
 8002558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800255c:	f7ff fae2 	bl	8001b24 <zmiana_mnoznika>
					break;
 8002560:	bf00      	nop
			}
		}
		switch(j)
 8002562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002566:	2b04      	cmp	r3, #4
 8002568:	d82a      	bhi.n	80025c0 <wywolaj_menu+0x1a0>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <wywolaj_menu+0x150>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002585 	.word	0x08002585
 8002574:	08002591 	.word	0x08002591
 8002578:	0800259d 	.word	0x0800259d
 800257c:	080025a9 	.word	0x080025a9
 8002580:	080025b5 	.word	0x080025b5
		{
			case 0:
				lcd_print(2,1,"wysw cyklicznie");
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <wywolaj_menu+0x1d0>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f7ff f8ff 	bl	800178c <lcd_print>
			 	break;
 800258e:	e017      	b.n	80025c0 <wywolaj_menu+0x1a0>
			case 1:
				lcd_print(2,1,"wysw acyklicznie");
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <wywolaj_menu+0x1d4>)
 8002592:	2101      	movs	r1, #1
 8002594:	2002      	movs	r0, #2
 8002596:	f7ff f8f9 	bl	800178c <lcd_print>
		  		break;
 800259a:	e011      	b.n	80025c0 <wywolaj_menu+0x1a0>
		  	case 2:
		  		lcd_print(2,1,"jednostka temp");
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <wywolaj_menu+0x1d8>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff f8f3 	bl	800178c <lcd_print>
		  		break;
 80025a6:	e00b      	b.n	80025c0 <wywolaj_menu+0x1a0>
		  	case 3:
		  		lcd_print(2,1,"zmiana daty");
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <wywolaj_menu+0x1dc>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7ff f8ed 	bl	800178c <lcd_print>
		  		break;
 80025b2:	e005      	b.n	80025c0 <wywolaj_menu+0x1a0>
		  	case 4:
		  		lcd_print(2,1,"czas wysw");
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <wywolaj_menu+0x1e0>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7ff f8e7 	bl	800178c <lcd_print>
		  		break;
 80025be:	bf00      	nop
		}
		HAL_Delay(150);
 80025c0:	2096      	movs	r0, #150	; 0x96
 80025c2:	f007 ff73 	bl	800a4ac <HAL_Delay>
		lcd_clear();
 80025c6:	f7ff f8f9 	bl	80017bc <lcd_clear>
	while(przerwanie==true)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <wywolaj_menu+0x1c4>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af31 	bne.w	8002436 <wywolaj_menu+0x16>
	}
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3730      	adds	r7, #48	; 0x30
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	08014db0 	.word	0x08014db0
 80025e4:	20000450 	.word	0x20000450
 80025e8:	20000451 	.word	0x20000451
 80025ec:	20000454 	.word	0x20000454
 80025f0:	08014dc0 	.word	0x08014dc0
 80025f4:	08014dd0 	.word	0x08014dd0
 80025f8:	08014de4 	.word	0x08014de4
 80025fc:	08014df4 	.word	0x08014df4
 8002600:	08014e00 	.word	0x08014e00

08002604 <wcisniety_przycisk>:

uint16_t wcisniety_przycisk()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
	uint16_t raw;
	do
	{
		raw=adc_konwersja(true);
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff f8e0 	bl	80017d0 <adc_konwersja>
 8002610:	4603      	mov	r3, r0
 8002612:	80fb      	strh	r3, [r7, #6]
	}
	while(raw>4090);
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f640 72fa 	movw	r2, #4090	; 0xffa
 800261a:	4293      	cmp	r3, r2
 800261c:	d8f5      	bhi.n	800260a <wcisniety_przycisk+0x6>
	return raw;
 800261e:	88fb      	ldrh	r3, [r7, #6]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <konfiguracja_przyciskow>:




void konfiguracja_przyciskow(struct przyciski *p)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	lcd_print(1,1,"Konfiguracja");
 8002630:	4a57      	ldr	r2, [pc, #348]	; (8002790 <konfiguracja_przyciskow+0x168>)
 8002632:	2101      	movs	r1, #1
 8002634:	2001      	movs	r0, #1
 8002636:	f7ff f8a9 	bl	800178c <lcd_print>
	lcd_print(2,1,"przyciskow");
 800263a:	4a56      	ldr	r2, [pc, #344]	; (8002794 <konfiguracja_przyciskow+0x16c>)
 800263c:	2101      	movs	r1, #1
 800263e:	2002      	movs	r0, #2
 8002640:	f7ff f8a4 	bl	800178c <lcd_print>
	HAL_Delay(2000);
 8002644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002648:	f007 ff30 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 800264c:	f7ff f8b6 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"wcisnij SELECT");
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <konfiguracja_przyciskow+0x170>)
 8002652:	2101      	movs	r1, #1
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff f899 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 800265a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265e:	f007 ff25 	bl	800a4ac <HAL_Delay>
	p->select=wcisniety_przycisk();
 8002662:	f7ff ffcf 	bl	8002604 <wcisniety_przycisk>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	801a      	strh	r2, [r3, #0]
	lcd_clear();
 800266e:	f7ff f8a5 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"SELECT zapisany");
 8002672:	4a4a      	ldr	r2, [pc, #296]	; (800279c <konfiguracja_przyciskow+0x174>)
 8002674:	2101      	movs	r1, #1
 8002676:	2001      	movs	r0, #1
 8002678:	f7ff f888 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 800267c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002680:	f007 ff14 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 8002684:	f7ff f89a 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"wcisnij LEFT");
 8002688:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <konfiguracja_przyciskow+0x178>)
 800268a:	2101      	movs	r1, #1
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff f87d 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 8002692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002696:	f007 ff09 	bl	800a4ac <HAL_Delay>
	p->left=wcisniety_przycisk();
 800269a:	f7ff ffb3 	bl	8002604 <wcisniety_przycisk>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	805a      	strh	r2, [r3, #2]
	lcd_clear();
 80026a6:	f7ff f889 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"LEFT zapisany");
 80026aa:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <konfiguracja_przyciskow+0x17c>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7ff f86c 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 80026b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b8:	f007 fef8 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 80026bc:	f7ff f87e 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"wcisnij RIGHT");
 80026c0:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <konfiguracja_przyciskow+0x180>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff f861 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 80026ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ce:	f007 feed 	bl	800a4ac <HAL_Delay>
	p->right=wcisniety_przycisk();
 80026d2:	f7ff ff97 	bl	8002604 <wcisniety_przycisk>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	809a      	strh	r2, [r3, #4]
	lcd_clear();
 80026de:	f7ff f86d 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"RIGHT zapisany");
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <konfiguracja_przyciskow+0x184>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff f850 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 80026ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f0:	f007 fedc 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 80026f4:	f7ff f862 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"wcisnij UP");
 80026f8:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <konfiguracja_przyciskow+0x188>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff f845 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 8002702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002706:	f007 fed1 	bl	800a4ac <HAL_Delay>
	p->up=wcisniety_przycisk();
 800270a:	f7ff ff7b 	bl	8002604 <wcisniety_przycisk>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	80da      	strh	r2, [r3, #6]
	lcd_clear();
 8002716:	f7ff f851 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"UP zapisany");
 800271a:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <konfiguracja_przyciskow+0x18c>)
 800271c:	2101      	movs	r1, #1
 800271e:	2001      	movs	r0, #1
 8002720:	f7ff f834 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 8002724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002728:	f007 fec0 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 800272c:	f7ff f846 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"wcisnij DOWN");
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <konfiguracja_przyciskow+0x190>)
 8002732:	2101      	movs	r1, #1
 8002734:	2001      	movs	r0, #1
 8002736:	f7ff f829 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 800273a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273e:	f007 feb5 	bl	800a4ac <HAL_Delay>
	p->down=wcisniety_przycisk();
 8002742:	f7ff ff5f 	bl	8002604 <wcisniety_przycisk>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	811a      	strh	r2, [r3, #8]
	lcd_clear();
 800274e:	f7ff f835 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"DOWN zapisany");
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <konfiguracja_przyciskow+0x194>)
 8002754:	2101      	movs	r1, #1
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff f818 	bl	800178c <lcd_print>
	HAL_Delay(1000);
 800275c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002760:	f007 fea4 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 8002764:	f7ff f82a 	bl	80017bc <lcd_clear>
	lcd_print(1,1,"Skonfigurowano");
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <konfiguracja_przyciskow+0x198>)
 800276a:	2101      	movs	r1, #1
 800276c:	2001      	movs	r0, #1
 800276e:	f7ff f80d 	bl	800178c <lcd_print>
	lcd_print(2,1,"przyciski");
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <konfiguracja_przyciskow+0x19c>)
 8002774:	2101      	movs	r1, #1
 8002776:	2002      	movs	r0, #2
 8002778:	f7ff f808 	bl	800178c <lcd_print>
	HAL_Delay(2000);
 800277c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002780:	f007 fe94 	bl	800a4ac <HAL_Delay>
	lcd_clear();
 8002784:	f7ff f81a 	bl	80017bc <lcd_clear>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	08014d90 	.word	0x08014d90
 8002794:	08014e0c 	.word	0x08014e0c
 8002798:	08014e18 	.word	0x08014e18
 800279c:	08014e28 	.word	0x08014e28
 80027a0:	08014e38 	.word	0x08014e38
 80027a4:	08014e48 	.word	0x08014e48
 80027a8:	08014e58 	.word	0x08014e58
 80027ac:	08014e68 	.word	0x08014e68
 80027b0:	08014e78 	.word	0x08014e78
 80027b4:	08014e84 	.word	0x08014e84
 80027b8:	08014e90 	.word	0x08014e90
 80027bc:	08014ea0 	.word	0x08014ea0
 80027c0:	08014eb0 	.word	0x08014eb0
 80027c4:	08014ec0 	.word	0x08014ec0

080027c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b09c      	sub	sp, #112	; 0x70
 80027cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  char kropelka[] = {
 80027ce:	4a68      	ldr	r2, [pc, #416]	; (8002970 <main+0x1a8>)
 80027d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d8:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B11110,
	    0B11111,
	    0B11111,
	    0B01110
	  };
	  char termometr[] = {
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <main+0x1ac>)
 80027de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e6:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B01010,
	    0B10001,
	    0B10001,
	    0B01110
	  };
	  char cisnienie[] = {
 80027ea:	4a63      	ldr	r2, [pc, #396]	; (8002978 <main+0x1b0>)
 80027ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f4:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B01110,
	    0B00100,
	    0B00000,
	    0B11111
	  };
	  char chmura[] = {
 80027f8:	4a60      	ldr	r2, [pc, #384]	; (800297c <main+0x1b4>)
 80027fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002802:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B01110,
	    0B11111,
	    0B11111,
	    0B01110
	  };
	  char sloncechmura[] = {
 8002806:	4a5e      	ldr	r2, [pc, #376]	; (8002980 <main+0x1b8>)
 8002808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002810:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B01010,
	    0B11111,
	    0B11111,
	    0B01110
	  };
	  char slonce[] = {
 8002814:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <main+0x1bc>)
 8002816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800281a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800281e:	e883 0003 	stmia.w	r3, {r0, r1}
	    0B11011,
	    0B01110,
	    0B10101,
	    0B00100
	  };
	  char zegar[] = {
 8002822:	4a59      	ldr	r2, [pc, #356]	; (8002988 <main+0x1c0>)
 8002824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800282c:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002830:	f007 fdc8 	bl	800a3c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002834:	f000 f8ac 	bl	8002990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002838:	f7fe fccc 	bl	80011d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800283c:	f7fe fa5a 	bl	8000cf4 <MX_ADC1_Init>
  MX_RTC_Init();
 8002840:	f000 f918 	bl	8002a74 <MX_RTC_Init>
  MX_MEMS_Init();
 8002844:	f00c fa7a 	bl	800ed3c <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT,_LCD_FONT_5x8, _LCD_2LINE);
 8002848:	2208      	movs	r2, #8
 800284a:	2100      	movs	r1, #0
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe ff26 	bl	800169e <lcd_init>
  lcd_create_custom_char(0, kropelka);
 8002852:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002856:	4619      	mov	r1, r3
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff f9df 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(1, cisnienie);
 800285e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002862:	4619      	mov	r1, r3
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff f9d9 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(2, termometr);
 800286a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800286e:	4619      	mov	r1, r3
 8002870:	2002      	movs	r0, #2
 8002872:	f7ff f9d3 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(3, slonce);
 8002876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287a:	4619      	mov	r1, r3
 800287c:	2003      	movs	r0, #3
 800287e:	f7ff f9cd 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(4, sloncechmura);
 8002882:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002886:	4619      	mov	r1, r3
 8002888:	2004      	movs	r0, #4
 800288a:	f7ff f9c7 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(5, chmura);
 800288e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002892:	4619      	mov	r1, r3
 8002894:	2005      	movs	r0, #5
 8002896:	f7ff f9c1 	bl	8001c1c <lcd_create_custom_char>
  lcd_create_custom_char(6, zegar);
 800289a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289e:	4619      	mov	r1, r3
 80028a0:	2006      	movs	r0, #6
 80028a2:	f7ff f9bb 	bl	8001c1c <lcd_create_custom_char>
  struct przyciski p;
  uint8_t licznik;
  p.select=3694;
 80028a6:	f640 636e 	movw	r3, #3694	; 0xe6e
 80028aa:	83bb      	strh	r3, [r7, #28]
  p.left=2405;
 80028ac:	f640 1365 	movw	r3, #2405	; 0x965
 80028b0:	83fb      	strh	r3, [r7, #30]
  p.right=0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	843b      	strh	r3, [r7, #32]
  p.up=558;
 80028b6:	f240 232e 	movw	r3, #558	; 0x22e
 80028ba:	847b      	strh	r3, [r7, #34]	; 0x22
  p.down=1510;
 80028bc:	f240 53e6 	movw	r3, #1510	; 0x5e6
 80028c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  time.Hours=0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	713b      	strb	r3, [r7, #4]
  time.Minutes=0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	717b      	strb	r3, [r7, #5]
  date.Date=1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	70bb      	strb	r3, [r7, #2]
  date.Month=1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	707b      	strb	r3, [r7, #1]
  date.Year=0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	70fb      	strb	r3, [r7, #3]

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  konfiguracja_przyciskow(&p);
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fea4 	bl	8002628 <konfiguracja_przyciskow>
  konfiguracja_daty(&time,&date,p);
 80028e0:	4639      	mov	r1, r7
 80028e2:	1d38      	adds	r0, r7, #4
 80028e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028e6:	f8ad 3000 	strh.w	r3, [sp]
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	cb0c      	ldmia	r3, {r2, r3}
 80028f0:	f7ff fca4 	bl	800223c <konfiguracja_daty>
  while (1)
  {
    /* USER CODE END WHILE */
		for(licznik=0;licznik<3;licznik++){
 80028f4:	2300      	movs	r3, #0
 80028f6:	76fb      	strb	r3, [r7, #27]
 80028f8:	e01a      	b.n	8002930 <main+0x168>
			for(int i=0;i<mnoznik;i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	667b      	str	r3, [r7, #100]	; 0x64
 80028fe:	e00d      	b.n	800291c <main+0x154>
			{
			wywolaj_menu(&licznik,p);
 8002900:	f107 001b 	add.w	r0, r7, #27
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290a:	f7ff fd89 	bl	8002420 <wywolaj_menu>
			wywolaj_funkcje(licznik);
 800290e:	7efb      	ldrb	r3, [r7, #27]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f867 	bl	80019e4 <wywolaj_funkcje>
			for(int i=0;i<mnoznik;i++)
 8002916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002918:	3301      	adds	r3, #1
 800291a:	667b      	str	r3, [r7, #100]	; 0x64
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <main+0x1c4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002924:	4293      	cmp	r3, r2
 8002926:	dbeb      	blt.n	8002900 <main+0x138>
		for(licznik=0;licznik<3;licznik++){
 8002928:	7efb      	ldrb	r3, [r7, #27]
 800292a:	3301      	adds	r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	7efb      	ldrb	r3, [r7, #27]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d9e1      	bls.n	80028fa <main+0x132>
			}
		}
		licznik=3;
 8002936:	2303      	movs	r3, #3
 8002938:	76fb      	strb	r3, [r7, #27]
		for(int i=-1;i<mnoznik/2;i++)
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	663b      	str	r3, [r7, #96]	; 0x60
 8002940:	e00d      	b.n	800295e <main+0x196>
		{

			wywolaj_menu(&licznik,p);
 8002942:	f107 001b 	add.w	r0, r7, #27
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f7ff fd68 	bl	8002420 <wywolaj_menu>
			wywolaj_funkcje(licznik);
 8002950:	7efb      	ldrb	r3, [r7, #27]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f846 	bl	80019e4 <wywolaj_funkcje>
		for(int i=-1;i<mnoznik/2;i++)
 8002958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800295a:	3301      	adds	r3, #1
 800295c:	663b      	str	r3, [r7, #96]	; 0x60
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <main+0x1c4>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800296a:	4293      	cmp	r3, r2
 800296c:	dbe9      	blt.n	8002942 <main+0x17a>
		for(licznik=0;licznik<3;licznik++){
 800296e:	e7c1      	b.n	80028f4 <main+0x12c>
 8002970:	08014ecc 	.word	0x08014ecc
 8002974:	08014ed4 	.word	0x08014ed4
 8002978:	08014edc 	.word	0x08014edc
 800297c:	08014ee4 	.word	0x08014ee4
 8002980:	08014eec 	.word	0x08014eec
 8002984:	08014ef4 	.word	0x08014ef4
 8002988:	08014efc 	.word	0x08014efc
 800298c:	20000000 	.word	0x20000000

08002990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b096      	sub	sp, #88	; 0x58
 8002994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2244      	movs	r2, #68	; 0x44
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f00d fdb5 	bl	801050e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a4:	463b      	mov	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029b6:	f00a fbc1 	bl	800d13c <HAL_PWREx_ControlVoltageScaling>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029c0:	f000 f852 	bl	8002a68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80029c4:	2318      	movs	r3, #24
 80029c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029cc:	2301      	movs	r3, #1
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029d4:	2360      	movs	r3, #96	; 0x60
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2302      	movs	r3, #2
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80029dc:	2301      	movs	r3, #1
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80029e4:	2328      	movs	r3, #40	; 0x28
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029e8:	2307      	movs	r3, #7
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ec:	2302      	movs	r3, #2
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029f0:	2302      	movs	r3, #2
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4618      	mov	r0, r3
 80029fa:	f00a fbf5 	bl	800d1e8 <HAL_RCC_OscConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002a04:	f000 f830 	bl	8002a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a08:	230f      	movs	r3, #15
 8002a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00a ffbd 	bl	800d9a0 <HAL_RCC_ClockConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002a2c:	f000 f81c 	bl	8002a68 <Error_Handler>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3758      	adds	r7, #88	; 0x58
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==Button_Blue_IT_Pin)
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a48:	d108      	bne.n	8002a5c <HAL_GPIO_EXTI_Callback+0x24>
	{
		przerwanie=true;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2120      	movs	r1, #32
 8002a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a58:	f009 fcbc 	bl	800c3d4 <HAL_GPIO_WritePin>
	}
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000450 	.word	0x20000450

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <Error_Handler+0x8>
	...

08002a74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_RTC_Init+0x48>)
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <MX_RTC_Init+0x4c>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_RTC_Init+0x48>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <MX_RTC_Init+0x48>)
 8002a86:	227f      	movs	r2, #127	; 0x7f
 8002a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_RTC_Init+0x48>)
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <MX_RTC_Init+0x48>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_RTC_Init+0x48>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <MX_RTC_Init+0x48>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_RTC_Init+0x48>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aa8:	4804      	ldr	r0, [pc, #16]	; (8002abc <MX_RTC_Init+0x48>)
 8002aaa:	f00b fe21 	bl	800e6f0 <HAL_RTC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002ab4:	f7ff ffd8 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000454 	.word	0x20000454
 8002ac0:	40002800 	.word	0x40002800

08002ac4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0a4      	sub	sp, #144	; 0x90
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	f107 0308 	add.w	r3, r7, #8
 8002ad0:	2288      	movs	r2, #136	; 0x88
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00d fd1a 	bl	801050e <memset>
  if(rtcHandle->Instance==RTC)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_RTC_MspInit+0x5c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d118      	bne.n	8002b16 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00b f93e 	bl	800dd78 <HAL_RCCEx_PeriphCLKConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002b02:	f7ff ffb1 	bl	8002a68 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <HAL_RTC_MspInit+0x60>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_RTC_MspInit+0x60>)
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002b16:	bf00      	nop
 8002b18:	3790      	adds	r7, #144	; 0x90
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40002800 	.word	0x40002800
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_MspInit+0x44>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_MspInit+0x44>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_MspInit+0x44>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_MspInit+0x44>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_MspInit+0x44>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_MspInit+0x44>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bbc:	f007 fc56 	bl	800a46c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Blue_IT_Pin);
 8002bc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bcc:	f009 fc1a 	bl	800c404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return 1;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_kill>:

int _kill(int pid, int sig)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bee:	f00d fce1 	bl	80105b4 <__errno>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2216      	movs	r2, #22
 8002bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_exit>:

void _exit (int status)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffe7 	bl	8002be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c16:	e7fe      	b.n	8002c16 <_exit+0x12>

08002c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e00a      	b.n	8002c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c2a:	f3af 8000 	nop.w
 8002c2e:	4601      	mov	r1, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	60ba      	str	r2, [r7, #8]
 8002c36:	b2ca      	uxtb	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf0      	blt.n	8002c2a <_read+0x12>
  }

  return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e009      	b.n	8002c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dbf1      	blt.n	8002c64 <_write+0x12>
  }
  return len;
 8002c80:	687b      	ldr	r3, [r7, #4]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_close>:

int _close(int file)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_isatty>:

int _isatty(int file)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <_sbrk+0x5c>)
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <_sbrk+0x60>)
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_sbrk+0x64>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <_sbrk+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d24:	f00d fc46 	bl	80105b4 <__errno>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	e009      	b.n	8002d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <_sbrk+0x64>)
 8002d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20018000 	.word	0x20018000
 8002d54:	00000400 	.word	0x00000400
 8002d58:	20000478 	.word	0x20000478
 8002d5c:	20000950 	.word	0x20000950

08002d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SystemInit+0x20>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <SystemInit+0x20>)
 8002d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d88:	f7ff ffea 	bl	8002d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d8e:	490d      	ldr	r1, [pc, #52]	; (8002dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <LoopForever+0xe>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <LoopForever+0x16>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002db2:	f00d fc05 	bl	80105c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002db6:	f7ff fd07 	bl	80027c8 <main>

08002dba <LoopForever>:

LoopForever:
    b LoopForever
 8002dba:	e7fe      	b.n	8002dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc4:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002dc8:	08015618 	.word	0x08015618
  ldr r2, =_sbss
 8002dcc:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002dd0:	2000094c 	.word	0x2000094c

08002dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC1_2_IRQHandler>
	...

08002dd8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e034      	b.n	8002e5a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	7b1a      	ldrb	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HTS221_RegisterBusIO+0x8c>)
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HTS221_RegisterBusIO+0x90>)
 8002e32:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4798      	blx	r3
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	e002      	b.n	8002e5a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	080034a7 	.word	0x080034a7
 8002e68:	08003509 	.word	0x08003509

08002e6c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d108      	bne.n	8002e90 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 faac 	bl	80033dc <HTS221_Initialize>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e004      	b.n	8002e9a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d111      	bne.n	8002ed8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f880 	bl	8002fba <HTS221_HUM_Disable>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	e00d      	b.n	8002ee2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f967 	bl	800319a <HTS221_TEMP_Disable>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e004      	b.n	8002ee2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3320      	adds	r3, #32
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fc30 	bl	8003760 <hts221_device_id_get>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	e000      	b.n	8002f0e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HTS221_GetCapabilities+0x54>)
 8002f44:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HTS221_GetCapabilities+0x54>)
 8002f4a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	41480000 	.word	0x41480000

08002f70 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e015      	b.n	8002fb2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fbf3 	bl	8003782 <hts221_power_on_set>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e004      	b.n	8002fb2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e015      	b.n	8002ffc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3320      	adds	r3, #32
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fbce 	bl	8003782 <hts221_power_on_set>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff0:	e004      	b.n	8002ffc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f96f 	bl	80032f4 <HTS221_GetOutputDataRate>
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800302c:	ed97 0a00 	vldr	s0, [r7]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f9a3 	bl	800337c <HTS221_SetOutputDataRate>
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3320      	adds	r3, #32
 800304e:	f107 020c 	add.w	r2, r7, #12
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fc58 	bl	800390a <hts221_hum_adc_point_0_get>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	e06b      	b.n	800313e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f103 0220 	add.w	r2, r3, #32
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	3304      	adds	r3, #4
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f000 fbaa 	bl	80037ce <hts221_hum_rh_point_0_get>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e05b      	b.n	800313e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0220 	add.w	r2, r3, #32
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	3308      	adds	r3, #8
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 fc5c 	bl	8003952 <hts221_hum_adc_point_1_get>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	e04b      	b.n	800313e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f103 0220 	add.w	r2, r3, #32
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	330c      	adds	r3, #12
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fba8 	bl	800380a <hts221_hum_rh_point_1_get>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
 80030c4:	e03b      	b.n	800313e <HTS221_HUM_GetHumidity+0xfe>
 80030c6:	2300      	movs	r3, #0
 80030c8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3320      	adds	r3, #32
 80030ce:	f107 021c 	add.w	r2, r7, #28
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fafd 	bl	80036d4 <hts221_humidity_raw_get>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	e02b      	b.n	800313e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80030e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f99a 	bl	8003434 <Linear_Interpolation>
 8003100:	eef0 7a40 	vmov.f32	s15, s0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	d503      	bpl.n	8003122 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003148 <HTS221_HUM_GetHumidity+0x108>
 800312c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	dd02      	ble.n	800313c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HTS221_HUM_GetHumidity+0x10c>)
 800313a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	42c80000 	.word	0x42c80000
 800314c:	42c80000 	.word	0x42c80000

08003150 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e015      	b.n	8003192 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3320      	adds	r3, #32
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fb03 	bl	8003782 <hts221_power_on_set>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e004      	b.n	8003192 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e015      	b.n	80031dc <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3320      	adds	r3, #32
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fade 	bl	8003782 <hts221_power_on_set>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e004      	b.n	80031dc <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f87f 	bl	80032f4 <HTS221_GetOutputDataRate>
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800320c:	ed97 0a00 	vldr	s0, [r7]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8b3 	bl	800337c <HTS221_SetOutputDataRate>
 8003216:	4603      	mov	r3, r0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3320      	adds	r3, #32
 800322e:	f107 020c 	add.w	r2, r7, #12
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fbb0 	bl	800399a <hts221_temp_adc_point_0_get>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e052      	b.n	80032ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f103 0220 	add.w	r2, r3, #32
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f000 faf6 	bl	8003846 <hts221_temp_deg_point_0_get>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	e042      	b.n	80032ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f103 0220 	add.w	r2, r3, #32
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	3308      	adds	r3, #8
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f000 fbb4 	bl	80039e2 <hts221_temp_adc_point_1_get>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	e032      	b.n	80032ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f103 0220 	add.w	r2, r3, #32
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	330c      	adds	r3, #12
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 fb07 	bl	80038a8 <hts221_temp_deg_point_1_get>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	e022      	b.n	80032ec <HTS221_TEMP_GetTemperature+0xcc>
 80032a6:	2300      	movs	r3, #0
 80032a8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3320      	adds	r3, #32
 80032ae:	f107 021c 	add.w	r2, r7, #28
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa30 	bl	800371a <hts221_temperature_raw_get>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e012      	b.n	80032ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80032c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	eeb0 0a67 	vmov.f32	s0, s15
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f8aa 	bl	8003434 <Linear_Interpolation>
 80032e0:	eef0 7a40 	vmov.f32	s15, s0
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3320      	adds	r3, #32
 8003306:	f107 020b 	add.w	r2, r7, #11
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f983 	bl	8003618 <hts221_data_rate_get>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
 800331c:	e025      	b.n	800336a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d81d      	bhi.n	8003360 <HTS221_GetOutputDataRate+0x6c>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HTS221_GetOutputDataRate+0x38>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003347 	.word	0x08003347
 8003334:	08003351 	.word	0x08003351
 8003338:	08003359 	.word	0x08003359
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
      break;
 8003344:	e010      	b.n	8003368 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800334c:	601a      	str	r2, [r3, #0]
      break;
 800334e:	e00b      	b.n	8003368 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HTS221_GetOutputDataRate+0x80>)
 8003354:	601a      	str	r2, [r3, #0]
      break;
 8003356:	e007      	b.n	8003368 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <HTS221_GetOutputDataRate+0x84>)
 800335c:	601a      	str	r2, [r3, #0]
      break;
 800335e:	e003      	b.n	8003368 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	60fb      	str	r3, [r7, #12]
      break;
 8003366:	bf00      	nop
  }

  return ret;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40e00000 	.word	0x40e00000
 8003378:	41480000 	.word	0x41480000

0800337c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003388:	edd7 7a00 	vldr	s15, [r7]
 800338c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d801      	bhi.n	800339e <HTS221_SetOutputDataRate+0x22>
 800339a:	2301      	movs	r3, #1
 800339c:	e00b      	b.n	80033b6 <HTS221_SetOutputDataRate+0x3a>
 800339e:	edd7 7a00 	vldr	s15, [r7]
 80033a2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80033a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	d801      	bhi.n	80033b4 <HTS221_SetOutputDataRate+0x38>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e000      	b.n	80033b6 <HTS221_SetOutputDataRate+0x3a>
 80033b4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80033b6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3320      	adds	r3, #32
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f902 	bl	80035ca <hts221_data_rate_set>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e000      	b.n	80033d4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3320      	adds	r3, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f9c9 	bl	8003782 <hts221_power_on_set>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	e017      	b.n	800342c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3320      	adds	r3, #32
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f940 	bl	8003688 <hts221_block_data_update_set>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	e00b      	b.n	800342c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003414:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ffaf 	bl	800337c <HTS221_SetOutputDataRate>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	e000      	b.n	800342c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	ed93 7a03 	vldr	s14, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edd3 7a01 	vldr	s15, [r3, #4]
 800344c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003450:	edd7 7a00 	vldr	s15, [r7]
 8003454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	edd3 6a02 	vldr	s13, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	edd3 7a01 	vldr	s15, [r3, #4]
 8003464:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	ed93 6a00 	vldr	s12, [r3]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a03 	vldr	s15, [r3, #12]
 8003474:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003478:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800347c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	edd3 6a02 	vldr	s13, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003490:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003494:	eef0 7a66 	vmov.f32	s15, s13
}
 8003498:	eeb0 0a67 	vmov.f32	s0, s15
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	461a      	mov	r2, r3
 80034b2:	460b      	mov	r3, r1
 80034b4:	72fb      	strb	r3, [r7, #11]
 80034b6:	4613      	mov	r3, r2
 80034b8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	695c      	ldr	r4, [r3, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	7b1b      	ldrb	r3, [r3, #12]
 80034ce:	b298      	uxth	r0, r3
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	b299      	uxth	r1, r3
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	47a0      	blx	r4
 80034e0:	4603      	mov	r3, r0
 80034e2:	e00d      	b.n	8003500 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	695c      	ldr	r4, [r3, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	7b1b      	ldrb	r3, [r3, #12]
 80034ec:	b298      	uxth	r0, r3
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	b299      	uxth	r1, r3
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	47a0      	blx	r4
 80034fe:	4603      	mov	r3, r0
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}

08003508 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	461a      	mov	r2, r3
 8003514:	460b      	mov	r3, r1
 8003516:	72fb      	strb	r3, [r7, #11]
 8003518:	4613      	mov	r3, r2
 800351a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10e      	bne.n	8003546 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	691c      	ldr	r4, [r3, #16]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	7b1b      	ldrb	r3, [r3, #12]
 8003530:	b298      	uxth	r0, r3
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003538:	b2db      	uxtb	r3, r3
 800353a:	b299      	uxth	r1, r3
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	47a0      	blx	r4
 8003542:	4603      	mov	r3, r0
 8003544:	e00d      	b.n	8003562 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	691c      	ldr	r4, [r3, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	7b1b      	ldrb	r3, [r3, #12]
 800354e:	b298      	uxth	r0, r3
 8003550:	7afb      	ldrb	r3, [r7, #11]
 8003552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003556:	b2db      	uxtb	r3, r3
 8003558:	b299      	uxth	r1, r3
 800355a:	893b      	ldrh	r3, [r7, #8]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	47a0      	blx	r4
 8003560:	4603      	mov	r3, r0
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd90      	pop	{r4, r7, pc}

0800356a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800356a:	b590      	push	{r4, r7, lr}
 800356c:	b087      	sub	sp, #28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	461a      	mov	r2, r3
 8003576:	460b      	mov	r3, r1
 8003578:	72fb      	strb	r3, [r7, #11]
 800357a:	4613      	mov	r3, r2
 800357c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685c      	ldr	r4, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68d8      	ldr	r0, [r3, #12]
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	7af9      	ldrb	r1, [r7, #11]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	47a0      	blx	r4
 800358e:	6178      	str	r0, [r7, #20]

  return ret;
 8003590:	697b      	ldr	r3, [r7, #20]
}
 8003592:	4618      	mov	r0, r3
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd90      	pop	{r4, r7, pc}

0800359a <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800359a:	b590      	push	{r4, r7, lr}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	461a      	mov	r2, r3
 80035a6:	460b      	mov	r3, r1
 80035a8:	72fb      	strb	r3, [r7, #11]
 80035aa:	4613      	mov	r3, r2
 80035ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681c      	ldr	r4, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68d8      	ldr	r0, [r3, #12]
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	7af9      	ldrb	r1, [r7, #11]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	47a0      	blx	r4
 80035be:	6178      	str	r0, [r7, #20]

  return ret;
 80035c0:	697b      	ldr	r3, [r7, #20]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}

080035ca <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035d6:	f107 0208 	add.w	r2, r7, #8
 80035da:	2301      	movs	r3, #1
 80035dc:	2120      	movs	r1, #32
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffc3 	bl	800356a <hts221_read_reg>
 80035e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10f      	bne.n	800360c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	7a3b      	ldrb	r3, [r7, #8]
 80035f6:	f362 0301 	bfi	r3, r2, #0, #2
 80035fa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035fc:	f107 0208 	add.w	r2, r7, #8
 8003600:	2301      	movs	r3, #1
 8003602:	2120      	movs	r1, #32
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffc8 	bl	800359a <hts221_write_reg>
 800360a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003622:	f107 0208 	add.w	r2, r7, #8
 8003626:	2301      	movs	r3, #1
 8003628:	2120      	movs	r1, #32
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff9d 	bl	800356a <hts221_read_reg>
 8003630:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003632:	7a3b      	ldrb	r3, [r7, #8]
 8003634:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b03      	cmp	r3, #3
 800363c:	d81a      	bhi.n	8003674 <hts221_data_rate_get+0x5c>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <hts221_data_rate_get+0x2c>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003655 	.word	0x08003655
 8003648:	0800365d 	.word	0x0800365d
 800364c:	08003665 	.word	0x08003665
 8003650:	0800366d 	.word	0x0800366d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
      break;
 800365a:	e00f      	b.n	800367c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e00b      	b.n	800367c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e007      	b.n	800367c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2203      	movs	r2, #3
 8003670:	701a      	strb	r2, [r3, #0]
      break;
 8003672:	e003      	b.n	800367c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2204      	movs	r2, #4
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	bf00      	nop
  }

  return ret;
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop

08003688 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003694:	f107 0208 	add.w	r2, r7, #8
 8003698:	2301      	movs	r3, #1
 800369a:	2120      	movs	r1, #32
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff64 	bl	800356a <hts221_read_reg>
 80036a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	7a3b      	ldrb	r3, [r7, #8]
 80036b4:	f362 0382 	bfi	r3, r2, #2, #1
 80036b8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036ba:	f107 0208 	add.w	r2, r7, #8
 80036be:	2301      	movs	r3, #1
 80036c0:	2120      	movs	r1, #32
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff69 	bl	800359a <hts221_write_reg>
 80036c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80036de:	f107 0208 	add.w	r2, r7, #8
 80036e2:	2302      	movs	r3, #2
 80036e4:	2128      	movs	r1, #40	; 0x28
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff3f 	bl	800356a <hts221_read_reg>
 80036ec:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80036ee:	7a7b      	ldrb	r3, [r7, #9]
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	b29a      	uxth	r2, r3
 8003702:	7a3b      	ldrb	r3, [r7, #8]
 8003704:	b29b      	uxth	r3, r3
 8003706:	4413      	add	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	b21a      	sxth	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003724:	f107 0208 	add.w	r2, r7, #8
 8003728:	2302      	movs	r3, #2
 800372a:	212a      	movs	r1, #42	; 0x2a
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff1c 	bl	800356a <hts221_read_reg>
 8003732:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	b21a      	sxth	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003742:	b29b      	uxth	r3, r3
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b29a      	uxth	r2, r3
 8003748:	7a3b      	ldrb	r3, [r7, #8]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4413      	add	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	b21a      	sxth	r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	801a      	strh	r2, [r3, #0]

  return ret;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800376a:	2301      	movs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	210f      	movs	r1, #15
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fefa 	bl	800356a <hts221_read_reg>
 8003776:	60f8      	str	r0, [r7, #12]

  return ret;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2120      	movs	r1, #32
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fee7 	bl	800356a <hts221_read_reg>
 800379c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	7a3b      	ldrb	r3, [r7, #8]
 80037ae:	f362 13c7 	bfi	r3, r2, #7, #1
 80037b2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80037b4:	f107 0208 	add.w	r2, r7, #8
 80037b8:	2301      	movs	r3, #1
 80037ba:	2120      	movs	r1, #32
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff feec 	bl	800359a <hts221_write_reg>
 80037c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80037d8:	f107 020b 	add.w	r2, r7, #11
 80037dc:	2301      	movs	r3, #1
 80037de:	2130      	movs	r1, #48	; 0x30
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fec2 	bl	800356a <hts221_read_reg>
 80037e6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003814:	f107 020b 	add.w	r2, r7, #11
 8003818:	2301      	movs	r3, #1
 800381a:	2131      	movs	r1, #49	; 0x31
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fea4 	bl	800356a <hts221_read_reg>
 8003822:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003850:	f107 020f 	add.w	r2, r7, #15
 8003854:	2301      	movs	r3, #1
 8003856:	2132      	movs	r1, #50	; 0x32
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fe86 	bl	800356a <hts221_read_reg>
 800385e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11b      	bne.n	800389e <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003866:	f107 0210 	add.w	r2, r7, #16
 800386a:	2301      	movs	r3, #1
 800386c:	2135      	movs	r1, #53	; 0x35
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fe7b 	bl	800356a <hts221_read_reg>
 8003874:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003876:	7c3b      	ldrb	r3, [r7, #16]
 8003878:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800387c:	b2db      	uxtb	r3, r3
 800387e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	4413      	add	r3, r2
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003890:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800389e:	697b      	ldr	r3, [r7, #20]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80038b2:	f107 020f 	add.w	r2, r7, #15
 80038b6:	2301      	movs	r3, #1
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fe55 	bl	800356a <hts221_read_reg>
 80038c0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11b      	bne.n	8003900 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80038c8:	f107 0210 	add.w	r2, r7, #16
 80038cc:	2301      	movs	r3, #1
 80038ce:	2135      	movs	r1, #53	; 0x35
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe4a 	bl	800356a <hts221_read_reg>
 80038d6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80038d8:	7c3b      	ldrb	r3, [r7, #16]
 80038da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	4413      	add	r3, r2
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80038f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003900:	697b      	ldr	r3, [r7, #20]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003914:	f107 0208 	add.w	r2, r7, #8
 8003918:	2302      	movs	r3, #2
 800391a:	2136      	movs	r1, #54	; 0x36
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fe24 	bl	800356a <hts221_read_reg>
 8003922:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003924:	7a7b      	ldrb	r3, [r7, #9]
 8003926:	b29b      	uxth	r3, r3
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b29a      	uxth	r2, r3
 800392c:	7a3b      	ldrb	r3, [r7, #8]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4413      	add	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003936:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003948:	68fb      	ldr	r3, [r7, #12]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800395c:	f107 0208 	add.w	r2, r7, #8
 8003960:	2302      	movs	r3, #2
 8003962:	213a      	movs	r1, #58	; 0x3a
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe00 	bl	800356a <hts221_read_reg>
 800396a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800396c:	7a7b      	ldrb	r3, [r7, #9]
 800396e:	b29b      	uxth	r3, r3
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	b29a      	uxth	r2, r3
 8003974:	7a3b      	ldrb	r3, [r7, #8]
 8003976:	b29b      	uxth	r3, r3
 8003978:	4413      	add	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800397e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003990:	68fb      	ldr	r3, [r7, #12]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80039a4:	f107 0208 	add.w	r2, r7, #8
 80039a8:	2302      	movs	r3, #2
 80039aa:	213c      	movs	r1, #60	; 0x3c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fddc 	bl	800356a <hts221_read_reg>
 80039b2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80039b4:	7a7b      	ldrb	r3, [r7, #9]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	7a3b      	ldrb	r3, [r7, #8]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80039c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80039ec:	f107 0208 	add.w	r2, r7, #8
 80039f0:	2302      	movs	r3, #2
 80039f2:	213e      	movs	r1, #62	; 0x3e
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fdb8 	bl	800356a <hts221_read_reg>
 80039fa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80039fc:	7a7b      	ldrb	r3, [r7, #9]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	7a3b      	ldrb	r3, [r7, #8]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003a0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e051      	b.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	7b1a      	ldrb	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <LIS2DW12_RegisterBusIO+0xcc>)
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <LIS2DW12_RegisterBusIO+0xd0>)
 8003a8a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e020      	b.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4798      	blx	r3
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e016      	b.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d112      	bne.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2121      	movs	r1, #33	; 0x21
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fcc1 	bl	8004462 <LIS2DW12_Write_Reg>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	080047f5 	.word	0x080047f5
 8003afc:	0800482b 	.word	0x0800482b

08003b00 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3320      	adds	r3, #32
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f9ce 	bl	8004eb0 <lis2dw12_auto_increment_set>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e04b      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3320      	adds	r3, #32
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f8e2 	bl	8004cf0 <lis2dw12_block_data_update_set>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e03f      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3320      	adds	r3, #32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 f9dc 	bl	8004efc <lis2dw12_fifo_mode_set>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	e033      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3320      	adds	r3, #32
 8003b54:	2104      	movs	r1, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 feb2 	bl	80048c0 <lis2dw12_power_mode_set>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e027      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <LIS2DW12_Init+0xc0>)
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3320      	adds	r3, #32
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 ffa3 	bl	8004ad0 <lis2dw12_data_rate_set>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	e010      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3320      	adds	r3, #32
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f8cd 	bl	8004d3c <lis2dw12_full_scale_set>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e004      	b.n	8003bb8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	42c80000 	.word	0x42c80000

08003bc4 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f888 	bl	8003ce2 <LIS2DW12_ACC_Disable>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	e010      	b.n	8003c00 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3320      	adds	r3, #32
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 f938 	bl	8004e8e <lis2dw12_device_id_get>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e000      	b.n	8003c2c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4a06      	ldr	r2, [pc, #24]	; (8003c8c <LIS2DW12_GetCapabilities+0x58>)
 8003c74:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	44c80000 	.word	0x44c80000

08003c90 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e019      	b.n	8003cda <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb8:	461a      	mov	r2, r3
 8003cba:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbea 	bl	8004498 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	e004      	b.n	8003cda <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e010      	b.n	8003d1a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3320      	adds	r3, #32
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fee6 	bl	8004ad0 <lis2dw12_data_rate_set>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e004      	b.n	8003d1a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3320      	adds	r3, #32
 8003d36:	f107 020b 	add.w	r2, r7, #11
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f823 	bl	8004d88 <lis2dw12_full_scale_get>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	e080      	b.n	8003e50 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3320      	adds	r3, #32
 8003d52:	f107 020a 	add.w	r2, r7, #10
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fdff 	bl	800495c <lis2dw12_power_mode_get>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	e072      	b.n	8003e50 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003d6a:	7abb      	ldrb	r3, [r7, #10]
 8003d6c:	2b1b      	cmp	r3, #27
 8003d6e:	bf8c      	ite	hi
 8003d70:	2201      	movhi	r2, #1
 8003d72:	2200      	movls	r2, #0
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d162      	bne.n	8003e40 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8003d82:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d12f      	bne.n	8003df4 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003d94:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d04c      	beq.n	8003e40 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d81b      	bhi.n	8003de4 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dcd 	.word	0x08003dcd
 8003dbc:	08003dd5 	.word	0x08003dd5
 8003dc0:	08003ddd 	.word	0x08003ddd
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003dc8:	601a      	str	r2, [r3, #0]
          break;
 8003dca:	e012      	b.n	8003df2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003dd0:	601a      	str	r2, [r3, #0]
          break;
 8003dd2:	e00e      	b.n	8003df2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003dd8:	601a      	str	r2, [r3, #0]
          break;
 8003dda:	e00a      	b.n	8003df2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003de0:	601a      	str	r2, [r3, #0]
          break;
 8003de2:	e006      	b.n	8003df2 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003de8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	60fb      	str	r3, [r7, #12]
          break;
 8003df0:	bf00      	nop
      }
      break;
 8003df2:	e02c      	b.n	8003e4e <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d81a      	bhi.n	8003e30 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e21 	.word	0x08003e21
 8003e0c:	08003e29 	.word	0x08003e29
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003e14:	601a      	str	r2, [r3, #0]
          break;
 8003e16:	e012      	b.n	8003e3e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003e1c:	601a      	str	r2, [r3, #0]
          break;
 8003e1e:	e00e      	b.n	8003e3e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003e24:	601a      	str	r2, [r3, #0]
          break;
 8003e26:	e00a      	b.n	8003e3e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003e2c:	601a      	str	r2, [r3, #0]
          break;
 8003e2e:	e006      	b.n	8003e3e <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e34:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	60fb      	str	r3, [r7, #12]
          break;
 8003e3c:	bf00      	nop
      }
      break;
 8003e3e:	e006      	b.n	8003e4e <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e44:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	60fb      	str	r3, [r7, #12]
      break;
 8003e4c:	bf00      	nop
  }

  return ret;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	3f79db23 	.word	0x3f79db23
 8003e5c:	3ff9db23 	.word	0x3ff9db23
 8003e60:	4079db23 	.word	0x4079db23
 8003e64:	40f9db23 	.word	0x40f9db23
 8003e68:	bf800000 	.word	0xbf800000
 8003e6c:	3e79db23 	.word	0x3e79db23
 8003e70:	3ef9db23 	.word	0x3ef9db23

08003e74 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3320      	adds	r3, #32
 8003e86:	f107 020b 	add.w	r2, r7, #11
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe65 	bl	8004b5c <lis2dw12_data_rate_get>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e14f      	b.n	800413e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3320      	adds	r3, #32
 8003ea2:	f107 020a 	add.w	r2, r7, #10
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd57 	bl	800495c <lis2dw12_power_mode_get>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e141      	b.n	800413e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	2b32      	cmp	r3, #50	; 0x32
 8003ebe:	f200 8136 	bhi.w	800412e <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003f95 	.word	0x08003f95
 8003ecc:	08003f9f 	.word	0x08003f9f
 8003ed0:	08003ff9 	.word	0x08003ff9
 8003ed4:	08004001 	.word	0x08004001
 8003ed8:	08004009 	.word	0x08004009
 8003edc:	08004011 	.word	0x08004011
 8003ee0:	08004019 	.word	0x08004019
 8003ee4:	08004021 	.word	0x08004021
 8003ee8:	0800407b 	.word	0x0800407b
 8003eec:	080040d5 	.word	0x080040d5
 8003ef0:	0800412f 	.word	0x0800412f
 8003ef4:	0800412f 	.word	0x0800412f
 8003ef8:	0800412f 	.word	0x0800412f
 8003efc:	0800412f 	.word	0x0800412f
 8003f00:	0800412f 	.word	0x0800412f
 8003f04:	0800412f 	.word	0x0800412f
 8003f08:	0800412f 	.word	0x0800412f
 8003f0c:	0800412f 	.word	0x0800412f
 8003f10:	08003f95 	.word	0x08003f95
 8003f14:	0800412f 	.word	0x0800412f
 8003f18:	0800412f 	.word	0x0800412f
 8003f1c:	0800412f 	.word	0x0800412f
 8003f20:	0800412f 	.word	0x0800412f
 8003f24:	0800412f 	.word	0x0800412f
 8003f28:	0800412f 	.word	0x0800412f
 8003f2c:	0800412f 	.word	0x0800412f
 8003f30:	0800412f 	.word	0x0800412f
 8003f34:	0800412f 	.word	0x0800412f
 8003f38:	0800412f 	.word	0x0800412f
 8003f3c:	0800412f 	.word	0x0800412f
 8003f40:	0800412f 	.word	0x0800412f
 8003f44:	0800412f 	.word	0x0800412f
 8003f48:	0800412f 	.word	0x0800412f
 8003f4c:	0800412f 	.word	0x0800412f
 8003f50:	0800412f 	.word	0x0800412f
 8003f54:	0800412f 	.word	0x0800412f
 8003f58:	0800412f 	.word	0x0800412f
 8003f5c:	0800412f 	.word	0x0800412f
 8003f60:	0800412f 	.word	0x0800412f
 8003f64:	0800412f 	.word	0x0800412f
 8003f68:	0800412f 	.word	0x0800412f
 8003f6c:	0800412f 	.word	0x0800412f
 8003f70:	0800412f 	.word	0x0800412f
 8003f74:	0800412f 	.word	0x0800412f
 8003f78:	0800412f 	.word	0x0800412f
 8003f7c:	0800412f 	.word	0x0800412f
 8003f80:	0800412f 	.word	0x0800412f
 8003f84:	0800412f 	.word	0x0800412f
 8003f88:	0800412f 	.word	0x0800412f
 8003f8c:	0800412f 	.word	0x0800412f
 8003f90:	08003f95 	.word	0x08003f95
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
      break;
 8003f9c:	e0ce      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003f9e:	7abb      	ldrb	r3, [r7, #10]
 8003fa0:	2b1b      	cmp	r3, #27
 8003fa2:	bf8c      	ite	hi
 8003fa4:	2201      	movhi	r2, #1
 8003fa6:	2200      	movls	r2, #0
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	d11c      	bne.n	8003fe8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	bf14      	ite	ne
 8003fbc:	2201      	movne	r2, #1
 8003fbe:	2200      	moveq	r2, #0
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d10c      	bne.n	8003fe0 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003fc6:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4a5b      	ldr	r2, [pc, #364]	; (8004148 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003fdc:	601a      	str	r2, [r3, #0]
          break;
 8003fde:	e00a      	b.n	8003ff6 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4a5a      	ldr	r2, [pc, #360]	; (800414c <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003fe4:	601a      	str	r2, [r3, #0]
          break;
 8003fe6:	e006      	b.n	8003ff6 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4a59      	ldr	r2, [pc, #356]	; (8004150 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003fec:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	60fb      	str	r3, [r7, #12]
          break;
 8003ff4:	bf00      	nop
      }
      break;
 8003ff6:	e0a1      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4a53      	ldr	r2, [pc, #332]	; (8004148 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003ffc:	601a      	str	r2, [r3, #0]
      break;
 8003ffe:	e09d      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4a54      	ldr	r2, [pc, #336]	; (8004154 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8004004:	601a      	str	r2, [r3, #0]
      break;
 8004006:	e099      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4a53      	ldr	r2, [pc, #332]	; (8004158 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 800400c:	601a      	str	r2, [r3, #0]
      break;
 800400e:	e095      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4a52      	ldr	r2, [pc, #328]	; (800415c <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8004014:	601a      	str	r2, [r3, #0]
      break;
 8004016:	e091      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4a51      	ldr	r2, [pc, #324]	; (8004160 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800401c:	601a      	str	r2, [r3, #0]
      break;
 800401e:	e08d      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8004020:	7abb      	ldrb	r3, [r7, #10]
 8004022:	2b1b      	cmp	r3, #27
 8004024:	bf8c      	ite	hi
 8004026:	2201      	movhi	r2, #1
 8004028:	2200      	movls	r2, #0
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	2a00      	cmp	r2, #0
 800402e:	d11c      	bne.n	800406a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800403a:	2a00      	cmp	r2, #0
 800403c:	bf14      	ite	ne
 800403e:	2201      	movne	r2, #1
 8004040:	2200      	moveq	r2, #0
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	2a00      	cmp	r2, #0
 8004046:	d10c      	bne.n	8004062 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8004048:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 800405e:	601a      	str	r2, [r3, #0]
          break;
 8004060:	e00a      	b.n	8004078 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	4a3e      	ldr	r2, [pc, #248]	; (8004160 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004066:	601a      	str	r2, [r3, #0]
          break;
 8004068:	e006      	b.n	8004078 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	4a38      	ldr	r2, [pc, #224]	; (8004150 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800406e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	60fb      	str	r3, [r7, #12]
          break;
 8004076:	bf00      	nop
      }
      break;
 8004078:	e060      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800407a:	7abb      	ldrb	r3, [r7, #10]
 800407c:	2b1b      	cmp	r3, #27
 800407e:	bf8c      	ite	hi
 8004080:	2201      	movhi	r2, #1
 8004082:	2200      	movls	r2, #0
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	2a00      	cmp	r2, #0
 8004088:	d11c      	bne.n	80040c4 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004094:	2a00      	cmp	r2, #0
 8004096:	bf14      	ite	ne
 8004098:	2201      	movne	r2, #1
 800409a:	2200      	moveq	r2, #0
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d10c      	bne.n	80040bc <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80040a2:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80040b8:	601a      	str	r2, [r3, #0]
          break;
 80040ba:	e00a      	b.n	80040d2 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80040c0:	601a      	str	r2, [r3, #0]
          break;
 80040c2:	e006      	b.n	80040d2 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4a22      	ldr	r2, [pc, #136]	; (8004150 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80040c8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	60fb      	str	r3, [r7, #12]
          break;
 80040d0:	bf00      	nop
      }
      break;
 80040d2:	e033      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80040d4:	7abb      	ldrb	r3, [r7, #10]
 80040d6:	2b1b      	cmp	r3, #27
 80040d8:	bf8c      	ite	hi
 80040da:	2201      	movhi	r2, #1
 80040dc:	2200      	movls	r2, #0
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d11c      	bne.n	800411e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2201      	movne	r2, #1
 80040f4:	2200      	moveq	r2, #0
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	d10c      	bne.n	8004116 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80040fc:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4a16      	ldr	r2, [pc, #88]	; (800416c <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8004112:	601a      	str	r2, [r3, #0]
          break;
 8004114:	e00a      	b.n	800412c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4a11      	ldr	r2, [pc, #68]	; (8004160 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800411a:	601a      	str	r2, [r3, #0]
          break;
 800411c:	e006      	b.n	800412c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004122:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	60fb      	str	r3, [r7, #12]
          break;
 800412a:	bf00      	nop
      }
      break;
 800412c:	e006      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	4a07      	ldr	r2, [pc, #28]	; (8004150 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004132:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	60fb      	str	r3, [r7, #12]
      break;
 800413a:	bf00      	nop
  }

  return ret;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	41480000 	.word	0x41480000
 800414c:	3fcccccd 	.word	0x3fcccccd
 8004150:	bf800000 	.word	0xbf800000
 8004154:	41c80000 	.word	0x41c80000
 8004158:	42480000 	.word	0x42480000
 800415c:	42c80000 	.word	0x42c80000
 8004160:	43480000 	.word	0x43480000
 8004164:	43c80000 	.word	0x43c80000
 8004168:	44480000 	.word	0x44480000
 800416c:	44c80000 	.word	0x44c80000

08004170 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800417c:	2200      	movs	r2, #0
 800417e:	2100      	movs	r1, #0
 8004180:	ed97 0a00 	vldr	s0, [r7]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f805 	bl	8004194 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800418a:	4603      	mov	r3, r0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	ed87 0a02 	vstr	s0, [r7, #8]
 80041a0:	460b      	mov	r3, r1
 80041a2:	71fb      	strb	r3, [r7, #7]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d109      	bne.n	80041c6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80041b2:	79ba      	ldrb	r2, [r7, #6]
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	4619      	mov	r1, r3
 80041b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f96b 	bl	8004498 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	e008      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80041c6:	79ba      	ldrb	r2, [r7, #6]
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	4619      	mov	r1, r3
 80041cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fa7d 	bl	80046d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80041d6:	4603      	mov	r3, r0
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3320      	adds	r3, #32
 80041f2:	f107 020b 	add.w	r2, r7, #11
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fdc5 	bl	8004d88 <lis2dw12_full_scale_get>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8004204:	f04f 33ff 	mov.w	r3, #4294967295
 8004208:	e027      	b.n	800425a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d81b      	bhi.n	8004248 <LIS2DW12_ACC_GetFullScale+0x68>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <LIS2DW12_ACC_GetFullScale+0x38>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004229 	.word	0x08004229
 800421c:	08004231 	.word	0x08004231
 8004220:	08004239 	.word	0x08004239
 8004224:	08004241 	.word	0x08004241
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	601a      	str	r2, [r3, #0]
      break;
 800422e:	e013      	b.n	8004258 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2204      	movs	r2, #4
 8004234:	601a      	str	r2, [r3, #0]
      break;
 8004236:	e00f      	b.n	8004258 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	601a      	str	r2, [r3, #0]
      break;
 800423e:	e00b      	b.n	8004258 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	601a      	str	r2, [r3, #0]
      break;
 8004246:	e007      	b.n	8004258 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	60fb      	str	r3, [r7, #12]
      break;
 8004256:	bf00      	nop
  }

  return ret;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b02      	cmp	r3, #2
 8004272:	dd0b      	ble.n	800428c <LIS2DW12_ACC_SetFullScale+0x28>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b04      	cmp	r3, #4
 8004278:	dd06      	ble.n	8004288 <LIS2DW12_ACC_SetFullScale+0x24>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	dc01      	bgt.n	8004284 <LIS2DW12_ACC_SetFullScale+0x20>
 8004280:	2302      	movs	r3, #2
 8004282:	e004      	b.n	800428e <LIS2DW12_ACC_SetFullScale+0x2a>
 8004284:	2303      	movs	r3, #3
 8004286:	e002      	b.n	800428e <LIS2DW12_ACC_SetFullScale+0x2a>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <LIS2DW12_ACC_SetFullScale+0x2a>
 800428c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800428e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3320      	adds	r3, #32
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd4f 	bl	8004d3c <lis2dw12_full_scale_set>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	e000      	b.n	80042ac <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3320      	adds	r3, #32
 80042c6:	f107 020b 	add.w	r2, r7, #11
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb45 	bl	800495c <lis2dw12_power_mode_get>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e068      	b.n	80043b0 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3320      	adds	r3, #32
 80042e2:	f107 020c 	add.w	r2, r7, #12
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fd85 	bl	8004df8 <lis2dw12_acceleration_raw_get>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295
 80042f8:	e05a      	b.n	80043b0 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	2b1b      	cmp	r3, #27
 80042fe:	bf8c      	ite	hi
 8004300:	2201      	movhi	r2, #1
 8004302:	2200      	movls	r2, #0
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	2a00      	cmp	r2, #0
 8004308:	d14d      	bne.n	80043a6 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800430a:	2201      	movs	r2, #1
 800430c:	409a      	lsls	r2, r3
 800430e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8004312:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d124      	bne.n	800436e <LIS2DW12_ACC_GetAxesRaw+0xba>
 8004324:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d037      	beq.n	80043a6 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8004336:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	da00      	bge.n	8004340 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 800433e:	330f      	adds	r3, #15
 8004340:	111b      	asrs	r3, r3, #4
 8004342:	b21a      	sxth	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da00      	bge.n	8004352 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004350:	330f      	adds	r3, #15
 8004352:	111b      	asrs	r3, r3, #4
 8004354:	b21a      	sxth	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800435a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da00      	bge.n	8004364 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004362:	330f      	adds	r3, #15
 8004364:	111b      	asrs	r3, r3, #4
 8004366:	b21a      	sxth	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	809a      	strh	r2, [r3, #4]
      break;
 800436c:	e01f      	b.n	80043ae <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800436e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	da00      	bge.n	8004378 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8004376:	3303      	adds	r3, #3
 8004378:	109b      	asrs	r3, r3, #2
 800437a:	b21a      	sxth	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da00      	bge.n	800438a <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8004388:	3303      	adds	r3, #3
 800438a:	109b      	asrs	r3, r3, #2
 800438c:	b21a      	sxth	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004392:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da00      	bge.n	800439c <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800439a:	3303      	adds	r3, #3
 800439c:	109b      	asrs	r3, r3, #2
 800439e:	b21a      	sxth	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	809a      	strh	r2, [r3, #4]
      break;
 80043a4:	e003      	b.n	80043ae <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	617b      	str	r3, [r7, #20]
      break;
 80043ac:	bf00      	nop
  }

  return ret;
 80043ae:	697b      	ldr	r3, [r7, #20]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff70 	bl	80042b4 <LIS2DW12_ACC_GetAxesRaw>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e03c      	b.n	800445a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fc9c 	bl	8003d24 <LIS2DW12_ACC_GetSensitivity>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	e030      	b.n	800445a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80043f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004404:	edd7 7a03 	vldr	s15, [r7, #12]
 8004408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004410:	ee17 2a90 	vmov	r2, s15
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004424:	edd7 7a03 	vldr	s15, [r7, #12]
 8004428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004430:	ee17 2a90 	vmov	r2, s15
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004438:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004444:	edd7 7a03 	vldr	s15, [r7, #12]
 8004448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004450:	ee17 2a90 	vmov	r2, s15
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
 800446e:	4613      	mov	r3, r2
 8004470:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f103 0020 	add.w	r0, r3, #32
 8004478:	1cba      	adds	r2, r7, #2
 800447a:	78f9      	ldrb	r1, [r7, #3]
 800447c:	2301      	movs	r3, #1
 800447e:	f000 fa07 	bl	8004890 <lis2dw12_write_reg>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e000      	b.n	8004490 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80044a4:	460b      	mov	r3, r1
 80044a6:	71fb      	strb	r3, [r7, #7]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d80b      	bhi.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044f9 	.word	0x080044f9
 80044c0:	08004525 	.word	0x08004525
 80044c4:	08004551 	.word	0x08004551
 80044c8:	0800457d 	.word	0x0800457d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80044cc:	79bb      	ldrb	r3, [r7, #6]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d002      	beq.n	80044d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80044d2:	2304      	movs	r3, #4
 80044d4:	75fb      	strb	r3, [r7, #23]
          break;
 80044d6:	e002      	b.n	80044de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80044d8:	2314      	movs	r3, #20
 80044da:	75fb      	strb	r3, [r7, #23]
          break;
 80044dc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80044de:	edd7 7a02 	vldr	s15, [r7, #8]
 80044e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	d400      	bmi.n	80044f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80044f0:	e05a      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80044f2:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80044f4:	60bb      	str	r3, [r7, #8]
      break;
 80044f6:	e057      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80044f8:	79bb      	ldrb	r3, [r7, #6]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d002      	beq.n	8004504 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80044fe:	2303      	movs	r3, #3
 8004500:	75fb      	strb	r3, [r7, #23]
          break;
 8004502:	e002      	b.n	800450a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004504:	2313      	movs	r3, #19
 8004506:	75fb      	strb	r3, [r7, #23]
          break;
 8004508:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800450a:	edd7 7a02 	vldr	s15, [r7, #8]
 800450e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	dc00      	bgt.n	800451e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 800451c:	e044      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800451e:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004520:	60bb      	str	r3, [r7, #8]
      break;
 8004522:	e041      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004524:	79bb      	ldrb	r3, [r7, #6]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d002      	beq.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800452a:	2302      	movs	r3, #2
 800452c:	75fb      	strb	r3, [r7, #23]
          break;
 800452e:	e002      	b.n	8004536 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004530:	2312      	movs	r3, #18
 8004532:	75fb      	strb	r3, [r7, #23]
          break;
 8004534:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004536:	edd7 7a02 	vldr	s15, [r7, #8]
 800453a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800453e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004546:	dc00      	bgt.n	800454a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004548:	e02e      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800454a:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800454c:	60bb      	str	r3, [r7, #8]
      break;
 800454e:	e02b      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004550:	79bb      	ldrb	r3, [r7, #6]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
          break;
 800455a:	e002      	b.n	8004562 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800455c:	2311      	movs	r3, #17
 800455e:	75fb      	strb	r3, [r7, #23]
          break;
 8004560:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004562:	edd7 7a02 	vldr	s15, [r7, #8]
 8004566:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800456a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	dc00      	bgt.n	8004576 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004574:	e018      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004576:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004578:	60bb      	str	r3, [r7, #8]
      break;
 800457a:	e015      	b.n	80045a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800457c:	79bb      	ldrb	r3, [r7, #6]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d002      	beq.n	8004588 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
          break;
 8004586:	e002      	b.n	800458e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004588:	2310      	movs	r3, #16
 800458a:	75fb      	strb	r3, [r7, #23]
          break;
 800458c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800458e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004592:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	dc00      	bgt.n	80045a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80045a0:	e001      	b.n	80045a6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80045a2:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80045a4:	60bb      	str	r3, [r7, #8]
      break;
 80045a6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80045a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ac:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80046bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80045b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b8:	d801      	bhi.n	80045be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e04d      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80045be:	edd7 7a02 	vldr	s15, [r7, #8]
 80045c2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ce:	d801      	bhi.n	80045d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e042      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80045d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045d8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80045dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	d801      	bhi.n	80045ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80045e6:	2303      	movs	r3, #3
 80045e8:	e037      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80045ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80046c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80045f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fa:	d801      	bhi.n	8004600 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80045fc:	2304      	movs	r3, #4
 80045fe:	e02c      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004600:	edd7 7a02 	vldr	s15, [r7, #8]
 8004604:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80046c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8004608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d801      	bhi.n	8004616 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004612:	2305      	movs	r3, #5
 8004614:	e021      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004616:	edd7 7a02 	vldr	s15, [r7, #8]
 800461a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800461e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	d801      	bhi.n	800462c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004628:	2306      	movs	r3, #6
 800462a:	e016      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800462c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004630:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80046c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463c:	d801      	bhi.n	8004642 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800463e:	2307      	movs	r3, #7
 8004640:	e00b      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004642:	edd7 7a02 	vldr	s15, [r7, #8]
 8004646:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80046cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800464a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	d801      	bhi.n	8004658 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004654:	2308      	movs	r3, #8
 8004656:	e000      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004658:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800465a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3320      	adds	r3, #32
 8004660:	7dba      	ldrb	r2, [r7, #22]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa33 	bl	8004ad0 <lis2dw12_data_rate_set>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	e018      	b.n	80046a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3320      	adds	r3, #32
 800467a:	7dfa      	ldrb	r2, [r7, #23]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f91e 	bl	80048c0 <lis2dw12_power_mode_set>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	e00b      	b.n	80046a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	79fa      	ldrb	r2, [r7, #7]
 800469a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	79ba      	ldrb	r2, [r7, #6]
 80046a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	41480000 	.word	0x41480000
 80046b4:	43480000 	.word	0x43480000
 80046b8:	43480000 	.word	0x43480000
 80046bc:	3fcccccd 	.word	0x3fcccccd
 80046c0:	42480000 	.word	0x42480000
 80046c4:	42c80000 	.word	0x42c80000
 80046c8:	43c80000 	.word	0x43c80000
 80046cc:	44480000 	.word	0x44480000

080046d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046dc:	460b      	mov	r3, r1
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	79fa      	ldrb	r2, [r7, #7]
 80046e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	79ba      	ldrb	r2, [r7, #6]
 80046f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80046f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80046f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80047b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80046fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d801      	bhi.n	800470a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8004708:	e04d      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800470a:	edd7 7a02 	vldr	s15, [r7, #8]
 800470e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471a:	d801      	bhi.n	8004720 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800471e:	e042      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004720:	edd7 7a02 	vldr	s15, [r7, #8]
 8004724:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004730:	d801      	bhi.n	8004736 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004734:	e037      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8004736:	edd7 7a02 	vldr	s15, [r7, #8]
 800473a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80047c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d801      	bhi.n	800474c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800474a:	e02c      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 800474c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004750:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	d801      	bhi.n	8004762 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004760:	e021      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004762:	edd7 7a02 	vldr	s15, [r7, #8]
 8004766:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80047d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800476a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004772:	d801      	bhi.n	8004778 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8004776:	e016      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8004778:	edd7 7a02 	vldr	s15, [r7, #8]
 800477c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80047e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	d801      	bhi.n	800478e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800478c:	e00b      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800478e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004792:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80047e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	d801      	bhi.n	80047a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80047a2:	e000      	b.n	80047a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	3fcccccd 	.word	0x3fcccccd
 80047bc:	3fcccccd 	.word	0x3fcccccd
 80047c0:	41480000 	.word	0x41480000
 80047c4:	41c80000 	.word	0x41c80000
 80047c8:	42480000 	.word	0x42480000
 80047cc:	42480000 	.word	0x42480000
 80047d0:	42c80000 	.word	0x42c80000
 80047d4:	42c80000 	.word	0x42c80000
 80047d8:	43480000 	.word	0x43480000
 80047dc:	43480000 	.word	0x43480000
 80047e0:	43c80000 	.word	0x43c80000
 80047e4:	43c80000 	.word	0x43c80000
 80047e8:	44480000 	.word	0x44480000
 80047ec:	44480000 	.word	0x44480000
 80047f0:	44c80000 	.word	0x44c80000

080047f4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	72fb      	strb	r3, [r7, #11]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	695c      	ldr	r4, [r3, #20]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	7b1b      	ldrb	r3, [r3, #12]
 8004814:	b298      	uxth	r0, r3
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	b299      	uxth	r1, r3
 800481a:	893b      	ldrh	r3, [r7, #8]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	47a0      	blx	r4
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}

0800482a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800482a:	b590      	push	{r4, r7, lr}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	461a      	mov	r2, r3
 8004836:	460b      	mov	r3, r1
 8004838:	72fb      	strb	r3, [r7, #11]
 800483a:	4613      	mov	r3, r2
 800483c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	691c      	ldr	r4, [r3, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	7b1b      	ldrb	r3, [r3, #12]
 800484a:	b298      	uxth	r0, r3
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	b299      	uxth	r1, r3
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	47a0      	blx	r4
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd90      	pop	{r4, r7, pc}

08004860 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	460b      	mov	r3, r1
 800486e:	72fb      	strb	r3, [r7, #11]
 8004870:	4613      	mov	r3, r2
 8004872:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685c      	ldr	r4, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68d8      	ldr	r0, [r3, #12]
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	7af9      	ldrb	r1, [r7, #11]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	47a0      	blx	r4
 8004884:	6178      	str	r0, [r7, #20]

  return ret;
 8004886:	697b      	ldr	r3, [r7, #20]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd90      	pop	{r4, r7, pc}

08004890 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	460b      	mov	r3, r1
 800489e:	72fb      	strb	r3, [r7, #11]
 80048a0:	4613      	mov	r3, r2
 80048a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681c      	ldr	r4, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68d8      	ldr	r0, [r3, #12]
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	7af9      	ldrb	r1, [r7, #11]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	47a0      	blx	r4
 80048b4:	6178      	str	r0, [r7, #20]

  return ret;
 80048b6:	697b      	ldr	r3, [r7, #20]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048cc:	f107 0210 	add.w	r2, r7, #16
 80048d0:	2301      	movs	r3, #1
 80048d2:	2120      	movs	r1, #32
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffc3 	bl	8004860 <lis2dw12_read_reg>
 80048da:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	7c3b      	ldrb	r3, [r7, #16]
 80048ee:	f362 0383 	bfi	r3, r2, #2, #2
 80048f2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	7c3b      	ldrb	r3, [r7, #16]
 80048fe:	f362 0301 	bfi	r3, r2, #0, #2
 8004902:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004904:	f107 0210 	add.w	r2, r7, #16
 8004908:	2301      	movs	r3, #1
 800490a:	2120      	movs	r1, #32
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ffbf 	bl	8004890 <lis2dw12_write_reg>
 8004912:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800491a:	f107 020c 	add.w	r2, r7, #12
 800491e:	2301      	movs	r3, #1
 8004920:	2125      	movs	r1, #37	; 0x25
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ff9c 	bl	8004860 <lis2dw12_read_reg>
 8004928:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	b2da      	uxtb	r2, r3
 800493a:	7b3b      	ldrb	r3, [r7, #12]
 800493c:	f362 0382 	bfi	r3, r2, #2, #1
 8004940:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004942:	f107 020c 	add.w	r2, r7, #12
 8004946:	2301      	movs	r3, #1
 8004948:	2125      	movs	r1, #37	; 0x25
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff ffa0 	bl	8004890 <lis2dw12_write_reg>
 8004950:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004952:	697b      	ldr	r3, [r7, #20]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004966:	f107 0210 	add.w	r2, r7, #16
 800496a:	2301      	movs	r3, #1
 800496c:	2120      	movs	r1, #32
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff76 	bl	8004860 <lis2dw12_read_reg>
 8004974:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 80a3 	bne.w	8004ac4 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800497e:	f107 020c 	add.w	r2, r7, #12
 8004982:	2301      	movs	r3, #1
 8004984:	2125      	movs	r1, #37	; 0x25
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff6a 	bl	8004860 <lis2dw12_read_reg>
 800498c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800498e:	7b3b      	ldrb	r3, [r7, #12]
 8004990:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	011a      	lsls	r2, r3, #4
 8004998:	7c3b      	ldrb	r3, [r7, #16]
 800499a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80049a4:	7c3a      	ldrb	r2, [r7, #16]
 80049a6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80049aa:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80049ac:	4413      	add	r3, r2
 80049ae:	2b1b      	cmp	r3, #27
 80049b0:	f200 8084 	bhi.w	8004abc <lis2dw12_power_mode_get+0x160>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <lis2dw12_power_mode_get+0x60>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	08004a4d 	.word	0x08004a4d
 80049c0:	08004a45 	.word	0x08004a45
 80049c4:	08004a3d 	.word	0x08004a3d
 80049c8:	08004a35 	.word	0x08004a35
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004abd 	.word	0x08004abd
 80049d4:	08004abd 	.word	0x08004abd
 80049d8:	08004abd 	.word	0x08004abd
 80049dc:	08004a6d 	.word	0x08004a6d
 80049e0:	08004a65 	.word	0x08004a65
 80049e4:	08004a5d 	.word	0x08004a5d
 80049e8:	08004a55 	.word	0x08004a55
 80049ec:	08004abd 	.word	0x08004abd
 80049f0:	08004abd 	.word	0x08004abd
 80049f4:	08004abd 	.word	0x08004abd
 80049f8:	08004abd 	.word	0x08004abd
 80049fc:	08004a95 	.word	0x08004a95
 8004a00:	08004a8d 	.word	0x08004a8d
 8004a04:	08004a85 	.word	0x08004a85
 8004a08:	08004a7d 	.word	0x08004a7d
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	08004abd 	.word	0x08004abd
 8004a14:	08004abd 	.word	0x08004abd
 8004a18:	08004abd 	.word	0x08004abd
 8004a1c:	08004ab5 	.word	0x08004ab5
 8004a20:	08004aad 	.word	0x08004aad
 8004a24:	08004aa5 	.word	0x08004aa5
 8004a28:	08004a9d 	.word	0x08004a9d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
        break;
 8004a32:	e047      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	701a      	strb	r2, [r3, #0]
        break;
 8004a3a:	e043      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
        break;
 8004a42:	e03f      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
        break;
 8004a4a:	e03b      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
        break;
 8004a52:	e037      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	220b      	movs	r2, #11
 8004a58:	701a      	strb	r2, [r3, #0]
        break;
 8004a5a:	e033      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	220a      	movs	r2, #10
 8004a60:	701a      	strb	r2, [r3, #0]
        break;
 8004a62:	e02f      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2209      	movs	r2, #9
 8004a68:	701a      	strb	r2, [r3, #0]
        break;
 8004a6a:	e02b      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	701a      	strb	r2, [r3, #0]
        break;
 8004a72:	e027      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2214      	movs	r2, #20
 8004a78:	701a      	strb	r2, [r3, #0]
        break;
 8004a7a:	e023      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2213      	movs	r2, #19
 8004a80:	701a      	strb	r2, [r3, #0]
        break;
 8004a82:	e01f      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2212      	movs	r2, #18
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	e01b      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2211      	movs	r2, #17
 8004a90:	701a      	strb	r2, [r3, #0]
        break;
 8004a92:	e017      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	701a      	strb	r2, [r3, #0]
        break;
 8004a9a:	e013      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	221b      	movs	r2, #27
 8004aa0:	701a      	strb	r2, [r3, #0]
        break;
 8004aa2:	e00f      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	221a      	movs	r2, #26
 8004aa8:	701a      	strb	r2, [r3, #0]
        break;
 8004aaa:	e00b      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2219      	movs	r2, #25
 8004ab0:	701a      	strb	r2, [r3, #0]
        break;
 8004ab2:	e007      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2218      	movs	r2, #24
 8004ab8:	701a      	strb	r2, [r3, #0]
        break;
 8004aba:	e003      	b.n	8004ac4 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	701a      	strb	r2, [r3, #0]
        break;
 8004ac2:	bf00      	nop
    }
  }

  return ret;
 8004ac4:	697b      	ldr	r3, [r7, #20]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop

08004ad0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004adc:	f107 0210 	add.w	r2, r7, #16
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff febb 	bl	8004860 <lis2dw12_read_reg>
 8004aea:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	7c3b      	ldrb	r3, [r7, #16]
 8004afc:	f362 1307 	bfi	r3, r2, #4, #4
 8004b00:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b02:	f107 0210 	add.w	r2, r7, #16
 8004b06:	2301      	movs	r3, #1
 8004b08:	2120      	movs	r1, #32
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fec0 	bl	8004890 <lis2dw12_write_reg>
 8004b10:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b18:	f107 020c 	add.w	r2, r7, #12
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	2122      	movs	r1, #34	; 0x22
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe9d 	bl	8004860 <lis2dw12_read_reg>
 8004b26:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	7b3b      	ldrb	r3, [r7, #12]
 8004b3a:	f362 0301 	bfi	r3, r2, #0, #2
 8004b3e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b40:	f107 020c 	add.w	r2, r7, #12
 8004b44:	2301      	movs	r3, #1
 8004b46:	2122      	movs	r1, #34	; 0x22
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fea1 	bl	8004890 <lis2dw12_write_reg>
 8004b4e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b50:	697b      	ldr	r3, [r7, #20]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b66:	f107 0210 	add.w	r2, r7, #16
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe76 	bl	8004860 <lis2dw12_read_reg>
 8004b74:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f040 80b3 	bne.w	8004ce4 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b7e:	f107 020c 	add.w	r2, r7, #12
 8004b82:	2301      	movs	r3, #1
 8004b84:	2122      	movs	r1, #34	; 0x22
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe6a 	bl	8004860 <lis2dw12_read_reg>
 8004b8c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004b8e:	7b3b      	ldrb	r3, [r7, #12]
 8004b90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	7c3a      	ldrb	r2, [r7, #16]
 8004b9a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	2b32      	cmp	r3, #50	; 0x32
 8004ba4:	f200 809a 	bhi.w	8004cdc <lis2dw12_data_rate_get+0x180>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <lis2dw12_data_rate_get+0x54>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004c7d 	.word	0x08004c7d
 8004bb4:	08004c85 	.word	0x08004c85
 8004bb8:	08004c8d 	.word	0x08004c8d
 8004bbc:	08004c95 	.word	0x08004c95
 8004bc0:	08004c9d 	.word	0x08004c9d
 8004bc4:	08004ca5 	.word	0x08004ca5
 8004bc8:	08004cad 	.word	0x08004cad
 8004bcc:	08004cb5 	.word	0x08004cb5
 8004bd0:	08004cbd 	.word	0x08004cbd
 8004bd4:	08004cc5 	.word	0x08004cc5
 8004bd8:	08004cdd 	.word	0x08004cdd
 8004bdc:	08004cdd 	.word	0x08004cdd
 8004be0:	08004cdd 	.word	0x08004cdd
 8004be4:	08004cdd 	.word	0x08004cdd
 8004be8:	08004cdd 	.word	0x08004cdd
 8004bec:	08004cdd 	.word	0x08004cdd
 8004bf0:	08004cdd 	.word	0x08004cdd
 8004bf4:	08004cdd 	.word	0x08004cdd
 8004bf8:	08004cd5 	.word	0x08004cd5
 8004bfc:	08004cdd 	.word	0x08004cdd
 8004c00:	08004cdd 	.word	0x08004cdd
 8004c04:	08004cdd 	.word	0x08004cdd
 8004c08:	08004cdd 	.word	0x08004cdd
 8004c0c:	08004cdd 	.word	0x08004cdd
 8004c10:	08004cdd 	.word	0x08004cdd
 8004c14:	08004cdd 	.word	0x08004cdd
 8004c18:	08004cdd 	.word	0x08004cdd
 8004c1c:	08004cdd 	.word	0x08004cdd
 8004c20:	08004cdd 	.word	0x08004cdd
 8004c24:	08004cdd 	.word	0x08004cdd
 8004c28:	08004cdd 	.word	0x08004cdd
 8004c2c:	08004cdd 	.word	0x08004cdd
 8004c30:	08004cdd 	.word	0x08004cdd
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004cdd 	.word	0x08004cdd
 8004c40:	08004cdd 	.word	0x08004cdd
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cdd 	.word	0x08004cdd
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004cdd 	.word	0x08004cdd
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	08004cdd 	.word	0x08004cdd
 8004c60:	08004cdd 	.word	0x08004cdd
 8004c64:	08004cdd 	.word	0x08004cdd
 8004c68:	08004cdd 	.word	0x08004cdd
 8004c6c:	08004cdd 	.word	0x08004cdd
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004ccd 	.word	0x08004ccd
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
        break;
 8004c82:	e02f      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
        break;
 8004c8a:	e02b      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	701a      	strb	r2, [r3, #0]
        break;
 8004c92:	e027      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2203      	movs	r2, #3
 8004c98:	701a      	strb	r2, [r3, #0]
        break;
 8004c9a:	e023      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	701a      	strb	r2, [r3, #0]
        break;
 8004ca2:	e01f      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	701a      	strb	r2, [r3, #0]
        break;
 8004caa:	e01b      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2206      	movs	r2, #6
 8004cb0:	701a      	strb	r2, [r3, #0]
        break;
 8004cb2:	e017      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	701a      	strb	r2, [r3, #0]
        break;
 8004cba:	e013      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	701a      	strb	r2, [r3, #0]
        break;
 8004cc2:	e00f      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2209      	movs	r2, #9
 8004cc8:	701a      	strb	r2, [r3, #0]
        break;
 8004cca:	e00b      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2232      	movs	r2, #50	; 0x32
 8004cd0:	701a      	strb	r2, [r3, #0]
        break;
 8004cd2:	e007      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2212      	movs	r2, #18
 8004cd8:	701a      	strb	r2, [r3, #0]
        break;
 8004cda:	e003      	b.n	8004ce4 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
        break;
 8004ce2:	bf00      	nop
    }
  }

  return ret;
 8004ce4:	697b      	ldr	r3, [r7, #20]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop

08004cf0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	2301      	movs	r3, #1
 8004d02:	2121      	movs	r1, #33	; 0x21
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fdab 	bl	8004860 <lis2dw12_read_reg>
 8004d0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	7a3b      	ldrb	r3, [r7, #8]
 8004d1c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d20:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	2301      	movs	r3, #1
 8004d28:	2121      	movs	r1, #33	; 0x21
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fdb0 	bl	8004890 <lis2dw12_write_reg>
 8004d30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d48:	f107 0208 	add.w	r2, r7, #8
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	2125      	movs	r1, #37	; 0x25
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fd85 	bl	8004860 <lis2dw12_read_reg>
 8004d56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	7a3b      	ldrb	r3, [r7, #8]
 8004d68:	f362 1305 	bfi	r3, r2, #4, #2
 8004d6c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	2301      	movs	r3, #1
 8004d74:	2125      	movs	r1, #37	; 0x25
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fd8a 	bl	8004890 <lis2dw12_write_reg>
 8004d7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d92:	f107 0208 	add.w	r2, r7, #8
 8004d96:	2301      	movs	r3, #1
 8004d98:	2125      	movs	r1, #37	; 0x25
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fd60 	bl	8004860 <lis2dw12_read_reg>
 8004da0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004da2:	7a3b      	ldrb	r3, [r7, #8]
 8004da4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81a      	bhi.n	8004de4 <lis2dw12_full_scale_get+0x5c>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <lis2dw12_full_scale_get+0x2c>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004dcd 	.word	0x08004dcd
 8004dbc:	08004dd5 	.word	0x08004dd5
 8004dc0:	08004ddd 	.word	0x08004ddd
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
      break;
 8004dca:	e00f      	b.n	8004dec <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
      break;
 8004dd2:	e00b      	b.n	8004dec <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	701a      	strb	r2, [r3, #0]
      break;
 8004dda:	e007      	b.n	8004dec <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2203      	movs	r2, #3
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e003      	b.n	8004dec <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	bf00      	nop
  }

  return ret;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004e02:	f107 020c 	add.w	r2, r7, #12
 8004e06:	2306      	movs	r3, #6
 8004e08:	2128      	movs	r1, #40	; 0x28
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fd28 	bl	8004860 <lis2dw12_read_reg>
 8004e10:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e12:	7b7b      	ldrb	r3, [r7, #13]
 8004e14:	b21a      	sxth	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	7b3b      	ldrb	r3, [r7, #12]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	b212      	sxth	r2, r2
 8004e3c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	3302      	adds	r3, #2
 8004e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	7bbb      	ldrb	r3, [r7, #14]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	3302      	adds	r3, #2
 8004e58:	b212      	sxth	r2, r2
 8004e5a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e5c:	7c7a      	ldrb	r2, [r7, #17]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	b212      	sxth	r2, r2
 8004e64:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	7c3b      	ldrb	r3, [r7, #16]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	b212      	sxth	r2, r2
 8004e82:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e84:	697b      	ldr	r3, [r7, #20]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004e98:	2301      	movs	r3, #1
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fcde 	bl	8004860 <lis2dw12_read_reg>
 8004ea4:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ebc:	f107 0208 	add.w	r2, r7, #8
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	2121      	movs	r1, #33	; 0x21
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fccb 	bl	8004860 <lis2dw12_read_reg>
 8004eca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	7a3b      	ldrb	r3, [r7, #8]
 8004edc:	f362 0382 	bfi	r3, r2, #2, #1
 8004ee0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ee2:	f107 0208 	add.w	r2, r7, #8
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	2121      	movs	r1, #33	; 0x21
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fcd0 	bl	8004890 <lis2dw12_write_reg>
 8004ef0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f08:	f107 0208 	add.w	r2, r7, #8
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	212e      	movs	r1, #46	; 0x2e
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fca5 	bl	8004860 <lis2dw12_read_reg>
 8004f16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	7a3b      	ldrb	r3, [r7, #8]
 8004f28:	f362 1347 	bfi	r3, r2, #5, #3
 8004f2c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f2e:	f107 0208 	add.w	r2, r7, #8
 8004f32:	2301      	movs	r3, #1
 8004f34:	212e      	movs	r1, #46	; 0x2e
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fcaa 	bl	8004890 <lis2dw12_write_reg>
 8004f3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e067      	b.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7b1a      	ldrb	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a28      	ldr	r2, [pc, #160]	; (8005040 <LIS2MDL_RegisterBusIO+0xf8>)
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <LIS2MDL_RegisterBusIO+0xfc>)
 8004fa6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e036      	b.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4798      	blx	r3
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e02c      	b.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d028      	beq.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d123      	bne.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10d      	bne.n	8005010 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004ff4:	2334      	movs	r3, #52	; 0x34
 8004ff6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2162      	movs	r1, #98	; 0x62
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fb1b 	bl	800563a <LIS2MDL_Write_Reg>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d014      	beq.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800500a:	f04f 33ff 	mov.w	r3, #4294967295
 800500e:	e012      	b.n	8005036 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d101      	bne.n	800501c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	e00c      	b.n	8005036 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3320      	adds	r3, #32
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f000 ff70 	bl	8005f08 <lis2mdl_i2c_interface_set>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	e000      	b.n	8005036 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8005034:	68fb      	ldr	r3, [r7, #12]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	08005691 	.word	0x08005691
 8005044:	08005713 	.word	0x08005713

08005048 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d144      	bne.n	80050e2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8005058:	f107 0208 	add.w	r2, r7, #8
 800505c:	2301      	movs	r3, #1
 800505e:	2162      	movs	r1, #98	; 0x62
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb97 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
 8005070:	e06c      	b.n	800514c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005072:	f107 020c 	add.w	r2, r7, #12
 8005076:	2301      	movs	r3, #1
 8005078:	2160      	movs	r1, #96	; 0x60
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb8a 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e05f      	b.n	800514c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800508c:	7a3b      	ldrb	r3, [r7, #8]
 800508e:	f043 0310 	orr.w	r3, r3, #16
 8005092:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8005094:	7a3b      	ldrb	r3, [r7, #8]
 8005096:	f36f 0341 	bfc	r3, #1, #1
 800509a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800509c:	7b3b      	ldrb	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	f362 0301 	bfi	r3, r2, #0, #2
 80050a4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80050a6:	7b3b      	ldrb	r3, [r7, #12]
 80050a8:	f043 030c 	orr.w	r3, r3, #12
 80050ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80050ae:	f107 0208 	add.w	r2, r7, #8
 80050b2:	2301      	movs	r3, #1
 80050b4:	2162      	movs	r1, #98	; 0x62
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fcab 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295
 80050c6:	e041      	b.n	800514c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050c8:	f107 020c 	add.w	r2, r7, #12
 80050cc:	2301      	movs	r3, #1
 80050ce:	2160      	movs	r1, #96	; 0x60
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fc9e 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d032      	beq.n	8005142 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	e034      	b.n	800514c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3320      	adds	r3, #32
 80050e6:	2101      	movs	r1, #1
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fe65 	bl	8005db8 <lis2mdl_block_data_update_set>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	e028      	b.n	800514c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3320      	adds	r3, #32
 80050fe:	2102      	movs	r1, #2
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fdd4 	bl	8005cae <lis2mdl_operating_mode_set>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	e01c      	b.n	800514c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3320      	adds	r3, #32
 8005116:	2103      	movs	r1, #3
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fdee 	bl	8005cfa <lis2mdl_data_rate_set>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	e010      	b.n	800514c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3320      	adds	r3, #32
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fec3 	bl	8005ebc <lis2mdl_self_test_set>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	e004      	b.n	800514c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8a5 	bl	80052ac <LIS2MDL_MAG_Disable>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	e004      	b.n	8005178 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d10b      	bne.n	80051aa <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8005192:	2301      	movs	r3, #1
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	214f      	movs	r1, #79	; 0x4f
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fafb 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e00c      	b.n	80051c4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3320      	adds	r3, #32
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fe72 	bl	8005e9a <lis2mdl_device_id_get>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	e000      	b.n	80051c4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2232      	movs	r2, #50	; 0x32
 80051fe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	4a04      	ldr	r2, [pc, #16]	; (8005224 <LIS2MDL_GetCapabilities+0x58>)
 8005214:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	42c80000 	.word	0x42c80000

08005228 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e032      	b.n	80052a4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d11d      	bne.n	8005282 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005246:	f107 020c 	add.w	r2, r7, #12
 800524a:	2301      	movs	r3, #1
 800524c:	2160      	movs	r1, #96	; 0x60
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 faa0 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	e021      	b.n	80052a4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005260:	7b3b      	ldrb	r3, [r7, #12]
 8005262:	f36f 0301 	bfc	r3, #0, #2
 8005266:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005268:	f107 020c 	add.w	r2, r7, #12
 800526c:	2301      	movs	r3, #1
 800526e:	2160      	movs	r1, #96	; 0x60
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fbce 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800527c:	f04f 33ff 	mov.w	r3, #4294967295
 8005280:	e010      	b.n	80052a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3320      	adds	r3, #32
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fd10 	bl	8005cae <lis2mdl_operating_mode_set>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e004      	b.n	80052a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e033      	b.n	800532a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d11e      	bne.n	8005308 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052ca:	f107 020c 	add.w	r2, r7, #12
 80052ce:	2301      	movs	r3, #1
 80052d0:	2160      	movs	r1, #96	; 0x60
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa5e 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	e022      	b.n	800532a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80052e4:	7b3b      	ldrb	r3, [r7, #12]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f362 0301 	bfi	r3, r2, #0, #2
 80052ec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052ee:	f107 020c 	add.w	r2, r7, #12
 80052f2:	2301      	movs	r3, #1
 80052f4:	2160      	movs	r1, #96	; 0x60
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fb8b 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005302:	f04f 33ff 	mov.w	r3, #4294967295
 8005306:	e010      	b.n	800532a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3320      	adds	r3, #32
 800530c:	2102      	movs	r1, #2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fccd 	bl	8005cae <lis2mdl_operating_mode_set>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	e004      	b.n	800532a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005342:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3320      	adds	r3, #32
 8005366:	f107 020b 	add.w	r2, r7, #11
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fceb 	bl	8005d48 <lis2mdl_data_rate_get>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e023      	b.n	80053c6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d81b      	bhi.n	80053bc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b5 	.word	0x080053b5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80053a0:	601a      	str	r2, [r3, #0]
      break;
 80053a2:	e00f      	b.n	80053c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80053a8:	601a      	str	r2, [r3, #0]
      break;
 80053aa:	e00b      	b.n	80053c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80053b0:	601a      	str	r2, [r3, #0]
      break;
 80053b2:	e007      	b.n	80053c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80053b8:	601a      	str	r2, [r3, #0]
      break;
 80053ba:	e003      	b.n	80053c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80053bc:	f04f 33ff 	mov.w	r3, #4294967295
 80053c0:	60fb      	str	r3, [r7, #12]
      break;
 80053c2:	bf00      	nop
  }

  return ret;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	41200000 	.word	0x41200000
 80053d4:	41a00000 	.word	0x41a00000
 80053d8:	42480000 	.word	0x42480000
 80053dc:	42c80000 	.word	0x42c80000

080053e0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80053ec:	edd7 7a00 	vldr	s15, [r7]
 80053f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	d801      	bhi.n	8005402 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80053fe:	2300      	movs	r3, #0
 8005400:	e016      	b.n	8005430 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005402:	edd7 7a00 	vldr	s15, [r7]
 8005406:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800540a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	d801      	bhi.n	8005418 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005414:	2301      	movs	r3, #1
 8005416:	e00b      	b.n	8005430 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005418:	edd7 7a00 	vldr	s15, [r7]
 800541c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80054a4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	d801      	bhi.n	800542e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800542a:	2302      	movs	r3, #2
 800542c:	e000      	b.n	8005430 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800542e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005430:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d121      	bne.n	800547e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800543a:	f107 020c 	add.w	r2, r7, #12
 800543e:	2301      	movs	r3, #1
 8005440:	2160      	movs	r1, #96	; 0x60
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9a6 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e022      	b.n	800549a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	b2da      	uxtb	r2, r3
 800545c:	7b3b      	ldrb	r3, [r7, #12]
 800545e:	f362 0383 	bfi	r3, r2, #2, #2
 8005462:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005464:	f107 020c 	add.w	r2, r7, #12
 8005468:	2301      	movs	r3, #1
 800546a:	2160      	movs	r1, #96	; 0x60
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fad0 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00f      	beq.n	8005498 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	e00d      	b.n	800549a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3320      	adds	r3, #32
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fc37 	bl	8005cfa <lis2mdl_data_rate_set>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
 8005496:	e000      	b.n	800549a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	42480000 	.word	0x42480000

080054a8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2232      	movs	r2, #50	; 0x32
 80054b6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3320      	adds	r3, #32
 80054ec:	f107 0208 	add.w	r2, r7, #8
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fc86 	bl	8005e04 <lis2mdl_magnetic_raw_get>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	e00c      	b.n	800551e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005504:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800550c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005514:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d137      	bne.n	80055a8 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005538:	f107 0218 	add.w	r2, r7, #24
 800553c:	2306      	movs	r3, #6
 800553e:	2168      	movs	r1, #104	; 0x68
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f927 	bl	8005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	e06f      	b.n	8005632 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005552:	7e7b      	ldrb	r3, [r7, #25]
 8005554:	b21b      	sxth	r3, r3
 8005556:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005558:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800555c:	b29b      	uxth	r3, r3
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	b29a      	uxth	r2, r3
 8005562:	7e3b      	ldrb	r3, [r7, #24]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4413      	add	r3, r2
 8005568:	b29b      	uxth	r3, r3
 800556a:	b21b      	sxth	r3, r3
 800556c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800556e:	7efb      	ldrb	r3, [r7, #27]
 8005570:	b21b      	sxth	r3, r3
 8005572:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005574:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005578:	b29b      	uxth	r3, r3
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	b29a      	uxth	r2, r3
 800557e:	7ebb      	ldrb	r3, [r7, #26]
 8005580:	b29b      	uxth	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	b21b      	sxth	r3, r3
 8005588:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800558a:	7f7b      	ldrb	r3, [r7, #29]
 800558c:	b21b      	sxth	r3, r3
 800558e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005594:	b29b      	uxth	r3, r3
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	b29a      	uxth	r2, r3
 800559a:	7f3b      	ldrb	r3, [r7, #28]
 800559c:	b29b      	uxth	r3, r3
 800559e:	4413      	add	r3, r2
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	82bb      	strh	r3, [r7, #20]
 80055a6:	e00d      	b.n	80055c4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3320      	adds	r3, #32
 80055ac:	f107 0210 	add.w	r2, r7, #16
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc26 	bl	8005e04 <lis2mdl_magnetic_raw_get>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295
 80055c2:	e036      	b.n	8005632 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80055c4:	f107 030c 	add.w	r3, r7, #12
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff feb1 	bl	8005332 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80055d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80055e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055e8:	ee17 2a90 	vmov	r2, s15
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80055f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005608:	ee17 2a90 	vmov	r2, s15
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800561c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005628:	ee17 2a90 	vmov	r2, s15
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
 8005646:	4613      	mov	r3, r2
 8005648:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d10b      	bne.n	800566a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005652:	1cba      	adds	r2, r7, #2
 8005654:	78f9      	ldrb	r1, [r7, #3]
 8005656:	2301      	movs	r3, #1
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9da 	bl	8005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d010      	beq.n	8005686 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005664:	f04f 33ff 	mov.w	r3, #4294967295
 8005668:	e00e      	b.n	8005688 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f103 0020 	add.w	r0, r3, #32
 8005670:	1cba      	adds	r2, r7, #2
 8005672:	78f9      	ldrb	r1, [r7, #3]
 8005674:	2301      	movs	r3, #1
 8005676:	f000 fb02 	bl	8005c7e <lis2mdl_write_reg>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	e000      	b.n	8005688 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	461a      	mov	r2, r3
 800569c:	460b      	mov	r3, r1
 800569e:	72fb      	strb	r3, [r7, #11]
 80056a0:	4613      	mov	r3, r2
 80056a2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10e      	bne.n	80056ce <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	695c      	ldr	r4, [r3, #20]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	7b1b      	ldrb	r3, [r3, #12]
 80056b8:	b298      	uxth	r0, r3
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	b299      	uxth	r1, r3
 80056c4:	893b      	ldrh	r3, [r7, #8]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	47a0      	blx	r4
 80056ca:	4603      	mov	r3, r0
 80056cc:	e01d      	b.n	800570a <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d10b      	bne.n	80056ee <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	695c      	ldr	r4, [r3, #20]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	7b1b      	ldrb	r3, [r3, #12]
 80056de:	b298      	uxth	r0, r3
 80056e0:	7afb      	ldrb	r3, [r7, #11]
 80056e2:	b299      	uxth	r1, r3
 80056e4:	893b      	ldrh	r3, [r7, #8]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	47a0      	blx	r4
 80056ea:	4603      	mov	r3, r0
 80056ec:	e00d      	b.n	800570a <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	695c      	ldr	r4, [r3, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	7b1b      	ldrb	r3, [r3, #12]
 80056f6:	b298      	uxth	r0, r3
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	b299      	uxth	r1, r3
 8005702:	893b      	ldrh	r3, [r7, #8]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	47a0      	blx	r4
 8005708:	4603      	mov	r3, r0
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd90      	pop	{r4, r7, pc}

08005712 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005712:	b590      	push	{r4, r7, lr}
 8005714:	b087      	sub	sp, #28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	461a      	mov	r2, r3
 800571e:	460b      	mov	r3, r1
 8005720:	72fb      	strb	r3, [r7, #11]
 8005722:	4613      	mov	r3, r2
 8005724:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10e      	bne.n	8005750 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	691c      	ldr	r4, [r3, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	7b1b      	ldrb	r3, [r3, #12]
 800573a:	b298      	uxth	r0, r3
 800573c:	7afb      	ldrb	r3, [r7, #11]
 800573e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005742:	b2db      	uxtb	r3, r3
 8005744:	b299      	uxth	r1, r3
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	47a0      	blx	r4
 800574c:	4603      	mov	r3, r0
 800574e:	e01d      	b.n	800578c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d10b      	bne.n	8005770 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	691c      	ldr	r4, [r3, #16]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	7b1b      	ldrb	r3, [r3, #12]
 8005760:	b298      	uxth	r0, r3
 8005762:	7afb      	ldrb	r3, [r7, #11]
 8005764:	b299      	uxth	r1, r3
 8005766:	893b      	ldrh	r3, [r7, #8]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	47a0      	blx	r4
 800576c:	4603      	mov	r3, r0
 800576e:	e00d      	b.n	800578c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	691c      	ldr	r4, [r3, #16]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	7b1b      	ldrb	r3, [r3, #12]
 8005778:	b298      	uxth	r0, r3
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005780:	b2db      	uxtb	r3, r3
 8005782:	b299      	uxth	r1, r3
 8005784:	893b      	ldrh	r3, [r7, #8]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	47a0      	blx	r4
 800578a:	4603      	mov	r3, r0
  }
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd90      	pop	{r4, r7, pc}

08005794 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	; 0x30
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	461a      	mov	r2, r3
 80057a0:	460b      	mov	r3, r1
 80057a2:	72fb      	strb	r3, [r7, #11]
 80057a4:	4613      	mov	r3, r2
 80057a6:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80057ba:	233d      	movs	r3, #61	; 0x3d
 80057bc:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80057be:	2315      	movs	r3, #21
 80057c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80057c4:	2316      	movs	r3, #22
 80057c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80057ca:	2317      	movs	r3, #23
 80057cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 80057d0:	2314      	movs	r3, #20
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80057d6:	2344      	movs	r3, #68	; 0x44
 80057d8:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80057da:	2302      	movs	r3, #2
 80057dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80057e0:	2339      	movs	r3, #57	; 0x39
 80057e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80057ec:	2329      	movs	r3, #41	; 0x29
 80057ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80057f2:	231e      	movs	r3, #30
 80057f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80057fe:	893b      	ldrh	r3, [r7, #8]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f103 0020 	add.w	r0, r3, #32
 800581c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005820:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005824:	2301      	movs	r3, #1
 8005826:	f000 fa2a 	bl	8005c7e <lis2mdl_write_reg>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	e0e9      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f103 0020 	add.w	r0, r3, #32
 800583c:	f107 021f 	add.w	r2, r7, #31
 8005840:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005844:	2301      	movs	r3, #1
 8005846:	f000 fa1a 	bl	8005c7e <lis2mdl_write_reg>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005850:	f04f 33ff 	mov.w	r3, #4294967295
 8005854:	e0d9      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f103 0020 	add.w	r0, r3, #32
 800585c:	f107 020b 	add.w	r2, r7, #11
 8005860:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005864:	2301      	movs	r3, #1
 8005866:	f000 fa0a 	bl	8005c7e <lis2mdl_write_reg>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	e0c9      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f103 0020 	add.w	r0, r3, #32
 800587c:	f107 021d 	add.w	r2, r7, #29
 8005880:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005884:	2301      	movs	r3, #1
 8005886:	f000 f9fa 	bl	8005c7e <lis2mdl_write_reg>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	e0b9      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f103 0020 	add.w	r0, r3, #32
 800589c:	f107 021e 	add.w	r2, r7, #30
 80058a0:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80058a4:	2301      	movs	r3, #1
 80058a6:	f000 f9ea 	bl	8005c7e <lis2mdl_write_reg>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80058b0:	f04f 33ff 	mov.w	r3, #4294967295
 80058b4:	e0a9      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f103 0020 	add.w	r0, r3, #32
 80058bc:	f107 0220 	add.w	r2, r7, #32
 80058c0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80058c4:	2301      	movs	r3, #1
 80058c6:	f000 f9da 	bl	8005c7e <lis2mdl_write_reg>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	e099      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f103 0020 	add.w	r0, r3, #32
 80058dc:	f107 021c 	add.w	r2, r7, #28
 80058e0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80058e4:	2301      	movs	r3, #1
 80058e6:	f000 f9b2 	bl	8005c4e <lis2mdl_read_reg>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	e089      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80058f6:	7f3b      	ldrb	r3, [r7, #28]
 80058f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d102      	bne.n	8005906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005904:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f103 0020 	add.w	r0, r3, #32
 800590c:	f107 021c 	add.w	r2, r7, #28
 8005910:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005914:	2301      	movs	r3, #1
 8005916:	f000 f9b2 	bl	8005c7e <lis2mdl_write_reg>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	e071      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f103 0020 	add.w	r0, r3, #32
 800592c:	f107 0214 	add.w	r2, r7, #20
 8005930:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005934:	2306      	movs	r3, #6
 8005936:	f000 f98a 	bl	8005c4e <lis2mdl_read_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e061      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f103 0020 	add.w	r0, r3, #32
 800594c:	f107 021b 	add.w	r2, r7, #27
 8005950:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005954:	2301      	movs	r3, #1
 8005956:	f000 f97a 	bl	8005c4e <lis2mdl_read_reg>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295
 8005964:	e051      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005966:	7efa      	ldrb	r2, [r7, #27]
 8005968:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800596c:	4013      	ands	r3, r2
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005974:	429a      	cmp	r2, r3
 8005976:	d1e6      	bne.n	8005946 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f103 0020 	add.w	r0, r3, #32
 800597e:	f107 021b 	add.w	r2, r7, #27
 8005982:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8005986:	2301      	movs	r3, #1
 8005988:	f000 f961 	bl	8005c4e <lis2mdl_read_reg>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	e038      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005998:	7efa      	ldrb	r2, [r7, #27]
 800599a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800599e:	4013      	ands	r3, r2
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d1e6      	bne.n	8005978 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f103 0020 	add.w	r0, r3, #32
 80059b0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80059b4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80059b8:	2301      	movs	r3, #1
 80059ba:	f000 f960 	bl	8005c7e <lis2mdl_write_reg>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	e01f      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f103 0020 	add.w	r0, r3, #32
 80059d0:	893b      	ldrh	r3, [r7, #8]
 80059d2:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	f000 f939 	bl	8005c4e <lis2mdl_read_reg>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	e010      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f103 0020 	add.w	r0, r3, #32
 80059ee:	f107 0220 	add.w	r2, r7, #32
 80059f2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80059f6:	2301      	movs	r3, #1
 80059f8:	f000 f941 	bl	8005c7e <lis2mdl_write_reg>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	e000      	b.n	8005a0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3730      	adds	r7, #48	; 0x30
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b08c      	sub	sp, #48	; 0x30
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	460b      	mov	r3, r1
 8005a20:	72fb      	strb	r3, [r7, #11]
 8005a22:	4613      	mov	r3, r2
 8005a24:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005a38:	233c      	movs	r3, #60	; 0x3c
 8005a3a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005a3c:	2315      	movs	r3, #21
 8005a3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005a42:	2316      	movs	r3, #22
 8005a44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005a48:	2317      	movs	r3, #23
 8005a4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005a52:	2314      	movs	r3, #20
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005a58:	2344      	movs	r3, #68	; 0x44
 8005a5a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005a5c:	2339      	movs	r3, #57	; 0x39
 8005a5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005a68:	2329      	movs	r3, #41	; 0x29
 8005a6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005a6e:	231e      	movs	r3, #30
 8005a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005a86:	2340      	movs	r3, #64	; 0x40
 8005a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005a8c:	230e      	movs	r3, #14
 8005a8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f103 0020 	add.w	r0, r3, #32
 8005a98:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005a9c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f000 f8ec 	bl	8005c7e <lis2mdl_write_reg>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	e0c9      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f103 0020 	add.w	r0, r3, #32
 8005ab8:	f107 021f 	add.w	r2, r7, #31
 8005abc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f000 f8dc 	bl	8005c7e <lis2mdl_write_reg>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	e0b9      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f103 0020 	add.w	r0, r3, #32
 8005ad8:	f107 020b 	add.w	r2, r7, #11
 8005adc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f000 f8cc 	bl	8005c7e <lis2mdl_write_reg>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
 8005af0:	e0a9      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f103 0020 	add.w	r0, r3, #32
 8005af8:	f107 021e 	add.w	r2, r7, #30
 8005afc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005b00:	2301      	movs	r3, #1
 8005b02:	f000 f8bc 	bl	8005c7e <lis2mdl_write_reg>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	e099      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f103 0020 	add.w	r0, r3, #32
 8005b18:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	f000 f8ad 	bl	8005c7e <lis2mdl_write_reg>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	e08a      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f103 0020 	add.w	r0, r3, #32
 8005b36:	f107 021d 	add.w	r2, r7, #29
 8005b3a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f000 f89d 	bl	8005c7e <lis2mdl_write_reg>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	e07a      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f103 0020 	add.w	r0, r3, #32
 8005b56:	f107 0220 	add.w	r2, r7, #32
 8005b5a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f000 f88d 	bl	8005c7e <lis2mdl_write_reg>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6e:	e06a      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f103 0020 	add.w	r0, r3, #32
 8005b76:	f107 021c 	add.w	r2, r7, #28
 8005b7a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f000 f865 	bl	8005c4e <lis2mdl_read_reg>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e05a      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005b90:	7f3b      	ldrb	r3, [r7, #28]
 8005b92:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d102      	bne.n	8005ba0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b9e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f103 0020 	add.w	r0, r3, #32
 8005ba6:	f107 021c 	add.w	r2, r7, #28
 8005baa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f000 f865 	bl	8005c7e <lis2mdl_write_reg>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	e042      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f103 0020 	add.w	r0, r3, #32
 8005bc6:	f107 0214 	add.w	r2, r7, #20
 8005bca:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005bce:	2306      	movs	r3, #6
 8005bd0:	f000 f83d 	bl	8005c4e <lis2mdl_read_reg>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e032      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f103 0020 	add.w	r0, r3, #32
 8005be6:	f107 021b 	add.w	r2, r7, #27
 8005bea:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f000 f82d 	bl	8005c4e <lis2mdl_read_reg>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfe:	e022      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005c00:	7efa      	ldrb	r2, [r7, #27]
 8005c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c06:	4013      	ands	r3, r2
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d1e6      	bne.n	8005be0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f103 0020 	add.w	r0, r3, #32
 8005c18:	f107 021b 	add.w	r2, r7, #27
 8005c1c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8005c20:	2301      	movs	r3, #1
 8005c22:	f000 f814 	bl	8005c4e <lis2mdl_read_reg>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	e009      	b.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005c32:	7efa      	ldrb	r2, [r7, #27]
 8005c34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d1e6      	bne.n	8005c12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	; 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005c4e:	b590      	push	{r4, r7, lr}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	72fb      	strb	r3, [r7, #11]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685c      	ldr	r4, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68d8      	ldr	r0, [r3, #12]
 8005c6a:	893b      	ldrh	r3, [r7, #8]
 8005c6c:	7af9      	ldrb	r1, [r7, #11]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	47a0      	blx	r4
 8005c72:	6178      	str	r0, [r7, #20]

  return ret;
 8005c74:	697b      	ldr	r3, [r7, #20]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}

08005c7e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005c7e:	b590      	push	{r4, r7, lr}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	72fb      	strb	r3, [r7, #11]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68d8      	ldr	r0, [r3, #12]
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	7af9      	ldrb	r1, [r7, #11]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	47a0      	blx	r4
 8005ca2:	6178      	str	r0, [r7, #20]

  return ret;
 8005ca4:	697b      	ldr	r3, [r7, #20]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}

08005cae <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005cba:	f107 0208 	add.w	r2, r7, #8
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	2160      	movs	r1, #96	; 0x60
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ffc3 	bl	8005c4e <lis2mdl_read_reg>
 8005cc8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	7a3b      	ldrb	r3, [r7, #8]
 8005cda:	f362 0301 	bfi	r3, r2, #0, #2
 8005cde:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005ce0:	f107 0208 	add.w	r2, r7, #8
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	2160      	movs	r1, #96	; 0x60
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ffc8 	bl	8005c7e <lis2mdl_write_reg>
 8005cee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff9d 	bl	8005c4e <lis2mdl_read_reg>
 8005d14:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	7a3b      	ldrb	r3, [r7, #8]
 8005d26:	f362 0383 	bfi	r3, r2, #2, #2
 8005d2a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d2c:	f107 0208 	add.w	r2, r7, #8
 8005d30:	2301      	movs	r3, #1
 8005d32:	2160      	movs	r1, #96	; 0x60
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ffa2 	bl	8005c7e <lis2mdl_write_reg>
 8005d3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d52:	f107 0208 	add.w	r2, r7, #8
 8005d56:	2301      	movs	r3, #1
 8005d58:	2160      	movs	r1, #96	; 0x60
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ff77 	bl	8005c4e <lis2mdl_read_reg>
 8005d60:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005d62:	7a3b      	ldrb	r3, [r7, #8]
 8005d64:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d81a      	bhi.n	8005da4 <lis2mdl_data_rate_get+0x5c>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <lis2mdl_data_rate_get+0x2c>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d8d 	.word	0x08005d8d
 8005d7c:	08005d95 	.word	0x08005d95
 8005d80:	08005d9d 	.word	0x08005d9d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
      break;
 8005d8a:	e00f      	b.n	8005dac <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
      break;
 8005d92:	e00b      	b.n	8005dac <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2202      	movs	r2, #2
 8005d98:	701a      	strb	r2, [r3, #0]
      break;
 8005d9a:	e007      	b.n	8005dac <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	701a      	strb	r2, [r3, #0]
      break;
 8005da2:	e003      	b.n	8005dac <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
      break;
 8005daa:	bf00      	nop
  }

  return ret;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop

08005db8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005dc4:	f107 0208 	add.w	r2, r7, #8
 8005dc8:	2301      	movs	r3, #1
 8005dca:	2162      	movs	r1, #98	; 0x62
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff3e 	bl	8005c4e <lis2mdl_read_reg>
 8005dd2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	7a3b      	ldrb	r3, [r7, #8]
 8005de4:	f362 1304 	bfi	r3, r2, #4, #1
 8005de8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005dea:	f107 0208 	add.w	r2, r7, #8
 8005dee:	2301      	movs	r3, #1
 8005df0:	2162      	movs	r1, #98	; 0x62
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ff43 	bl	8005c7e <lis2mdl_write_reg>
 8005df8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005e0e:	f107 020c 	add.w	r2, r7, #12
 8005e12:	2306      	movs	r3, #6
 8005e14:	2168      	movs	r1, #104	; 0x68
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ff19 	bl	8005c4e <lis2mdl_read_reg>
 8005e1c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e1e:	7b7b      	ldrb	r3, [r7, #13]
 8005e20:	b21a      	sxth	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	7b3b      	ldrb	r3, [r7, #12]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b21a      	sxth	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3302      	adds	r3, #2
 8005e46:	b212      	sxth	r2, r2
 8005e48:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3302      	adds	r3, #2
 8005e64:	b212      	sxth	r2, r2
 8005e66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005e68:	7c7a      	ldrb	r2, [r7, #17]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	b212      	sxth	r2, r2
 8005e70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3304      	adds	r3, #4
 8005e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	7c3b      	ldrb	r3, [r7, #16]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	b212      	sxth	r2, r2
 8005e8e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005e90:	697b      	ldr	r3, [r7, #20]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	214f      	movs	r1, #79	; 0x4f
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fecf 	bl	8005c4e <lis2mdl_read_reg>
 8005eb0:	60f8      	str	r0, [r7, #12]

  return ret;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ec8:	f107 0208 	add.w	r2, r7, #8
 8005ecc:	2301      	movs	r3, #1
 8005ece:	2162      	movs	r1, #98	; 0x62
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff febc 	bl	8005c4e <lis2mdl_read_reg>
 8005ed6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	7a3b      	ldrb	r3, [r7, #8]
 8005ee8:	f362 0341 	bfi	r3, r2, #1, #1
 8005eec:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005eee:	f107 0208 	add.w	r2, r7, #8
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	2162      	movs	r1, #98	; 0x62
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fec1 	bl	8005c7e <lis2mdl_write_reg>
 8005efc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f14:	f107 0208 	add.w	r2, r7, #8
 8005f18:	2301      	movs	r3, #1
 8005f1a:	2162      	movs	r1, #98	; 0x62
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fe96 	bl	8005c4e <lis2mdl_read_reg>
 8005f22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	7a3b      	ldrb	r3, [r7, #8]
 8005f34:	f362 1345 	bfi	r3, r2, #5, #1
 8005f38:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f3a:	f107 0208 	add.w	r2, r7, #8
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2162      	movs	r1, #98	; 0x62
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fe9b 	bl	8005c7e <lis2mdl_write_reg>
 8005f48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e051      	b.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	7b1a      	ldrb	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <LPS22HH_RegisterBusIO+0xcc>)
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <LPS22HH_RegisterBusIO+0xd0>)
 8005fb2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8005fca:	f04f 33ff 	mov.w	r3, #4294967295
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e020      	b.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4798      	blx	r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e016      	b.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d112      	bne.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	461a      	mov	r2, r3
 8006000:	2110      	movs	r1, #16
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9e7 	bl	80063d6 <LPS22HH_Write_Reg>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295
 8006012:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006014:	68fb      	ldr	r3, [r7, #12]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	08006707 	.word	0x08006707
 8006024:	0800673d 	.word	0x0800673d

08006028 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb16 	bl	800666c <LPS22HH_Initialize>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	e004      	b.n	8006056 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800606c:	2b01      	cmp	r3, #1
 800606e:	d111      	bne.n	8006094 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f87f 	bl	8006174 <LPS22HH_PRESS_Disable>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800607c:	f04f 33ff 	mov.w	r3, #4294967295
 8006080:	e00d      	b.n	800609e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f920 	bl	80062c8 <LPS22HH_TEMP_Disable>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295
 8006092:	e004      	b.n	800609e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3320      	adds	r3, #32
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fd26 	bl	8006b08 <lps22hh_device_id_get>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
 80060c6:	e000      	b.n	80060ca <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2201      	movs	r2, #1
 80060e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <LPS22HH_GetCapabilities+0x54>)
 8006108:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4a06      	ldr	r2, [pc, #24]	; (8006128 <LPS22HH_GetCapabilities+0x54>)
 800610e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	43480000 	.word	0x43480000

0800612c <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e014      	b.n	800616c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f103 0220 	add.w	r2, r3, #32
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f000 fb97 	bl	8006884 <lps22hh_data_rate_set>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
 8006160:	e004      	b.n	800616c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e024      	b.n	80061d4 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11a      	bne.n	80061ca <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f103 0220 	add.w	r2, r3, #32
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3333      	adds	r3, #51	; 0x33
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f000 fbbd 	bl	8006920 <lps22hh_data_rate_get>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	e010      	b.n	80061d4 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3320      	adds	r3, #32
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fb63 	bl	8006884 <lps22hh_data_rate_set>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
 80061c8:	e004      	b.n	80061d4 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f90f 	bl	800640c <LPS22HH_GetOutputDataRate>
 80061ee:	4603      	mov	r3, r0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800620a:	2b01      	cmp	r3, #1
 800620c:	d106      	bne.n	800621c <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800620e:	ed97 0a00 	vldr	s0, [r7]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f95e 	bl	80064d4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006218:	4603      	mov	r3, r0
 800621a:	e005      	b.n	8006228 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800621c:	ed97 0a00 	vldr	s0, [r7]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f9c9 	bl	80065b8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006226:	4603      	mov	r3, r0
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	2204      	movs	r2, #4
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f00a f963 	bl	801050e <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3320      	adds	r3, #32
 800624c:	f107 020c 	add.w	r2, r7, #12
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fc0c 	bl	8006a70 <lps22hh_pressure_raw_get>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	e009      	b.n	8006278 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fab4 	bl	80067d4 <lps22hh_from_lsb_to_hpa>
 800626c:	eef0 7a40 	vmov.f32	s15, s0
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e014      	b.n	80062c0 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f103 0220 	add.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 faed 	bl	8006884 <lps22hh_data_rate_set>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295
 80062b4:	e004      	b.n	80062c0 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e024      	b.n	8006328 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d11a      	bne.n	800631e <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f103 0220 	add.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3333      	adds	r3, #51	; 0x33
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 fb13 	bl	8006920 <lps22hh_data_rate_get>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	e010      	b.n	8006328 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3320      	adds	r3, #32
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fab9 	bl	8006884 <lps22hh_data_rate_set>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	e004      	b.n	8006328 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f865 	bl	800640c <LPS22HH_GetOutputDataRate>
 8006342:	4603      	mov	r3, r0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800635e:	2b01      	cmp	r3, #1
 8006360:	d106      	bne.n	8006370 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006362:	ed97 0a00 	vldr	s0, [r7]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8b4 	bl	80064d4 <LPS22HH_SetOutputDataRate_When_Enabled>
 800636c:	4603      	mov	r3, r0
 800636e:	e005      	b.n	800637c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006370:	ed97 0a00 	vldr	s0, [r7]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f91f 	bl	80065b8 <LPS22HH_SetOutputDataRate_When_Disabled>
 800637a:	4603      	mov	r3, r0
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	2202      	movs	r2, #2
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f00a f8b9 	bl	801050e <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3320      	adds	r3, #32
 80063a0:	f107 020c 	add.w	r2, r7, #12
 80063a4:	4611      	mov	r1, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fb8b 	bl	8006ac2 <lps22hh_temperature_raw_get>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	e00a      	b.n	80063ce <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80063b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fa21 	bl	8006804 <lps22hh_from_lsb_to_celsius>
 80063c2:	eef0 7a40 	vmov.f32	s15, s0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
 80063e2:	4613      	mov	r3, r2
 80063e4:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f103 0020 	add.w	r0, r3, #32
 80063ec:	1cba      	adds	r2, r7, #2
 80063ee:	78f9      	ldrb	r1, [r7, #3]
 80063f0:	2301      	movs	r3, #1
 80063f2:	f000 f9d6 	bl	80067a2 <lps22hh_write_reg>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	e000      	b.n	8006404 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3320      	adds	r3, #32
 800641e:	f107 020b 	add.w	r2, r7, #11
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fa7b 	bl	8006920 <lps22hh_data_rate_get>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295
 8006434:	e03d      	b.n	80064b2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d835      	bhi.n	80064a8 <LPS22HH_GetOutputDataRate+0x9c>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <LPS22HH_GetOutputDataRate+0x38>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006465 	.word	0x08006465
 8006448:	0800646f 	.word	0x0800646f
 800644c:	08006479 	.word	0x08006479
 8006450:	08006481 	.word	0x08006481
 8006454:	08006489 	.word	0x08006489
 8006458:	08006491 	.word	0x08006491
 800645c:	08006499 	.word	0x08006499
 8006460:	080064a1 	.word	0x080064a1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
      break;
 800646c:	e020      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006474:	601a      	str	r2, [r3, #0]
      break;
 8006476:	e01b      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	4a10      	ldr	r2, [pc, #64]	; (80064bc <LPS22HH_GetOutputDataRate+0xb0>)
 800647c:	601a      	str	r2, [r3, #0]
      break;
 800647e:	e017      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4a0f      	ldr	r2, [pc, #60]	; (80064c0 <LPS22HH_GetOutputDataRate+0xb4>)
 8006484:	601a      	str	r2, [r3, #0]
      break;
 8006486:	e013      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <LPS22HH_GetOutputDataRate+0xb8>)
 800648c:	601a      	str	r2, [r3, #0]
      break;
 800648e:	e00f      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	4a0d      	ldr	r2, [pc, #52]	; (80064c8 <LPS22HH_GetOutputDataRate+0xbc>)
 8006494:	601a      	str	r2, [r3, #0]
      break;
 8006496:	e00b      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <LPS22HH_GetOutputDataRate+0xc0>)
 800649c:	601a      	str	r2, [r3, #0]
      break;
 800649e:	e007      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <LPS22HH_GetOutputDataRate+0xc4>)
 80064a4:	601a      	str	r2, [r3, #0]
      break;
 80064a6:	e003      	b.n	80064b0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	60fb      	str	r3, [r7, #12]
      break;
 80064ae:	bf00      	nop
  }

  return ret;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	41200000 	.word	0x41200000
 80064c0:	41c80000 	.word	0x41c80000
 80064c4:	42480000 	.word	0x42480000
 80064c8:	42960000 	.word	0x42960000
 80064cc:	42c80000 	.word	0x42c80000
 80064d0:	43480000 	.word	0x43480000

080064d4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80064e0:	edd7 7a00 	vldr	s15, [r7]
 80064e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	d801      	bhi.n	80064f6 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e037      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80064f6:	edd7 7a00 	vldr	s15, [r7]
 80064fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80064fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006506:	d801      	bhi.n	800650c <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8006508:	2302      	movs	r3, #2
 800650a:	e02c      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800650c:	edd7 7a00 	vldr	s15, [r7]
 8006510:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	d801      	bhi.n	8006522 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800651e:	2303      	movs	r3, #3
 8006520:	e021      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006522:	edd7 7a00 	vldr	s15, [r7]
 8006526:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80065ac <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 800652a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006532:	d801      	bhi.n	8006538 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8006534:	2304      	movs	r3, #4
 8006536:	e016      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006538:	edd7 7a00 	vldr	s15, [r7]
 800653c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80065b0 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8006540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006548:	d801      	bhi.n	800654e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800654a:	2305      	movs	r3, #5
 800654c:	e00b      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800654e:	edd7 7a00 	vldr	s15, [r7]
 8006552:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80065b4 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8006556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655e:	d801      	bhi.n	8006564 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8006560:	2306      	movs	r3, #6
 8006562:	e000      	b.n	8006566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006564:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006566:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3320      	adds	r3, #32
 800656c:	7bfa      	ldrb	r2, [r7, #15]
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 f987 	bl	8006884 <lps22hh_data_rate_set>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	e00f      	b.n	80065a2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f103 0220 	add.w	r2, r3, #32
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3333      	adds	r3, #51	; 0x33
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 f9c6 	bl	8006920 <lps22hh_data_rate_get>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	e000      	b.n	80065a2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	42480000 	.word	0x42480000
 80065b0:	42960000 	.word	0x42960000
 80065b4:	42c80000 	.word	0x42c80000

080065b8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80065c4:	edd7 7a00 	vldr	s15, [r7]
 80065c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d801      	bhi.n	80065da <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e037      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80065da:	edd7 7a00 	vldr	s15, [r7]
 80065de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80065e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	d801      	bhi.n	80065f0 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e02c      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80065f0:	edd7 7a00 	vldr	s15, [r7]
 80065f4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80065f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006600:	d801      	bhi.n	8006606 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8006602:	2303      	movs	r3, #3
 8006604:	e021      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006606:	edd7 7a00 	vldr	s15, [r7]
 800660a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006660 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800660e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	d801      	bhi.n	800661c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8006618:	2304      	movs	r3, #4
 800661a:	e016      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800661c:	edd7 7a00 	vldr	s15, [r7]
 8006620:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006664 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8006624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662c:	d801      	bhi.n	8006632 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800662e:	2305      	movs	r3, #5
 8006630:	e00b      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006632:	edd7 7a00 	vldr	s15, [r7]
 8006636:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006668 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800663a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006642:	d801      	bhi.n	8006648 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8006644:	2306      	movs	r3, #6
 8006646:	e000      	b.n	800664a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006648:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	42480000 	.word	0x42480000
 8006664:	42960000 	.word	0x42960000
 8006668:	42c80000 	.word	0x42c80000

0800666c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d00b      	beq.n	8006694 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3320      	adds	r3, #32
 8006680:	2111      	movs	r1, #17
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fa9d 	bl	8006bc2 <lps22hh_i3c_interface_set>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800668e:	f04f 33ff 	mov.w	r3, #4294967295
 8006692:	e034      	b.n	80066fe <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3320      	adds	r3, #32
 8006698:	2110      	movs	r1, #16
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f8f2 	bl	8006884 <lps22hh_data_rate_set>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	e028      	b.n	80066fe <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3320      	adds	r3, #32
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa5f 	bl	8006b76 <lps22hh_lp_bandwidth_set>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	e01c      	b.n	80066fe <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3320      	adds	r3, #32
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f8b4 	bl	8006838 <lps22hh_block_data_update_set>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e010      	b.n	80066fe <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3320      	adds	r3, #32
 80066e0:	2101      	movs	r1, #1
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fa21 	bl	8006b2a <lps22hh_auto_increment_set>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295
 80066f2:	e004      	b.n	80066fe <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006706:	b590      	push	{r4, r7, lr}
 8006708:	b087      	sub	sp, #28
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	461a      	mov	r2, r3
 8006712:	460b      	mov	r3, r1
 8006714:	72fb      	strb	r3, [r7, #11]
 8006716:	4613      	mov	r3, r2
 8006718:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	695c      	ldr	r4, [r3, #20]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	7b1b      	ldrb	r3, [r3, #12]
 8006726:	b298      	uxth	r0, r3
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	b299      	uxth	r1, r3
 800672c:	893b      	ldrh	r3, [r7, #8]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	47a0      	blx	r4
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	460b      	mov	r3, r1
 800674a:	72fb      	strb	r3, [r7, #11]
 800674c:	4613      	mov	r3, r2
 800674e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	691c      	ldr	r4, [r3, #16]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	7b1b      	ldrb	r3, [r3, #12]
 800675c:	b298      	uxth	r0, r3
 800675e:	7afb      	ldrb	r3, [r7, #11]
 8006760:	b299      	uxth	r1, r3
 8006762:	893b      	ldrh	r3, [r7, #8]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	47a0      	blx	r4
 8006768:	4603      	mov	r3, r0
}
 800676a:	4618      	mov	r0, r3
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	bd90      	pop	{r4, r7, pc}

08006772 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006772:	b590      	push	{r4, r7, lr}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	461a      	mov	r2, r3
 800677e:	460b      	mov	r3, r1
 8006780:	72fb      	strb	r3, [r7, #11]
 8006782:	4613      	mov	r3, r2
 8006784:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685c      	ldr	r4, [r3, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68d8      	ldr	r0, [r3, #12]
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	7af9      	ldrb	r1, [r7, #11]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	47a0      	blx	r4
 8006796:	6178      	str	r0, [r7, #20]

  return ret;
 8006798:	697b      	ldr	r3, [r7, #20]
}
 800679a:	4618      	mov	r0, r3
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}

080067a2 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80067a2:	b590      	push	{r4, r7, lr}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	461a      	mov	r2, r3
 80067ae:	460b      	mov	r3, r1
 80067b0:	72fb      	strb	r3, [r7, #11]
 80067b2:	4613      	mov	r3, r2
 80067b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68d8      	ldr	r0, [r3, #12]
 80067be:	893b      	ldrh	r3, [r7, #8]
 80067c0:	7af9      	ldrb	r1, [r7, #11]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	47a0      	blx	r4
 80067c6:	6178      	str	r0, [r7, #20]

  return ret;
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
	...

080067d4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006800 <lps22hh_from_lsb_to_hpa+0x2c>
 80067ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80067f2:	eeb0 0a67 	vmov.f32	s0, s15
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	49800000 	.word	0x49800000

08006804 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800680e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800681a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006834 <lps22hh_from_lsb_to_celsius+0x30>
 800681e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006822:	eef0 7a66 	vmov.f32	s15, s13
}
 8006826:	eeb0 0a67 	vmov.f32	s0, s15
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	42c80000 	.word	0x42c80000

08006838 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006844:	f107 0208 	add.w	r2, r7, #8
 8006848:	2301      	movs	r3, #1
 800684a:	2110      	movs	r1, #16
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff90 	bl	8006772 <lps22hh_read_reg>
 8006852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	7a3b      	ldrb	r3, [r7, #8]
 8006864:	f362 0341 	bfi	r3, r2, #1, #1
 8006868:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800686a:	f107 0208 	add.w	r2, r7, #8
 800686e:	2301      	movs	r3, #1
 8006870:	2110      	movs	r1, #16
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ff95 	bl	80067a2 <lps22hh_write_reg>
 8006878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006890:	f107 0210 	add.w	r2, r7, #16
 8006894:	2301      	movs	r3, #1
 8006896:	2110      	movs	r1, #16
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff6a 	bl	8006772 <lps22hh_read_reg>
 800689e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80068a6:	f107 020c 	add.w	r2, r7, #12
 80068aa:	2301      	movs	r3, #1
 80068ac:	2111      	movs	r1, #17
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ff5f 	bl	8006772 <lps22hh_read_reg>
 80068b4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10f      	bne.n	80068dc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	7c3b      	ldrb	r3, [r7, #16]
 80068c6:	f362 1306 	bfi	r3, r2, #4, #3
 80068ca:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80068cc:	f107 0210 	add.w	r2, r7, #16
 80068d0:	2301      	movs	r3, #1
 80068d2:	2110      	movs	r1, #16
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ff64 	bl	80067a2 <lps22hh_write_reg>
 80068da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d119      	bne.n	8006916 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	7b3b      	ldrb	r3, [r7, #12]
 80068ee:	f362 0341 	bfi	r3, r2, #1, #1
 80068f2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	08db      	lsrs	r3, r3, #3
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	f362 0300 	bfi	r3, r2, #0, #1
 8006904:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006906:	f107 020c 	add.w	r2, r7, #12
 800690a:	2301      	movs	r3, #1
 800690c:	2111      	movs	r1, #17
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ff47 	bl	80067a2 <lps22hh_write_reg>
 8006914:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006916:	697b      	ldr	r3, [r7, #20]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800692a:	f107 0210 	add.w	r2, r7, #16
 800692e:	2301      	movs	r3, #1
 8006930:	2110      	movs	r1, #16
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff ff1d 	bl	8006772 <lps22hh_read_reg>
 8006938:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006940:	f107 020c 	add.w	r2, r7, #12
 8006944:	2301      	movs	r3, #1
 8006946:	2111      	movs	r1, #17
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff12 	bl	8006772 <lps22hh_read_reg>
 800694e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8086 	bne.w	8006a64 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006958:	f107 020c 	add.w	r2, r7, #12
 800695c:	2301      	movs	r3, #1
 800695e:	2111      	movs	r1, #17
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff06 	bl	8006772 <lps22hh_read_reg>
 8006966:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006968:	7b3b      	ldrb	r3, [r7, #12]
 800696a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	011a      	lsls	r2, r3, #4
 8006972:	7b3b      	ldrb	r3, [r7, #12]
 8006974:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006978:	b2db      	uxtb	r3, r3
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800697e:	7c3a      	ldrb	r2, [r7, #16]
 8006980:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006984:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006986:	4413      	add	r3, r2
 8006988:	2b15      	cmp	r3, #21
 800698a:	d867      	bhi.n	8006a5c <lps22hh_data_rate_get+0x13c>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <lps22hh_data_rate_get+0x74>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069ed 	.word	0x080069ed
 8006998:	080069fd 	.word	0x080069fd
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006a15 	.word	0x08006a15
 80069a8:	08006a1d 	.word	0x08006a1d
 80069ac:	08006a4d 	.word	0x08006a4d
 80069b0:	08006a55 	.word	0x08006a55
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	08006a5d 	.word	0x08006a5d
 80069bc:	08006a5d 	.word	0x08006a5d
 80069c0:	08006a5d 	.word	0x08006a5d
 80069c4:	08006a5d 	.word	0x08006a5d
 80069c8:	08006a5d 	.word	0x08006a5d
 80069cc:	08006a5d 	.word	0x08006a5d
 80069d0:	08006a5d 	.word	0x08006a5d
 80069d4:	08006a5d 	.word	0x08006a5d
 80069d8:	08006a25 	.word	0x08006a25
 80069dc:	08006a2d 	.word	0x08006a2d
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a45 	.word	0x08006a45
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
        break;
 80069f2:	e037      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2208      	movs	r2, #8
 80069f8:	701a      	strb	r2, [r3, #0]
        break;
 80069fa:	e033      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2201      	movs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
        break;
 8006a02:	e02f      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2202      	movs	r2, #2
 8006a08:	701a      	strb	r2, [r3, #0]
        break;
 8006a0a:	e02b      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	701a      	strb	r2, [r3, #0]
        break;
 8006a12:	e027      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2204      	movs	r2, #4
 8006a18:	701a      	strb	r2, [r3, #0]
        break;
 8006a1a:	e023      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2205      	movs	r2, #5
 8006a20:	701a      	strb	r2, [r3, #0]
        break;
 8006a22:	e01f      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2211      	movs	r2, #17
 8006a28:	701a      	strb	r2, [r3, #0]
        break;
 8006a2a:	e01b      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2212      	movs	r2, #18
 8006a30:	701a      	strb	r2, [r3, #0]
        break;
 8006a32:	e017      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2213      	movs	r2, #19
 8006a38:	701a      	strb	r2, [r3, #0]
        break;
 8006a3a:	e013      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2214      	movs	r2, #20
 8006a40:	701a      	strb	r2, [r3, #0]
        break;
 8006a42:	e00f      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2215      	movs	r2, #21
 8006a48:	701a      	strb	r2, [r3, #0]
        break;
 8006a4a:	e00b      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2206      	movs	r2, #6
 8006a50:	701a      	strb	r2, [r3, #0]
        break;
 8006a52:	e007      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2207      	movs	r2, #7
 8006a58:	701a      	strb	r2, [r3, #0]
        break;
 8006a5a:	e003      	b.n	8006a64 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
        break;
 8006a62:	bf00      	nop
    }
  }

  return ret;
 8006a64:	697b      	ldr	r3, [r7, #20]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop

08006a70 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006a7a:	f107 0208 	add.w	r2, r7, #8
 8006a7e:	2303      	movs	r3, #3
 8006a80:	2128      	movs	r1, #40	; 0x28
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fe75 	bl	8006772 <lps22hh_read_reg>
 8006a88:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006a8a:	7abb      	ldrb	r3, [r7, #10]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	7a7a      	ldrb	r2, [r7, #9]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	7a3a      	ldrb	r2, [r7, #8]
 8006aa8:	441a      	add	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	601a      	str	r2, [r3, #0]

  return ret;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006acc:	f107 0208 	add.w	r2, r7, #8
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	212b      	movs	r1, #43	; 0x2b
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe4c 	bl	8006772 <lps22hh_read_reg>
 8006ada:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006adc:	7a7b      	ldrb	r3, [r7, #9]
 8006ade:	b21a      	sxth	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	7a3b      	ldrb	r3, [r7, #8]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b21a      	sxth	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	801a      	strh	r2, [r3, #0]

  return ret;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006b12:	2301      	movs	r3, #1
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	210f      	movs	r1, #15
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fe2a 	bl	8006772 <lps22hh_read_reg>
 8006b1e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b36:	f107 0208 	add.w	r2, r7, #8
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	2111      	movs	r1, #17
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fe17 	bl	8006772 <lps22hh_read_reg>
 8006b44:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10f      	bne.n	8006b6c <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	7a3b      	ldrb	r3, [r7, #8]
 8006b56:	f362 1304 	bfi	r3, r2, #4, #1
 8006b5a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	2301      	movs	r3, #1
 8006b62:	2111      	movs	r1, #17
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fe1c 	bl	80067a2 <lps22hh_write_reg>
 8006b6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b82:	f107 0208 	add.w	r2, r7, #8
 8006b86:	2301      	movs	r3, #1
 8006b88:	2110      	movs	r1, #16
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fdf1 	bl	8006772 <lps22hh_read_reg>
 8006b90:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	7a3b      	ldrb	r3, [r7, #8]
 8006ba2:	f362 0383 	bfi	r3, r2, #2, #2
 8006ba6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006ba8:	f107 0208 	add.w	r2, r7, #8
 8006bac:	2301      	movs	r3, #1
 8006bae:	2110      	movs	r1, #16
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fdf6 	bl	80067a2 <lps22hh_write_reg>
 8006bb6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006bce:	f107 0208 	add.w	r2, r7, #8
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	210e      	movs	r1, #14
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fdcb 	bl	8006772 <lps22hh_read_reg>
 8006bdc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d118      	bne.n	8006c16 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	7a3b      	ldrb	r3, [r7, #8]
 8006bee:	f362 0341 	bfi	r3, r2, #1, #1
 8006bf2:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	091b      	lsrs	r3, r3, #4
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	7a3b      	ldrb	r3, [r7, #8]
 8006c00:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c04:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006c06:	f107 0208 	add.w	r2, r7, #8
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	210e      	movs	r1, #14
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fdc7 	bl	80067a2 <lps22hh_write_reg>
 8006c14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c16:	68fb      	ldr	r3, [r7, #12]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e051      	b.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	7b1a      	ldrb	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <LSM6DSO_RegisterBusIO+0xcc>)
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <LSM6DSO_RegisterBusIO+0xd0>)
 8006c7e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e020      	b.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4798      	blx	r3
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e016      	b.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d112      	bne.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2112      	movs	r1, #18
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 ff5d 	bl	8007b8e <LSM6DSO_Write_Reg>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	08008031 	.word	0x08008031
 8006cf0:	08008067 	.word	0x08008067

08006cf4 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d00b      	beq.n	8006d1c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3320      	adds	r3, #32
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fe8a 	bl	8008a24 <lsm6dso_i3c_disable_set>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006d16:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1a:	e060      	b.n	8006dde <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3320      	adds	r3, #32
 8006d20:	2101      	movs	r1, #1
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fe58 	bl	80089d8 <lsm6dso_auto_increment_set>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d32:	e054      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3320      	adds	r3, #32
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fd62 	bl	8008804 <lsm6dso_block_data_update_set>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	e048      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3320      	adds	r3, #32
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 feae 	bl	8008ab4 <lsm6dso_fifo_mode_set>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	e03c      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3320      	adds	r3, #32
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fa20 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	e02c      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3320      	adds	r3, #32
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f9b6 	bl	80080fc <lsm6dso_xl_full_scale_set>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	e020      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3320      	adds	r3, #32
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fbce 	bl	800854c <lsm6dso_gy_data_rate_set>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006db6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dba:	e010      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3320      	adds	r3, #32
 8006dc0:	2106      	movs	r1, #6
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fb5a 	bl	800847c <lsm6dso_gy_full_scale_set>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	e004      	b.n	8006dde <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f888 	bl	8006f04 <LSM6DSO_ACC_Disable>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfe:	e015      	b.n	8006e2c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc2e 	bl	8007662 <LSM6DSO_GYRO_Disable>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e10:	e00c      	b.n	8006e2c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3320      	adds	r3, #32
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 fdb6 	bl	80089b6 <lsm6dso_device_id_get>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006e50:	f04f 33ff 	mov.w	r3, #4294967295
 8006e54:	e000      	b.n	8006e58 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e88:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <LSM6DSO_GetCapabilities+0x58>)
 8006e9a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4a06      	ldr	r2, [pc, #24]	; (8006eb8 <LSM6DSO_GetCapabilities+0x58>)
 8006ea0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	45d02000 	.word	0x45d02000

08006ebc <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e014      	b.n	8006efc <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f103 0220 	add.w	r2, r3, #32
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f001 f969 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	e004      	b.n	8006efc <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e01f      	b.n	8006f5a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f103 0220 	add.w	r2, r3, #32
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3333      	adds	r3, #51	; 0x33
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f001 fa40 	bl	80083ac <lsm6dso_xl_data_rate_get>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	e010      	b.n	8006f5a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3320      	adds	r3, #32
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 f93a 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	e004      	b.n	8006f5a <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3320      	adds	r3, #32
 8006f76:	f107 020b 	add.w	r2, r7, #11
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 f8e3 	bl	8008148 <lsm6dso_xl_full_scale_get>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	e023      	b.n	8006fd6 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d81b      	bhi.n	8006fcc <LSM6DSO_ACC_GetSensitivity+0x68>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fbd 	.word	0x08006fbd
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006fb0:	601a      	str	r2, [r3, #0]
      break;
 8006fb2:	e00f      	b.n	8006fd4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006fb8:	601a      	str	r2, [r3, #0]
      break;
 8006fba:	e00b      	b.n	8006fd4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006fc0:	601a      	str	r2, [r3, #0]
      break;
 8006fc2:	e007      	b.n	8006fd4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006fc8:	601a      	str	r2, [r3, #0]
      break;
 8006fca:	e003      	b.n	8006fd4 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	60fb      	str	r3, [r7, #12]
      break;
 8006fd2:	bf00      	nop
  }

  return ret;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	3d79db23 	.word	0x3d79db23
 8006fe4:	3df9db23 	.word	0x3df9db23
 8006fe8:	3e79db23 	.word	0x3e79db23
 8006fec:	3ef9db23 	.word	0x3ef9db23

08006ff0 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3320      	adds	r3, #32
 8007002:	f107 020b 	add.w	r2, r7, #11
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f9cf 	bl	80083ac <lsm6dso_xl_data_rate_get>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
 8007018:	e054      	b.n	80070c4 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800701a:	7afb      	ldrb	r3, [r7, #11]
 800701c:	2b0b      	cmp	r3, #11
 800701e:	d84c      	bhi.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007059 	.word	0x08007059
 800702c:	0800706b 	.word	0x0800706b
 8007030:	08007073 	.word	0x08007073
 8007034:	0800707b 	.word	0x0800707b
 8007038:	08007083 	.word	0x08007083
 800703c:	0800708b 	.word	0x0800708b
 8007040:	08007093 	.word	0x08007093
 8007044:	0800709b 	.word	0x0800709b
 8007048:	080070a3 	.word	0x080070a3
 800704c:	080070ab 	.word	0x080070ab
 8007050:	080070b3 	.word	0x080070b3
 8007054:	08007063 	.word	0x08007063
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
      break;
 8007060:	e02f      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8007066:	601a      	str	r2, [r3, #0]
      break;
 8007068:	e02b      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800706e:	601a      	str	r2, [r3, #0]
      break;
 8007070:	e027      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8007076:	601a      	str	r2, [r3, #0]
      break;
 8007078:	e023      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800707e:	601a      	str	r2, [r3, #0]
      break;
 8007080:	e01f      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	4a15      	ldr	r2, [pc, #84]	; (80070dc <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8007086:	601a      	str	r2, [r3, #0]
      break;
 8007088:	e01b      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	4a14      	ldr	r2, [pc, #80]	; (80070e0 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800708e:	601a      	str	r2, [r3, #0]
      break;
 8007090:	e017      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8007096:	601a      	str	r2, [r3, #0]
      break;
 8007098:	e013      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800709e:	601a      	str	r2, [r3, #0]
      break;
 80070a0:	e00f      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	4a11      	ldr	r2, [pc, #68]	; (80070ec <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80070a6:	601a      	str	r2, [r3, #0]
      break;
 80070a8:	e00b      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80070ae:	601a      	str	r2, [r3, #0]
      break;
 80070b0:	e007      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	4a0f      	ldr	r2, [pc, #60]	; (80070f4 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80070b6:	601a      	str	r2, [r3, #0]
      break;
 80070b8:	e003      	b.n	80070c2 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295
 80070be:	60fb      	str	r3, [r7, #12]
      break;
 80070c0:	bf00      	nop
  }

  return ret;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	3fcccccd 	.word	0x3fcccccd
 80070d0:	41480000 	.word	0x41480000
 80070d4:	41d00000 	.word	0x41d00000
 80070d8:	42500000 	.word	0x42500000
 80070dc:	42d00000 	.word	0x42d00000
 80070e0:	43500000 	.word	0x43500000
 80070e4:	43d08000 	.word	0x43d08000
 80070e8:	44504000 	.word	0x44504000
 80070ec:	44d06000 	.word	0x44d06000
 80070f0:	45505000 	.word	0x45505000
 80070f4:	45d05800 	.word	0x45d05800

080070f8 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007104:	2100      	movs	r1, #0
 8007106:	ed97 0a00 	vldr	s0, [r7]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f806 	bl	800711c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08c      	sub	sp, #48	; 0x30
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	ed87 0a02 	vstr	s0, [r7, #8]
 8007128:	460b      	mov	r3, r1
 800712a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	2b02      	cmp	r3, #2
 8007138:	f000 80ea 	beq.w	8007310 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 800713c:	2b02      	cmp	r3, #2
 800713e:	f300 8163 	bgt.w	8007408 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8007146:	2b01      	cmp	r3, #1
 8007148:	d074      	beq.n	8007234 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800714a:	e15d      	b.n	8007408 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f103 0020 	add.w	r0, r3, #32
 8007152:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007156:	2301      	movs	r3, #1
 8007158:	2114      	movs	r1, #20
 800715a:	f000 ff9f 	bl	800809c <lsm6dso_read_reg>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8007164:	f04f 33ff 	mov.w	r3, #4294967295
 8007168:	e16c      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800716a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800716e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d025      	beq.n	80071c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800717e:	2b01      	cmp	r3, #1
 8007180:	d10b      	bne.n	800719a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3320      	adds	r3, #32
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f815 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	e154      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800719a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800719e:	f36f 13c7 	bfc	r3, #7, #1
 80071a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f103 0020 	add.w	r0, r3, #32
 80071ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80071b0:	2301      	movs	r3, #1
 80071b2:	2114      	movs	r1, #20
 80071b4:	f000 ff8a 	bl	80080cc <lsm6dso_write_reg>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80071be:	f04f 33ff 	mov.w	r3, #4294967295
 80071c2:	e13f      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f103 0020 	add.w	r0, r3, #32
 80071ca:	f107 0220 	add.w	r2, r7, #32
 80071ce:	2301      	movs	r3, #1
 80071d0:	2115      	movs	r1, #21
 80071d2:	f000 ff63 	bl	800809c <lsm6dso_read_reg>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	e130      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80071e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d014      	beq.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80071f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071f4:	f36f 1304 	bfc	r3, #4, #1
 80071f8:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f103 0020 	add.w	r0, r3, #32
 8007202:	f107 0220 	add.w	r2, r7, #32
 8007206:	2301      	movs	r3, #1
 8007208:	2115      	movs	r1, #21
 800720a:	f000 ff5f 	bl	80080cc <lsm6dso_write_reg>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
 8007218:	e114      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800721a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800721e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722a:	d400      	bmi.n	800722e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 800722c:	e0f0      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800722e:	4b87      	ldr	r3, [pc, #540]	; (800744c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
 8007232:	e0ed      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f103 0020 	add.w	r0, r3, #32
 800723a:	f107 021c 	add.w	r2, r7, #28
 800723e:	2301      	movs	r3, #1
 8007240:	2114      	movs	r1, #20
 8007242:	f000 ff2b 	bl	800809c <lsm6dso_read_reg>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	e0f8      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8007252:	7f3b      	ldrb	r3, [r7, #28]
 8007254:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d023      	beq.n	80072a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10b      	bne.n	8007280 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3320      	adds	r3, #32
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ffa2 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	e0e1      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8007280:	7f3b      	ldrb	r3, [r7, #28]
 8007282:	f36f 13c7 	bfc	r3, #7, #1
 8007286:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f103 0020 	add.w	r0, r3, #32
 800728e:	f107 021c 	add.w	r2, r7, #28
 8007292:	2301      	movs	r3, #1
 8007294:	2114      	movs	r1, #20
 8007296:	f000 ff19 	bl	80080cc <lsm6dso_write_reg>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e0ce      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f103 0020 	add.w	r0, r3, #32
 80072ac:	f107 0218 	add.w	r2, r7, #24
 80072b0:	2301      	movs	r3, #1
 80072b2:	2115      	movs	r1, #21
 80072b4:	f000 fef2 	bl	800809c <lsm6dso_read_reg>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	e0bf      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80072c4:	7e3b      	ldrb	r3, [r7, #24]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d112      	bne.n	80072f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80072d0:	7e3b      	ldrb	r3, [r7, #24]
 80072d2:	f043 0310 	orr.w	r3, r3, #16
 80072d6:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f103 0020 	add.w	r0, r3, #32
 80072de:	f107 0218 	add.w	r2, r7, #24
 80072e2:	2301      	movs	r3, #1
 80072e4:	2115      	movs	r1, #21
 80072e6:	f000 fef1 	bl	80080cc <lsm6dso_write_reg>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	e0a6      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80072f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80072fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007450 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80072fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007306:	dc00      	bgt.n	800730a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8007308:	e082      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800730a:	4b52      	ldr	r3, [pc, #328]	; (8007454 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
 800730e:	e07f      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f103 0020 	add.w	r0, r3, #32
 8007316:	f107 0210 	add.w	r2, r7, #16
 800731a:	2301      	movs	r3, #1
 800731c:	2115      	movs	r1, #21
 800731e:	f000 febd 	bl	800809c <lsm6dso_read_reg>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8007328:	f04f 33ff 	mov.w	r3, #4294967295
 800732c:	e08a      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800732e:	7c3b      	ldrb	r3, [r7, #16]
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d012      	beq.n	8007360 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800733a:	7c3b      	ldrb	r3, [r7, #16]
 800733c:	f36f 1304 	bfc	r3, #4, #1
 8007340:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f103 0020 	add.w	r0, r3, #32
 8007348:	f107 0210 	add.w	r2, r7, #16
 800734c:	2301      	movs	r3, #1
 800734e:	2115      	movs	r1, #21
 8007350:	f000 febc 	bl	80080cc <lsm6dso_write_reg>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
 800735e:	e071      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007366:	2b01      	cmp	r3, #1
 8007368:	d108      	bne.n	800737c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f979 	bl	8007662 <LSM6DSO_GYRO_Disable>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	e063      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f103 0020 	add.w	r0, r3, #32
 8007382:	f107 0214 	add.w	r2, r7, #20
 8007386:	2301      	movs	r3, #1
 8007388:	2114      	movs	r1, #20
 800738a:	f000 fe87 	bl	800809c <lsm6dso_read_reg>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8007394:	f04f 33ff 	mov.w	r3, #4294967295
 8007398:	e054      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800739a:	7d3b      	ldrb	r3, [r7, #20]
 800739c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d123      	bne.n	80073ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10b      	bne.n	80073c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3320      	adds	r3, #32
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fefe 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	e03d      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80073c8:	7d3b      	ldrb	r3, [r7, #20]
 80073ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ce:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f103 0020 	add.w	r0, r3, #32
 80073d6:	f107 0214 	add.w	r2, r7, #20
 80073da:	2301      	movs	r3, #1
 80073dc:	2114      	movs	r1, #20
 80073de:	f000 fe75 	bl	80080cc <lsm6dso_write_reg>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80073e8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ec:	e02a      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80073ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80073f2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007450 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80073f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	dc00      	bgt.n	8007402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8007400:	e006      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8007402:	4b14      	ldr	r3, [pc, #80]	; (8007454 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8007404:	62bb      	str	r3, [r7, #40]	; 0x28
 8007406:	e003      	b.n	8007410 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800740e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d102      	bne.n	800741e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e012      	b.n	8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007424:	2b01      	cmp	r3, #1
 8007426:	d106      	bne.n	8007436 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007428:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fbc9 	bl	8007bc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8007432:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007434:	e005      	b.n	8007442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007436:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fc5a 	bl	8007cf4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007440:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007444:	4618      	mov	r0, r3
 8007446:	3730      	adds	r7, #48	; 0x30
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	41480000 	.word	0x41480000
 8007450:	43500000 	.word	0x43500000
 8007454:	43500000 	.word	0x43500000

08007458 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3320      	adds	r3, #32
 800746a:	f107 020b 	add.w	r2, r7, #11
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fe69 	bl	8008148 <lsm6dso_xl_full_scale_get>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800747c:	f04f 33ff 	mov.w	r3, #4294967295
 8007480:	e023      	b.n	80074ca <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d81b      	bhi.n	80074c0 <LSM6DSO_ACC_GetFullScale+0x68>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <LSM6DSO_ACC_GetFullScale+0x38>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074b1 	.word	0x080074b1
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2202      	movs	r2, #2
 80074a4:	601a      	str	r2, [r3, #0]
      break;
 80074a6:	e00f      	b.n	80074c8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2204      	movs	r2, #4
 80074ac:	601a      	str	r2, [r3, #0]
      break;
 80074ae:	e00b      	b.n	80074c8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2208      	movs	r2, #8
 80074b4:	601a      	str	r2, [r3, #0]
      break;
 80074b6:	e007      	b.n	80074c8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2210      	movs	r2, #16
 80074bc:	601a      	str	r2, [r3, #0]
      break;
 80074be:	e003      	b.n	80074c8 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	60fb      	str	r3, [r7, #12]
      break;
 80074c6:	bf00      	nop
  }

  return ret;
 80074c8:	68fb      	ldr	r3, [r7, #12]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	dd0b      	ble.n	80074fc <LSM6DSO_ACC_SetFullScale+0x28>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	dd06      	ble.n	80074f8 <LSM6DSO_ACC_SetFullScale+0x24>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	dc01      	bgt.n	80074f4 <LSM6DSO_ACC_SetFullScale+0x20>
 80074f0:	2303      	movs	r3, #3
 80074f2:	e004      	b.n	80074fe <LSM6DSO_ACC_SetFullScale+0x2a>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e002      	b.n	80074fe <LSM6DSO_ACC_SetFullScale+0x2a>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e000      	b.n	80074fe <LSM6DSO_ACC_SetFullScale+0x2a>
 80074fc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80074fe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3320      	adds	r3, #32
 8007504:	7bfa      	ldrb	r2, [r7, #15]
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fdf7 	bl	80080fc <lsm6dso_xl_full_scale_set>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	e000      	b.n	800751c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3320      	adds	r3, #32
 8007532:	f107 0208 	add.w	r2, r7, #8
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f9d4 	bl	80088e6 <lsm6dso_acceleration_raw_get>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	e00c      	b.n	8007564 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800754a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007552:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800755a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3320      	adds	r3, #32
 8007580:	f107 0210 	add.w	r2, r7, #16
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 f9ad 	bl	80088e6 <lsm6dso_acceleration_raw_get>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	e03c      	b.n	8007612 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007598:	f107 030c 	add.w	r3, r7, #12
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fce0 	bl	8006f64 <LSM6DSO_ACC_GetSensitivity>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	e030      	b.n	8007612 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80075b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80075c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c8:	ee17 2a90 	vmov	r2, s15
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80075d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80075e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e8:	ee17 2a90 	vmov	r2, s15
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80075f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007608:	ee17 2a90 	vmov	r2, s15
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	e014      	b.n	800765a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f103 0220 	add.w	r2, r3, #32
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 ff84 	bl	800854c <lsm6dso_gy_data_rate_set>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e004      	b.n	800765a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e01f      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0220 	add.w	r2, r3, #32
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3334      	adds	r3, #52	; 0x34
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f001 f85b 	bl	8008740 <lsm6dso_gy_data_rate_get>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	e010      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3320      	adds	r3, #32
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f000 ff55 	bl	800854c <lsm6dso_gy_data_rate_set>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ac:	e004      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3320      	adds	r3, #32
 80076d2:	f107 020b 	add.w	r2, r7, #11
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fef5 	bl	80084c8 <lsm6dso_gy_full_scale_get>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	e02d      	b.n	8007746 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d825      	bhi.n	800773c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007715 	.word	0x08007715
 8007700:	08007725 	.word	0x08007725
 8007704:	0800773d 	.word	0x0800773d
 8007708:	0800772d 	.word	0x0800772d
 800770c:	0800773d 	.word	0x0800773d
 8007710:	08007735 	.word	0x08007735
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	4a0e      	ldr	r2, [pc, #56]	; (8007750 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007718:	601a      	str	r2, [r3, #0]
      break;
 800771a:	e013      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007720:	601a      	str	r2, [r3, #0]
      break;
 8007722:	e00f      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007728:	601a      	str	r2, [r3, #0]
      break;
 800772a:	e00b      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	4a0b      	ldr	r2, [pc, #44]	; (800775c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007730:	601a      	str	r2, [r3, #0]
      break;
 8007732:	e007      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007738:	601a      	str	r2, [r3, #0]
      break;
 800773a:	e003      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 800773c:	f04f 33ff 	mov.w	r3, #4294967295
 8007740:	60fb      	str	r3, [r7, #12]
      break;
 8007742:	bf00      	nop
  }

  return ret;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	408c0000 	.word	0x408c0000
 8007754:	410c0000 	.word	0x410c0000
 8007758:	418c0000 	.word	0x418c0000
 800775c:	420c0000 	.word	0x420c0000
 8007760:	428c0000 	.word	0x428c0000

08007764 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3320      	adds	r3, #32
 8007776:	f107 020b 	add.w	r2, r7, #11
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ffdf 	bl	8008740 <lsm6dso_gy_data_rate_get>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007788:	f04f 33ff 	mov.w	r3, #4294967295
 800778c:	e04e      	b.n	800782c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	2b0a      	cmp	r3, #10
 8007792:	d846      	bhi.n	8007822 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077e3 	.word	0x080077e3
 80077ac:	080077eb 	.word	0x080077eb
 80077b0:	080077f3 	.word	0x080077f3
 80077b4:	080077fb 	.word	0x080077fb
 80077b8:	08007803 	.word	0x08007803
 80077bc:	0800780b 	.word	0x0800780b
 80077c0:	08007813 	.word	0x08007813
 80077c4:	0800781b 	.word	0x0800781b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
      break;
 80077d0:	e02b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	4a17      	ldr	r2, [pc, #92]	; (8007834 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80077d6:	601a      	str	r2, [r3, #0]
      break;
 80077d8:	e027      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	4a16      	ldr	r2, [pc, #88]	; (8007838 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80077de:	601a      	str	r2, [r3, #0]
      break;
 80077e0:	e023      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80077e6:	601a      	str	r2, [r3, #0]
      break;
 80077e8:	e01f      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	4a14      	ldr	r2, [pc, #80]	; (8007840 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80077ee:	601a      	str	r2, [r3, #0]
      break;
 80077f0:	e01b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	4a13      	ldr	r2, [pc, #76]	; (8007844 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80077f6:	601a      	str	r2, [r3, #0]
      break;
 80077f8:	e017      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	4a12      	ldr	r2, [pc, #72]	; (8007848 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80077fe:	601a      	str	r2, [r3, #0]
      break;
 8007800:	e013      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	4a11      	ldr	r2, [pc, #68]	; (800784c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8007806:	601a      	str	r2, [r3, #0]
      break;
 8007808:	e00f      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	4a10      	ldr	r2, [pc, #64]	; (8007850 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800780e:	601a      	str	r2, [r3, #0]
      break;
 8007810:	e00b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8007816:	601a      	str	r2, [r3, #0]
      break;
 8007818:	e007      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	4a0e      	ldr	r2, [pc, #56]	; (8007858 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800781e:	601a      	str	r2, [r3, #0]
      break;
 8007820:	e003      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	60fb      	str	r3, [r7, #12]
      break;
 8007828:	bf00      	nop
  }

  return ret;
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	41480000 	.word	0x41480000
 8007838:	41d00000 	.word	0x41d00000
 800783c:	42500000 	.word	0x42500000
 8007840:	42d00000 	.word	0x42d00000
 8007844:	43500000 	.word	0x43500000
 8007848:	43d08000 	.word	0x43d08000
 800784c:	44504000 	.word	0x44504000
 8007850:	44d06000 	.word	0x44d06000
 8007854:	45505000 	.word	0x45505000
 8007858:	45d05800 	.word	0x45d05800

0800785c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007868:	2100      	movs	r1, #0
 800786a:	ed97 0a00 	vldr	s0, [r7]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f806 	bl	8007880 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	ed87 0a02 	vstr	s0, [r7, #8]
 800788c:	460b      	mov	r3, r1
 800788e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d028      	beq.n	80078f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80078a2:	e05c      	b.n	800795e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f103 0020 	add.w	r0, r3, #32
 80078aa:	f107 0214 	add.w	r2, r7, #20
 80078ae:	2301      	movs	r3, #1
 80078b0:	2116      	movs	r1, #22
 80078b2:	f000 fbf3 	bl	800809c <lsm6dso_read_reg>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295
 80078c0:	e06c      	b.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80078c2:	7d3b      	ldrb	r3, [r7, #20]
 80078c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d04b      	beq.n	8007966 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80078ce:	7d3b      	ldrb	r3, [r7, #20]
 80078d0:	f36f 13c7 	bfc	r3, #7, #1
 80078d4:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f103 0020 	add.w	r0, r3, #32
 80078dc:	f107 0214 	add.w	r2, r7, #20
 80078e0:	2301      	movs	r3, #1
 80078e2:	2116      	movs	r1, #22
 80078e4:	f000 fbf2 	bl	80080cc <lsm6dso_write_reg>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d03b      	beq.n	8007966 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80078ee:	f04f 33ff 	mov.w	r3, #4294967295
 80078f2:	e053      	b.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f103 0020 	add.w	r0, r3, #32
 80078fa:	f107 0210 	add.w	r2, r7, #16
 80078fe:	2301      	movs	r3, #1
 8007900:	2116      	movs	r1, #22
 8007902:	f000 fbcb 	bl	800809c <lsm6dso_read_reg>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	e044      	b.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8007912:	7c3b      	ldrb	r3, [r7, #16]
 8007914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d112      	bne.n	8007944 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800791e:	7c3b      	ldrb	r3, [r7, #16]
 8007920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007924:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f103 0020 	add.w	r0, r3, #32
 800792c:	f107 0210 	add.w	r2, r7, #16
 8007930:	2301      	movs	r3, #1
 8007932:	2116      	movs	r1, #22
 8007934:	f000 fbca 	bl	80080cc <lsm6dso_write_reg>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800793e:	f04f 33ff 	mov.w	r3, #4294967295
 8007942:	e02b      	b.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007944:	edd7 7a06 	vldr	s15, [r7, #24]
 8007948:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80079a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 800794c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	dc00      	bgt.n	8007958 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8007956:	e007      	b.n	8007968 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8007958:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e004      	b.n	8007968 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	61fb      	str	r3, [r7, #28]
      break;
 8007964:	e000      	b.n	8007968 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8007966:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d102      	bne.n	8007976 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	e012      	b.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800797c:	2b01      	cmp	r3, #1
 800797e:	d106      	bne.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007980:	ed97 0a06 	vldr	s0, [r7, #24]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fa45 	bl	8007e14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800798a:	61f8      	str	r0, [r7, #28]
 800798c:	e005      	b.n	800799a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800798e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 faca 	bl	8007f2c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007998:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800799a:	69fb      	ldr	r3, [r7, #28]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	43500000 	.word	0x43500000
 80079a8:	43500000 	.word	0x43500000

080079ac <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3320      	adds	r3, #32
 80079be:	f107 020b 	add.w	r2, r7, #11
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fd7f 	bl	80084c8 <lsm6dso_gy_full_scale_get>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	e030      	b.n	8007a38 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	2b06      	cmp	r3, #6
 80079da:	d828      	bhi.n	8007a2e <LSM6DSO_GYRO_GetFullScale+0x82>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a01 	.word	0x08007a01
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a2f 	.word	0x08007a2f
 80079f4:	08007a1b 	.word	0x08007a1b
 80079f8:	08007a2f 	.word	0x08007a2f
 80079fc:	08007a25 	.word	0x08007a25
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	227d      	movs	r2, #125	; 0x7d
 8007a04:	601a      	str	r2, [r3, #0]
      break;
 8007a06:	e016      	b.n	8007a36 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	22fa      	movs	r2, #250	; 0xfa
 8007a0c:	601a      	str	r2, [r3, #0]
      break;
 8007a0e:	e012      	b.n	8007a36 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007a16:	601a      	str	r2, [r3, #0]
      break;
 8007a18:	e00d      	b.n	8007a36 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a20:	601a      	str	r2, [r3, #0]
      break;
 8007a22:	e008      	b.n	8007a36 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007a2a:	601a      	str	r2, [r3, #0]
      break;
 8007a2c:	e003      	b.n	8007a36 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	60fb      	str	r3, [r7, #12]
      break;
 8007a34:	bf00      	nop
  }

  return ret;
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b7d      	cmp	r3, #125	; 0x7d
 8007a4e:	dd12      	ble.n	8007a76 <LSM6DSO_GYRO_SetFullScale+0x36>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2bfa      	cmp	r3, #250	; 0xfa
 8007a54:	dd0d      	ble.n	8007a72 <LSM6DSO_GYRO_SetFullScale+0x32>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a5c:	dd07      	ble.n	8007a6e <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a64:	dc01      	bgt.n	8007a6a <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007a66:	2304      	movs	r3, #4
 8007a68:	e006      	b.n	8007a78 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a6a:	2306      	movs	r3, #6
 8007a6c:	e004      	b.n	8007a78 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e002      	b.n	8007a78 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e000      	b.n	8007a78 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a76:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007a78:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3320      	adds	r3, #32
 8007a7e:	7bfa      	ldrb	r2, [r7, #15]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fcfa 	bl	800847c <lsm6dso_gy_full_scale_set>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	e000      	b.n	8007a96 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3320      	adds	r3, #32
 8007aac:	f107 0208 	add.w	r2, r7, #8
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fecc 	bl	8008850 <lsm6dso_angular_rate_raw_get>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007abe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac2:	e00c      	b.n	8007ade <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007ac4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007acc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007ad4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3320      	adds	r3, #32
 8007af4:	f107 0210 	add.w	r2, r7, #16
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fea8 	bl	8008850 <lsm6dso_angular_rate_raw_get>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0a:	e03c      	b.n	8007b86 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fdd4 	bl	80076c0 <LSM6DSO_GYRO_GetSensitivity>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b22:	e030      	b.n	8007b86 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007b24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b3c:	ee17 2a90 	vmov	r2, s15
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007b44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b48:	ee07 3a90 	vmov	s15, r3
 8007b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b5c:	ee17 2a90 	vmov	r2, s15
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007b64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b7c:	ee17 2a90 	vmov	r2, s15
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f103 0020 	add.w	r0, r3, #32
 8007ba4:	1cba      	adds	r2, r7, #2
 8007ba6:	78f9      	ldrb	r1, [r7, #3]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f000 fa8f 	bl	80080cc <lsm6dso_write_reg>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb8:	e000      	b.n	8007bbc <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007bd0:	edd7 7a00 	vldr	s15, [r7]
 8007bd4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007cd4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be0:	d801      	bhi.n	8007be6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8007be2:	230b      	movs	r3, #11
 8007be4:	e063      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007be6:	edd7 7a00 	vldr	s15, [r7]
 8007bea:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	d801      	bhi.n	8007bfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e058      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007bfc:	edd7 7a00 	vldr	s15, [r7]
 8007c00:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0c:	d801      	bhi.n	8007c12 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e04d      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c12:	edd7 7a00 	vldr	s15, [r7]
 8007c16:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	d801      	bhi.n	8007c28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007c24:	2303      	movs	r3, #3
 8007c26:	e042      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c28:	edd7 7a00 	vldr	s15, [r7]
 8007c2c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007cdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8007c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c38:	d801      	bhi.n	8007c3e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8007c3a:	2304      	movs	r3, #4
 8007c3c:	e037      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c3e:	edd7 7a00 	vldr	s15, [r7]
 8007c42:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007ce0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8007c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	d801      	bhi.n	8007c54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007c50:	2305      	movs	r3, #5
 8007c52:	e02c      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c54:	edd7 7a00 	vldr	s15, [r7]
 8007c58:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007ce4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8007c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c64:	d801      	bhi.n	8007c6a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007c66:	2306      	movs	r3, #6
 8007c68:	e021      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c6a:	edd7 7a00 	vldr	s15, [r7]
 8007c6e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007ce8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8007c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7a:	d801      	bhi.n	8007c80 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8007c7c:	2307      	movs	r3, #7
 8007c7e:	e016      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c80:	edd7 7a00 	vldr	s15, [r7]
 8007c84:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007cec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c90:	d801      	bhi.n	8007c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007c92:	2308      	movs	r3, #8
 8007c94:	e00b      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007c96:	edd7 7a00 	vldr	s15, [r7]
 8007c9a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007cf0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8007c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	d801      	bhi.n	8007cac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007ca8:	2309      	movs	r3, #9
 8007caa:	e000      	b.n	8007cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007cac:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007cae:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3320      	adds	r3, #32
 8007cb4:	7bfa      	ldrb	r2, [r7, #15]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fa7d 	bl	80081b8 <lsm6dso_xl_data_rate_set>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc8:	e000      	b.n	8007ccc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	3fcccccd 	.word	0x3fcccccd
 8007cd8:	42500000 	.word	0x42500000
 8007cdc:	42d00000 	.word	0x42d00000
 8007ce0:	43500000 	.word	0x43500000
 8007ce4:	43d08000 	.word	0x43d08000
 8007ce8:	44504000 	.word	0x44504000
 8007cec:	44d06000 	.word	0x44d06000
 8007cf0:	45505000 	.word	0x45505000

08007cf4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007d00:	edd7 7a00 	vldr	s15, [r7]
 8007d04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007df4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	d801      	bhi.n	8007d16 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007d12:	230b      	movs	r3, #11
 8007d14:	e063      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d16:	edd7 7a00 	vldr	s15, [r7]
 8007d1a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d26:	d801      	bhi.n	8007d2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e058      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d2c:	edd7 7a00 	vldr	s15, [r7]
 8007d30:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d3c:	d801      	bhi.n	8007d42 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e04d      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d42:	edd7 7a00 	vldr	s15, [r7]
 8007d46:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007df8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8007d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d52:	d801      	bhi.n	8007d58 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007d54:	2303      	movs	r3, #3
 8007d56:	e042      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d58:	edd7 7a00 	vldr	s15, [r7]
 8007d5c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007dfc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8007d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	d801      	bhi.n	8007d6e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007d6a:	2304      	movs	r3, #4
 8007d6c:	e037      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d6e:	edd7 7a00 	vldr	s15, [r7]
 8007d72:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007e00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8007d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	d801      	bhi.n	8007d84 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007d80:	2305      	movs	r3, #5
 8007d82:	e02c      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d84:	edd7 7a00 	vldr	s15, [r7]
 8007d88:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007e04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8007d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	d801      	bhi.n	8007d9a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007d96:	2306      	movs	r3, #6
 8007d98:	e021      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007d9a:	edd7 7a00 	vldr	s15, [r7]
 8007d9e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007e08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8007da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007daa:	d801      	bhi.n	8007db0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007dac:	2307      	movs	r3, #7
 8007dae:	e016      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007db0:	edd7 7a00 	vldr	s15, [r7]
 8007db4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc0:	d801      	bhi.n	8007dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	e00b      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007dc6:	edd7 7a00 	vldr	s15, [r7]
 8007dca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007e10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd6:	d801      	bhi.n	8007ddc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007dd8:	2309      	movs	r3, #9
 8007dda:	e000      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007ddc:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	3fcccccd 	.word	0x3fcccccd
 8007df8:	42500000 	.word	0x42500000
 8007dfc:	42d00000 	.word	0x42d00000
 8007e00:	43500000 	.word	0x43500000
 8007e04:	43d08000 	.word	0x43d08000
 8007e08:	44504000 	.word	0x44504000
 8007e0c:	44d06000 	.word	0x44d06000
 8007e10:	45505000 	.word	0x45505000

08007e14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007e20:	edd7 7a00 	vldr	s15, [r7]
 8007e24:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e30:	d801      	bhi.n	8007e36 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e058      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007e36:	edd7 7a00 	vldr	s15, [r7]
 8007e3a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e46:	d801      	bhi.n	8007e4c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e04d      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007e4c:	edd7 7a00 	vldr	s15, [r7]
 8007e50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007f10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8007e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5c:	d801      	bhi.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e042      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007e62:	edd7 7a00 	vldr	s15, [r7]
 8007e66:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007f14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e72:	d801      	bhi.n	8007e78 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007e74:	2304      	movs	r3, #4
 8007e76:	e037      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007e78:	edd7 7a00 	vldr	s15, [r7]
 8007e7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007f18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	d801      	bhi.n	8007e8e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007e8a:	2305      	movs	r3, #5
 8007e8c:	e02c      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007e8e:	edd7 7a00 	vldr	s15, [r7]
 8007e92:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007f1c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9e:	d801      	bhi.n	8007ea4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e021      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007ea4:	edd7 7a00 	vldr	s15, [r7]
 8007ea8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007f20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb4:	d801      	bhi.n	8007eba <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007eb6:	2307      	movs	r3, #7
 8007eb8:	e016      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007eba:	edd7 7a00 	vldr	s15, [r7]
 8007ebe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007f24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	d801      	bhi.n	8007ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	e00b      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007ed0:	edd7 7a00 	vldr	s15, [r7]
 8007ed4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee0:	d801      	bhi.n	8007ee6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007ee2:	2309      	movs	r3, #9
 8007ee4:	e000      	b.n	8007ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007ee6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007ee8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3320      	adds	r3, #32
 8007eee:	7bfa      	ldrb	r2, [r7, #15]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fb2a 	bl	800854c <lsm6dso_gy_data_rate_set>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8007efe:	f04f 33ff 	mov.w	r3, #4294967295
 8007f02:	e000      	b.n	8007f06 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	42500000 	.word	0x42500000
 8007f14:	42d00000 	.word	0x42d00000
 8007f18:	43500000 	.word	0x43500000
 8007f1c:	43d08000 	.word	0x43d08000
 8007f20:	44504000 	.word	0x44504000
 8007f24:	44d06000 	.word	0x44d06000
 8007f28:	45505000 	.word	0x45505000

08007f2c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007f38:	edd7 7a00 	vldr	s15, [r7]
 8007f3c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f48:	d801      	bhi.n	8007f4e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e058      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007f4e:	edd7 7a00 	vldr	s15, [r7]
 8007f52:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5e:	d801      	bhi.n	8007f64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e04d      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007f64:	edd7 7a00 	vldr	s15, [r7]
 8007f68:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f74:	d801      	bhi.n	8007f7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007f76:	2303      	movs	r3, #3
 8007f78:	e042      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007f7a:	edd7 7a00 	vldr	s15, [r7]
 8007f7e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008018 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	d801      	bhi.n	8007f90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	e037      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007f90:	edd7 7a00 	vldr	s15, [r7]
 8007f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800801c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa0:	d801      	bhi.n	8007fa6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007fa2:	2305      	movs	r3, #5
 8007fa4:	e02c      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007fa6:	edd7 7a00 	vldr	s15, [r7]
 8007faa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008020 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8007fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	d801      	bhi.n	8007fbc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007fb8:	2306      	movs	r3, #6
 8007fba:	e021      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007fbc:	edd7 7a00 	vldr	s15, [r7]
 8007fc0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008024 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fcc:	d801      	bhi.n	8007fd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007fce:	2307      	movs	r3, #7
 8007fd0:	e016      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007fd2:	edd7 7a00 	vldr	s15, [r7]
 8007fd6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008028 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe2:	d801      	bhi.n	8007fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	e00b      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007fe8:	edd7 7a00 	vldr	s15, [r7]
 8007fec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800802c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff8:	d801      	bhi.n	8007ffe <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007ffa:	2309      	movs	r3, #9
 8007ffc:	e000      	b.n	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007ffe:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	42500000 	.word	0x42500000
 8008018:	42d00000 	.word	0x42d00000
 800801c:	43500000 	.word	0x43500000
 8008020:	43d08000 	.word	0x43d08000
 8008024:	44504000 	.word	0x44504000
 8008028:	44d06000 	.word	0x44d06000
 800802c:	45505000 	.word	0x45505000

08008030 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	461a      	mov	r2, r3
 800803c:	460b      	mov	r3, r1
 800803e:	72fb      	strb	r3, [r7, #11]
 8008040:	4613      	mov	r3, r2
 8008042:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	695c      	ldr	r4, [r3, #20]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	7b1b      	ldrb	r3, [r3, #12]
 8008050:	b298      	uxth	r0, r3
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	b299      	uxth	r1, r3
 8008056:	893b      	ldrh	r3, [r7, #8]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	47a0      	blx	r4
 800805c:	4603      	mov	r3, r0
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	bd90      	pop	{r4, r7, pc}

08008066 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008066:	b590      	push	{r4, r7, lr}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	461a      	mov	r2, r3
 8008072:	460b      	mov	r3, r1
 8008074:	72fb      	strb	r3, [r7, #11]
 8008076:	4613      	mov	r3, r2
 8008078:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	691c      	ldr	r4, [r3, #16]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	7b1b      	ldrb	r3, [r3, #12]
 8008086:	b298      	uxth	r0, r3
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	b299      	uxth	r1, r3
 800808c:	893b      	ldrh	r3, [r7, #8]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	47a0      	blx	r4
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}

0800809c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
 80080ac:	4613      	mov	r3, r2
 80080ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685c      	ldr	r4, [r3, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68d8      	ldr	r0, [r3, #12]
 80080b8:	893b      	ldrh	r3, [r7, #8]
 80080ba:	7af9      	ldrb	r1, [r7, #11]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	47a0      	blx	r4
 80080c0:	6178      	str	r0, [r7, #20]

  return ret;
 80080c2:	697b      	ldr	r3, [r7, #20]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd90      	pop	{r4, r7, pc}

080080cc <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	461a      	mov	r2, r3
 80080d8:	460b      	mov	r3, r1
 80080da:	72fb      	strb	r3, [r7, #11]
 80080dc:	4613      	mov	r3, r2
 80080de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681c      	ldr	r4, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68d8      	ldr	r0, [r3, #12]
 80080e8:	893b      	ldrh	r3, [r7, #8]
 80080ea:	7af9      	ldrb	r1, [r7, #11]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	47a0      	blx	r4
 80080f0:	6178      	str	r0, [r7, #20]

  return ret;
 80080f2:	697b      	ldr	r3, [r7, #20]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}

080080fc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	2301      	movs	r3, #1
 800810e:	2110      	movs	r1, #16
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ffc3 	bl	800809c <lsm6dso_read_reg>
 8008116:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10f      	bne.n	800813e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	b2da      	uxtb	r2, r3
 8008126:	7a3b      	ldrb	r3, [r7, #8]
 8008128:	f362 0383 	bfi	r3, r2, #2, #2
 800812c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800812e:	f107 0208 	add.w	r2, r7, #8
 8008132:	2301      	movs	r3, #1
 8008134:	2110      	movs	r1, #16
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff ffc8 	bl	80080cc <lsm6dso_write_reg>
 800813c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008152:	f107 0208 	add.w	r2, r7, #8
 8008156:	2301      	movs	r3, #1
 8008158:	2110      	movs	r1, #16
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff ff9e 	bl	800809c <lsm6dso_read_reg>
 8008160:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8008162:	7a3b      	ldrb	r3, [r7, #8]
 8008164:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d81a      	bhi.n	80081a4 <lsm6dso_xl_full_scale_get+0x5c>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <lsm6dso_xl_full_scale_get+0x2c>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	08008185 	.word	0x08008185
 8008178:	0800818d 	.word	0x0800818d
 800817c:	08008195 	.word	0x08008195
 8008180:	0800819d 	.word	0x0800819d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e00f      	b.n	80081ac <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	701a      	strb	r2, [r3, #0]
      break;
 8008192:	e00b      	b.n	80081ac <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2202      	movs	r2, #2
 8008198:	701a      	strb	r2, [r3, #0]
      break;
 800819a:	e007      	b.n	80081ac <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2203      	movs	r2, #3
 80081a0:	701a      	strb	r2, [r3, #0]
      break;
 80081a2:	e003      	b.n	80081ac <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
      break;
 80081aa:	bf00      	nop
  }

  return ret;
 80081ac:	68fb      	ldr	r3, [r7, #12]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop

080081b8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80081c8:	f107 030c 	add.w	r3, r7, #12
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc96 	bl	8008b00 <lsm6dso_fsm_enable_get>
 80081d4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <lsm6dso_xl_data_rate_set+0x28>
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	e0e0      	b.n	80083a2 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80081e0:	7b3b      	ldrb	r3, [r7, #12]
 80081e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80081e8:	7b3b      	ldrb	r3, [r7, #12]
 80081ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80081ee:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80081f0:	4313      	orrs	r3, r2
 80081f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80081f4:	7b3b      	ldrb	r3, [r7, #12]
 80081f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80081fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008200:	7b3b      	ldrb	r3, [r7, #12]
 8008202:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008206:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008208:	4313      	orrs	r3, r2
 800820a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800820c:	7b3b      	ldrb	r3, [r7, #12]
 800820e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008212:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008214:	4313      	orrs	r3, r2
 8008216:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008218:	7b3b      	ldrb	r3, [r7, #12]
 800821a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800821e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008220:	4313      	orrs	r3, r2
 8008222:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008224:	7b3b      	ldrb	r3, [r7, #12]
 8008226:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800822a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800822c:	4313      	orrs	r3, r2
 800822e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008230:	7b3b      	ldrb	r3, [r7, #12]
 8008232:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008236:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008238:	4313      	orrs	r3, r2
 800823a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800823c:	7b7b      	ldrb	r3, [r7, #13]
 800823e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008242:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008244:	4313      	orrs	r3, r2
 8008246:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008248:	7b7b      	ldrb	r3, [r7, #13]
 800824a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800824e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008250:	4313      	orrs	r3, r2
 8008252:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008254:	7b7b      	ldrb	r3, [r7, #13]
 8008256:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800825a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800825c:	4313      	orrs	r3, r2
 800825e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008260:	7b7b      	ldrb	r3, [r7, #13]
 8008262:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008266:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008268:	4313      	orrs	r3, r2
 800826a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800826c:	7b7b      	ldrb	r3, [r7, #13]
 800826e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008272:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008274:	4313      	orrs	r3, r2
 8008276:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008278:	7b7b      	ldrb	r3, [r7, #13]
 800827a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800827e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008280:	4313      	orrs	r3, r2
 8008282:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008284:	7b7b      	ldrb	r3, [r7, #13]
 8008286:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800828a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800828c:	4313      	orrs	r3, r2
 800828e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008290:	7b7b      	ldrb	r3, [r7, #13]
 8008292:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008296:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008298:	4313      	orrs	r3, r2
 800829a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800829c:	2b01      	cmp	r3, #1
 800829e:	d164      	bne.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80082a0:	f107 030b 	add.w	r3, r7, #11
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fc4c 	bl	8008b44 <lsm6dso_fsm_data_rate_get>
 80082ac:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <lsm6dso_xl_data_rate_set+0x100>
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e074      	b.n	80083a2 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d852      	bhi.n	8008364 <lsm6dso_xl_data_rate_set+0x1ac>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <lsm6dso_xl_data_rate_set+0x10c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082e7 	.word	0x080082e7
 80082cc:	08008305 	.word	0x08008305
 80082d0:	0800832f 	.word	0x0800832f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80082da:	2301      	movs	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80082de:	e044      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	75fb      	strb	r3, [r7, #23]
        break;
 80082e4:	e041      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80082ec:	2302      	movs	r3, #2
 80082ee:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80082f0:	e03b      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d102      	bne.n	80082fe <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80082f8:	2302      	movs	r3, #2
 80082fa:	75fb      	strb	r3, [r7, #23]
        break;
 80082fc:	e035      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	75fb      	strb	r3, [r7, #23]
        break;
 8008302:	e032      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800830e:	e02c      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008316:	2303      	movs	r3, #3
 8008318:	75fb      	strb	r3, [r7, #23]
        break;
 800831a:	e026      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d102      	bne.n	8008328 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008322:	2303      	movs	r3, #3
 8008324:	75fb      	strb	r3, [r7, #23]
        break;
 8008326:	e020      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	75fb      	strb	r3, [r7, #23]
        break;
 800832c:	e01d      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008334:	2304      	movs	r3, #4
 8008336:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008338:	e017      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d102      	bne.n	8008346 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008340:	2304      	movs	r3, #4
 8008342:	75fb      	strb	r3, [r7, #23]
        break;
 8008344:	e011      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d102      	bne.n	8008352 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800834c:	2304      	movs	r3, #4
 800834e:	75fb      	strb	r3, [r7, #23]
        break;
 8008350:	e00b      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d102      	bne.n	800835e <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008358:	2304      	movs	r3, #4
 800835a:	75fb      	strb	r3, [r7, #23]
        break;
 800835c:	e005      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	75fb      	strb	r3, [r7, #23]
        break;
 8008362:	e002      	b.n	800836a <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	75fb      	strb	r3, [r7, #23]
        break;
 8008368:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800836a:	f107 0208 	add.w	r2, r7, #8
 800836e:	2301      	movs	r3, #1
 8008370:	2110      	movs	r1, #16
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fe92 	bl	800809c <lsm6dso_read_reg>
 8008378:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	b2da      	uxtb	r2, r3
 8008382:	7a3b      	ldrb	r3, [r7, #8]
 8008384:	f362 1307 	bfi	r3, r2, #4, #4
 8008388:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800838a:	f107 0208 	add.w	r2, r7, #8
 800838e:	2301      	movs	r3, #1
 8008390:	2110      	movs	r1, #16
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fe9a 	bl	80080cc <lsm6dso_write_reg>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4413      	add	r3, r2
 800839e:	613b      	str	r3, [r7, #16]

  return ret;
 80083a0:	693b      	ldr	r3, [r7, #16]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80083b6:	f107 0208 	add.w	r2, r7, #8
 80083ba:	2301      	movs	r3, #1
 80083bc:	2110      	movs	r1, #16
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fe6c 	bl	800809c <lsm6dso_read_reg>
 80083c4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80083c6:	7a3b      	ldrb	r3, [r7, #8]
 80083c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b0b      	cmp	r3, #11
 80083d0:	d84a      	bhi.n	8008468 <lsm6dso_xl_data_rate_get+0xbc>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <lsm6dso_xl_data_rate_get+0x2c>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	08008409 	.word	0x08008409
 80083dc:	08008411 	.word	0x08008411
 80083e0:	08008419 	.word	0x08008419
 80083e4:	08008421 	.word	0x08008421
 80083e8:	08008429 	.word	0x08008429
 80083ec:	08008431 	.word	0x08008431
 80083f0:	08008439 	.word	0x08008439
 80083f4:	08008441 	.word	0x08008441
 80083f8:	08008449 	.word	0x08008449
 80083fc:	08008451 	.word	0x08008451
 8008400:	08008459 	.word	0x08008459
 8008404:	08008461 	.word	0x08008461
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
      break;
 800840e:	e02f      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]
      break;
 8008416:	e02b      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2202      	movs	r2, #2
 800841c:	701a      	strb	r2, [r3, #0]
      break;
 800841e:	e027      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2203      	movs	r2, #3
 8008424:	701a      	strb	r2, [r3, #0]
      break;
 8008426:	e023      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2204      	movs	r2, #4
 800842c:	701a      	strb	r2, [r3, #0]
      break;
 800842e:	e01f      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2205      	movs	r2, #5
 8008434:	701a      	strb	r2, [r3, #0]
      break;
 8008436:	e01b      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2206      	movs	r2, #6
 800843c:	701a      	strb	r2, [r3, #0]
      break;
 800843e:	e017      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2207      	movs	r2, #7
 8008444:	701a      	strb	r2, [r3, #0]
      break;
 8008446:	e013      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2208      	movs	r2, #8
 800844c:	701a      	strb	r2, [r3, #0]
      break;
 800844e:	e00f      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2209      	movs	r2, #9
 8008454:	701a      	strb	r2, [r3, #0]
      break;
 8008456:	e00b      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	220a      	movs	r2, #10
 800845c:	701a      	strb	r2, [r3, #0]
      break;
 800845e:	e007      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	220b      	movs	r2, #11
 8008464:	701a      	strb	r2, [r3, #0]
      break;
 8008466:	e003      	b.n	8008470 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
      break;
 800846e:	bf00      	nop
  }

  return ret;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop

0800847c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008488:	f107 0208 	add.w	r2, r7, #8
 800848c:	2301      	movs	r3, #1
 800848e:	2111      	movs	r1, #17
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fe03 	bl	800809c <lsm6dso_read_reg>
 8008496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10f      	bne.n	80084be <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	7a3b      	ldrb	r3, [r7, #8]
 80084a8:	f362 0343 	bfi	r3, r2, #1, #3
 80084ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80084ae:	f107 0208 	add.w	r2, r7, #8
 80084b2:	2301      	movs	r3, #1
 80084b4:	2111      	movs	r1, #17
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fe08 	bl	80080cc <lsm6dso_write_reg>
 80084bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80084be:	68fb      	ldr	r3, [r7, #12]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80084d2:	f107 0208 	add.w	r2, r7, #8
 80084d6:	2301      	movs	r3, #1
 80084d8:	2111      	movs	r1, #17
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fdde 	bl	800809c <lsm6dso_read_reg>
 80084e0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80084e2:	7a3b      	ldrb	r3, [r7, #8]
 80084e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b06      	cmp	r3, #6
 80084ec:	d824      	bhi.n	8008538 <lsm6dso_gy_full_scale_get+0x70>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <lsm6dso_gy_full_scale_get+0x2c>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008539 	.word	0x08008539
 8008504:	08008529 	.word	0x08008529
 8008508:	08008539 	.word	0x08008539
 800850c:	08008531 	.word	0x08008531
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
      break;
 8008516:	e013      	b.n	8008540 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
      break;
 800851e:	e00f      	b.n	8008540 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2202      	movs	r2, #2
 8008524:	701a      	strb	r2, [r3, #0]
      break;
 8008526:	e00b      	b.n	8008540 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2204      	movs	r2, #4
 800852c:	701a      	strb	r2, [r3, #0]
      break;
 800852e:	e007      	b.n	8008540 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2206      	movs	r2, #6
 8008534:	701a      	strb	r2, [r3, #0]
      break;
 8008536:	e003      	b.n	8008540 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
      break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 facc 	bl	8008b00 <lsm6dso_fsm_enable_get>
 8008568:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <lsm6dso_gy_data_rate_set+0x28>
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	e0e0      	b.n	8008736 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008574:	7b3b      	ldrb	r3, [r7, #12]
 8008576:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800857a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800857c:	7b3b      	ldrb	r3, [r7, #12]
 800857e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008582:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008584:	4313      	orrs	r3, r2
 8008586:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008588:	7b3b      	ldrb	r3, [r7, #12]
 800858a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800858e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008590:	4313      	orrs	r3, r2
 8008592:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008594:	7b3b      	ldrb	r3, [r7, #12]
 8008596:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800859a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800859c:	4313      	orrs	r3, r2
 800859e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80085a0:	7b3b      	ldrb	r3, [r7, #12]
 80085a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80085a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80085ac:	7b3b      	ldrb	r3, [r7, #12]
 80085ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80085b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80085b4:	4313      	orrs	r3, r2
 80085b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80085b8:	7b3b      	ldrb	r3, [r7, #12]
 80085ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80085be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80085c4:	7b3b      	ldrb	r3, [r7, #12]
 80085c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80085ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80085cc:	4313      	orrs	r3, r2
 80085ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80085d0:	7b7b      	ldrb	r3, [r7, #13]
 80085d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80085d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80085d8:	4313      	orrs	r3, r2
 80085da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80085dc:	7b7b      	ldrb	r3, [r7, #13]
 80085de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80085e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80085e4:	4313      	orrs	r3, r2
 80085e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80085e8:	7b7b      	ldrb	r3, [r7, #13]
 80085ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80085ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80085f0:	4313      	orrs	r3, r2
 80085f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80085f4:	7b7b      	ldrb	r3, [r7, #13]
 80085f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80085fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008600:	7b7b      	ldrb	r3, [r7, #13]
 8008602:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008606:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008608:	4313      	orrs	r3, r2
 800860a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800860c:	7b7b      	ldrb	r3, [r7, #13]
 800860e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008612:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008614:	4313      	orrs	r3, r2
 8008616:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008618:	7b7b      	ldrb	r3, [r7, #13]
 800861a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800861e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008620:	4313      	orrs	r3, r2
 8008622:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008624:	7b7b      	ldrb	r3, [r7, #13]
 8008626:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800862a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800862c:	4313      	orrs	r3, r2
 800862e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008630:	2b01      	cmp	r3, #1
 8008632:	d164      	bne.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008634:	f107 030b 	add.w	r3, r7, #11
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa82 	bl	8008b44 <lsm6dso_fsm_data_rate_get>
 8008640:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <lsm6dso_gy_data_rate_set+0x100>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	e074      	b.n	8008736 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	2b03      	cmp	r3, #3
 8008650:	d852      	bhi.n	80086f8 <lsm6dso_gy_data_rate_set+0x1ac>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <lsm6dso_gy_data_rate_set+0x10c>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008669 	.word	0x08008669
 800865c:	0800867b 	.word	0x0800867b
 8008660:	08008699 	.word	0x08008699
 8008664:	080086c3 	.word	0x080086c3
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d102      	bne.n	8008674 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008672:	e044      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	75fb      	strb	r3, [r7, #23]
        break;
 8008678:	e041      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008680:	2302      	movs	r3, #2
 8008682:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008684:	e03b      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d102      	bne.n	8008692 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800868c:	2302      	movs	r3, #2
 800868e:	75fb      	strb	r3, [r7, #23]
        break;
 8008690:	e035      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	75fb      	strb	r3, [r7, #23]
        break;
 8008696:	e032      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800869e:	2303      	movs	r3, #3
 80086a0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80086a2:	e02c      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d102      	bne.n	80086b0 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80086aa:	2303      	movs	r3, #3
 80086ac:	75fb      	strb	r3, [r7, #23]
        break;
 80086ae:	e026      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d102      	bne.n	80086bc <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80086b6:	2303      	movs	r3, #3
 80086b8:	75fb      	strb	r3, [r7, #23]
        break;
 80086ba:	e020      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	75fb      	strb	r3, [r7, #23]
        break;
 80086c0:	e01d      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80086c8:	2304      	movs	r3, #4
 80086ca:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80086cc:	e017      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d102      	bne.n	80086da <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80086d4:	2304      	movs	r3, #4
 80086d6:	75fb      	strb	r3, [r7, #23]
        break;
 80086d8:	e011      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d102      	bne.n	80086e6 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80086e0:	2304      	movs	r3, #4
 80086e2:	75fb      	strb	r3, [r7, #23]
        break;
 80086e4:	e00b      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d102      	bne.n	80086f2 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80086ec:	2304      	movs	r3, #4
 80086ee:	75fb      	strb	r3, [r7, #23]
        break;
 80086f0:	e005      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	75fb      	strb	r3, [r7, #23]
        break;
 80086f6:	e002      	b.n	80086fe <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	75fb      	strb	r3, [r7, #23]
        break;
 80086fc:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80086fe:	f107 0208 	add.w	r2, r7, #8
 8008702:	2301      	movs	r3, #1
 8008704:	2111      	movs	r1, #17
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fcc8 	bl	800809c <lsm6dso_read_reg>
 800870c:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	b2da      	uxtb	r2, r3
 8008716:	7a3b      	ldrb	r3, [r7, #8]
 8008718:	f362 1307 	bfi	r3, r2, #4, #4
 800871c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	2301      	movs	r3, #1
 8008724:	2111      	movs	r1, #17
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff fcd0 	bl	80080cc <lsm6dso_write_reg>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	4413      	add	r3, r2
 8008732:	613b      	str	r3, [r7, #16]

  return ret;
 8008734:	693b      	ldr	r3, [r7, #16]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop

08008740 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	2301      	movs	r3, #1
 8008750:	2111      	movs	r1, #17
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fca2 	bl	800809c <lsm6dso_read_reg>
 8008758:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800875a:	7a3b      	ldrb	r3, [r7, #8]
 800875c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b0a      	cmp	r3, #10
 8008764:	d844      	bhi.n	80087f0 <lsm6dso_gy_data_rate_get+0xb0>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <lsm6dso_gy_data_rate_get+0x2c>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008799 	.word	0x08008799
 8008770:	080087a1 	.word	0x080087a1
 8008774:	080087a9 	.word	0x080087a9
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087b9 	.word	0x080087b9
 8008780:	080087c1 	.word	0x080087c1
 8008784:	080087c9 	.word	0x080087c9
 8008788:	080087d1 	.word	0x080087d1
 800878c:	080087d9 	.word	0x080087d9
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087e9 	.word	0x080087e9
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
      break;
 800879e:	e02b      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2201      	movs	r2, #1
 80087a4:	701a      	strb	r2, [r3, #0]
      break;
 80087a6:	e027      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2202      	movs	r2, #2
 80087ac:	701a      	strb	r2, [r3, #0]
      break;
 80087ae:	e023      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2203      	movs	r2, #3
 80087b4:	701a      	strb	r2, [r3, #0]
      break;
 80087b6:	e01f      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2204      	movs	r2, #4
 80087bc:	701a      	strb	r2, [r3, #0]
      break;
 80087be:	e01b      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2205      	movs	r2, #5
 80087c4:	701a      	strb	r2, [r3, #0]
      break;
 80087c6:	e017      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2206      	movs	r2, #6
 80087cc:	701a      	strb	r2, [r3, #0]
      break;
 80087ce:	e013      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2207      	movs	r2, #7
 80087d4:	701a      	strb	r2, [r3, #0]
      break;
 80087d6:	e00f      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2208      	movs	r2, #8
 80087dc:	701a      	strb	r2, [r3, #0]
      break;
 80087de:	e00b      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2209      	movs	r2, #9
 80087e4:	701a      	strb	r2, [r3, #0]
      break;
 80087e6:	e007      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	220a      	movs	r2, #10
 80087ec:	701a      	strb	r2, [r3, #0]
      break;
 80087ee:	e003      	b.n	80087f8 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
      break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop

08008804 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008810:	f107 0208 	add.w	r2, r7, #8
 8008814:	2301      	movs	r3, #1
 8008816:	2112      	movs	r1, #18
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fc3f 	bl	800809c <lsm6dso_read_reg>
 800881e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10f      	bne.n	8008846 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	7a3b      	ldrb	r3, [r7, #8]
 8008830:	f362 1386 	bfi	r3, r2, #6, #1
 8008834:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008836:	f107 0208 	add.w	r2, r7, #8
 800883a:	2301      	movs	r3, #1
 800883c:	2112      	movs	r1, #18
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fc44 	bl	80080cc <lsm6dso_write_reg>
 8008844:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008846:	68fb      	ldr	r3, [r7, #12]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800885a:	f107 020c 	add.w	r2, r7, #12
 800885e:	2306      	movs	r3, #6
 8008860:	2122      	movs	r1, #34	; 0x22
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fc1a 	bl	800809c <lsm6dso_read_reg>
 8008868:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800886a:	7b7b      	ldrb	r3, [r7, #13]
 800886c:	b21a      	sxth	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008878:	b29b      	uxth	r3, r3
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	b29a      	uxth	r2, r3
 800887e:	7b3b      	ldrb	r3, [r7, #12]
 8008880:	b29b      	uxth	r3, r3
 8008882:	4413      	add	r3, r2
 8008884:	b29b      	uxth	r3, r3
 8008886:	b21a      	sxth	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800888c:	7bfa      	ldrb	r2, [r7, #15]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	3302      	adds	r3, #2
 8008892:	b212      	sxth	r2, r2
 8008894:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	3302      	adds	r3, #2
 800889a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3302      	adds	r3, #2
 80088b0:	b212      	sxth	r2, r2
 80088b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80088b4:	7c7a      	ldrb	r2, [r7, #17]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	3304      	adds	r3, #4
 80088ba:	b212      	sxth	r2, r2
 80088bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	7c3b      	ldrb	r3, [r7, #16]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	3304      	adds	r3, #4
 80088d8:	b212      	sxth	r2, r2
 80088da:	801a      	strh	r2, [r3, #0]

  return ret;
 80088dc:	697b      	ldr	r3, [r7, #20]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80088f0:	f107 020c 	add.w	r2, r7, #12
 80088f4:	2306      	movs	r3, #6
 80088f6:	2128      	movs	r1, #40	; 0x28
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff fbcf 	bl	800809c <lsm6dso_read_reg>
 80088fe:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008900:	7b7b      	ldrb	r3, [r7, #13]
 8008902:	b21a      	sxth	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800890e:	b29b      	uxth	r3, r3
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	b29a      	uxth	r2, r3
 8008914:	7b3b      	ldrb	r3, [r7, #12]
 8008916:	b29b      	uxth	r3, r3
 8008918:	4413      	add	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	b21a      	sxth	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008922:	7bfa      	ldrb	r2, [r7, #15]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	3302      	adds	r3, #2
 8008928:	b212      	sxth	r2, r2
 800892a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	3302      	adds	r3, #2
 8008930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008934:	b29b      	uxth	r3, r3
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b29a      	uxth	r2, r3
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	b29b      	uxth	r3, r3
 800893e:	4413      	add	r3, r2
 8008940:	b29a      	uxth	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	3302      	adds	r3, #2
 8008946:	b212      	sxth	r2, r2
 8008948:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800894a:	7c7a      	ldrb	r2, [r7, #17]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	3304      	adds	r3, #4
 8008950:	b212      	sxth	r2, r2
 8008952:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	3304      	adds	r3, #4
 8008958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800895c:	b29b      	uxth	r3, r3
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	b29a      	uxth	r2, r3
 8008962:	7c3b      	ldrb	r3, [r7, #16]
 8008964:	b29b      	uxth	r3, r3
 8008966:	4413      	add	r3, r2
 8008968:	b29a      	uxth	r2, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	3304      	adds	r3, #4
 800896e:	b212      	sxth	r2, r2
 8008970:	801a      	strh	r2, [r3, #0]

  return ret;
 8008972:	697b      	ldr	r3, [r7, #20]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8008988:	2300      	movs	r3, #0
 800898a:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	b2da      	uxtb	r2, r3
 8008994:	7a3b      	ldrb	r3, [r7, #8]
 8008996:	f362 1387 	bfi	r3, r2, #6, #2
 800899a:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800899c:	f107 0208 	add.w	r2, r7, #8
 80089a0:	2301      	movs	r3, #1
 80089a2:	2101      	movs	r1, #1
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fb91 	bl	80080cc <lsm6dso_write_reg>
 80089aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80089ac:	68fb      	ldr	r3, [r7, #12]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80089c0:	2301      	movs	r3, #1
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	210f      	movs	r1, #15
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fb68 	bl	800809c <lsm6dso_read_reg>
 80089cc:	60f8      	str	r0, [r7, #12]

  return ret;
 80089ce:	68fb      	ldr	r3, [r7, #12]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80089e4:	f107 0208 	add.w	r2, r7, #8
 80089e8:	2301      	movs	r3, #1
 80089ea:	2112      	movs	r1, #18
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fb55 	bl	800809c <lsm6dso_read_reg>
 80089f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10f      	bne.n	8008a1a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	7a3b      	ldrb	r3, [r7, #8]
 8008a04:	f362 0382 	bfi	r3, r2, #2, #1
 8008a08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	2301      	movs	r3, #1
 8008a10:	2112      	movs	r1, #18
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fb5a 	bl	80080cc <lsm6dso_write_reg>
 8008a18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008a30:	f107 020c 	add.w	r2, r7, #12
 8008a34:	2301      	movs	r3, #1
 8008a36:	2118      	movs	r1, #24
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fb2f 	bl	800809c <lsm6dso_read_reg>
 8008a3e:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	09db      	lsrs	r3, r3, #7
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	7b3b      	ldrb	r3, [r7, #12]
 8008a4e:	f362 0341 	bfi	r3, r2, #1, #1
 8008a52:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008a54:	f107 020c 	add.w	r2, r7, #12
 8008a58:	2301      	movs	r3, #1
 8008a5a:	2118      	movs	r1, #24
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fb35 	bl	80080cc <lsm6dso_write_reg>
 8008a62:	4602      	mov	r2, r0
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <lsm6dso_i3c_disable_set+0x50>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	e01b      	b.n	8008aac <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008a74:	f107 0210 	add.w	r2, r7, #16
 8008a78:	2301      	movs	r3, #1
 8008a7a:	2162      	movs	r1, #98	; 0x62
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fb0d 	bl	800809c <lsm6dso_read_reg>
 8008a82:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	7c3b      	ldrb	r3, [r7, #16]
 8008a8e:	f362 03c4 	bfi	r3, r2, #3, #2
 8008a92:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008a94:	f107 0210 	add.w	r2, r7, #16
 8008a98:	2301      	movs	r3, #1
 8008a9a:	2162      	movs	r1, #98	; 0x62
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fb15 	bl	80080cc <lsm6dso_write_reg>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]

  return ret;
 8008aaa:	697b      	ldr	r3, [r7, #20]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008ac0:	f107 0208 	add.w	r2, r7, #8
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	210a      	movs	r1, #10
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fae7 	bl	800809c <lsm6dso_read_reg>
 8008ace:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10f      	bne.n	8008af6 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	7a3b      	ldrb	r3, [r7, #8]
 8008ae0:	f362 0302 	bfi	r3, r2, #0, #3
 8008ae4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008ae6:	f107 0208 	add.w	r2, r7, #8
 8008aea:	2301      	movs	r3, #1
 8008aec:	210a      	movs	r1, #10
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff faec 	bl	80080cc <lsm6dso_write_reg>
 8008af4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008b0a:	2102      	movs	r1, #2
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff35 	bl	800897c <lsm6dso_mem_bank_set>
 8008b12:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8008b14:	2302      	movs	r3, #2
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	2146      	movs	r1, #70	; 0x46
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fabe 	bl	800809c <lsm6dso_read_reg>
 8008b20:	4602      	mov	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008b28:	2100      	movs	r1, #0
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ff26 	bl	800897c <lsm6dso_mem_bank_set>
 8008b30:	4602      	mov	r2, r0
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  return ret;
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008b4e:	2102      	movs	r1, #2
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ff13 	bl	800897c <lsm6dso_mem_bank_set>
 8008b56:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <lsm6dso_fsm_data_rate_get+0x1e>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	e03a      	b.n	8008bd8 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008b62:	f107 0208 	add.w	r2, r7, #8
 8008b66:	2301      	movs	r3, #1
 8008b68:	215f      	movs	r1, #95	; 0x5f
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fa96 	bl	800809c <lsm6dso_read_reg>
 8008b70:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d125      	bne.n	8008bc4 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008b78:	7a3b      	ldrb	r3, [r7, #8]
 8008b7a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d81b      	bhi.n	8008bbc <lsm6dso_fsm_data_rate_get+0x78>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <lsm6dso_fsm_data_rate_get+0x48>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008ba5 	.word	0x08008ba5
 8008b94:	08008bad 	.word	0x08008bad
 8008b98:	08008bb5 	.word	0x08008bb5
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
      break;
 8008ba2:	e010      	b.n	8008bc6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	701a      	strb	r2, [r3, #0]
      break;
 8008baa:	e00c      	b.n	8008bc6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	701a      	strb	r2, [r3, #0]
      break;
 8008bb2:	e008      	b.n	8008bc6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	701a      	strb	r2, [r3, #0]
      break;
 8008bba:	e004      	b.n	8008bc6 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
      break;
 8008bc2:	e000      	b.n	8008bc6 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008bc4:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff fed7 	bl	800897c <lsm6dso_mem_bank_set>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  return ret;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d103      	bne.n	8008bf8 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8008bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e034      	b.n	8008c62 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	7b1a      	ldrb	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	695a      	ldr	r2, [r3, #20]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <STTS751_RegisterBusIO+0x8c>)
 8008c34:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a0d      	ldr	r2, [pc, #52]	; (8008c70 <STTS751_RegisterBusIO+0x90>)
 8008c3a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d004      	beq.n	8008c5c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	e002      	b.n	8008c62 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	08009105 	.word	0x08009105
 8008c70:	08009173 	.word	0x08009173

08008c74 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d127      	bne.n	8008cd6 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3320      	adds	r3, #32
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fc54 	bl	800953a <stts751_pin_event_route_set>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	e020      	b.n	8008ce0 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3320      	adds	r3, #32
 8008caa:	2103      	movs	r1, #3
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fbb7 	bl	8009420 <stts751_resolution_set>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8008cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbc:	e010      	b.n	8008ce0 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3320      	adds	r3, #32
 8008cc2:	2180      	movs	r1, #128	; 0x80
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fad5 	bl	8009274 <stts751_temp_data_rate_set>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8008cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd4:	e004      	b.n	8008ce0 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d108      	bne.n	8008d0c <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f877 	bl	8008dee <STTS751_TEMP_Disable>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0a:	e004      	b.n	8008d16 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3320      	adds	r3, #32
 8008d2c:	f107 020c 	add.w	r2, r7, #12
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fc27 	bl	8009586 <stts751_device_id_get>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	e003      	b.n	8008d4c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8008d44:	7b7a      	ldrb	r2, [r7, #13]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2200      	movs	r2, #0
 8008d62:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2200      	movs	r2, #0
 8008d68:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2200      	movs	r2, #0
 8008d74:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008d8a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e012      	b.n	8008de6 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8b6 	bl	8008f3c <STTS751_TEMP_SetOutputDataRate>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	e004      	b.n	8008de6 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e01c      	b.n	8008e3e <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3334      	adds	r3, #52	; 0x34
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f81c 	bl	8008e48 <STTS751_TEMP_GetOutputDataRate>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	e010      	b.n	8008e3e <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3320      	adds	r3, #32
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fa26 	bl	8009274 <stts751_temp_data_rate_set>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	e004      	b.n	8008e3e <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3320      	adds	r3, #32
 8008e5a:	f107 020b 	add.w	r2, r7, #11
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fa5d 	bl	8009320 <stts751_temp_data_rate_get>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	e060      	b.n	8008f34 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8008e72:	7afb      	ldrb	r3, [r7, #11]
 8008e74:	2b90      	cmp	r3, #144	; 0x90
 8008e76:	d021      	beq.n	8008ebc <STTS751_TEMP_GetOutputDataRate+0x74>
 8008e78:	2b90      	cmp	r3, #144	; 0x90
 8008e7a:	dc56      	bgt.n	8008f2a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	dc1b      	bgt.n	8008eb8 <STTS751_TEMP_GetOutputDataRate+0x70>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db52      	blt.n	8008f2a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d850      	bhi.n	8008f2a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ec7 	.word	0x08008ec7
 8008e94:	08008ed1 	.word	0x08008ed1
 8008e98:	08008edb 	.word	0x08008edb
 8008e9c:	08008ee5 	.word	0x08008ee5
 8008ea0:	08008eef 	.word	0x08008eef
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008f03 	.word	0x08008f03
 8008eac:	08008f0d 	.word	0x08008f0d
 8008eb0:	08008f17 	.word	0x08008f17
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	2b80      	cmp	r3, #128	; 0x80
 8008eba:	d136      	bne.n	8008f2a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
      break;
 8008ec4:	e035      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008ecc:	601a      	str	r2, [r3, #0]
      break;
 8008ece:	e030      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8008ed6:	601a      	str	r2, [r3, #0]
      break;
 8008ed8:	e02b      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008ee0:	601a      	str	r2, [r3, #0]
      break;
 8008ee2:	e026      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008eea:	601a      	str	r2, [r3, #0]
      break;
 8008eec:	e021      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ef4:	601a      	str	r2, [r3, #0]
      break;
 8008ef6:	e01c      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008efe:	601a      	str	r2, [r3, #0]
      break;
 8008f00:	e017      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008f08:	601a      	str	r2, [r3, #0]
      break;
 8008f0a:	e012      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8008f12:	601a      	str	r2, [r3, #0]
      break;
 8008f14:	e00d      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8008f1c:	601a      	str	r2, [r3, #0]
      break;
 8008f1e:	e008      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008f26:	601a      	str	r2, [r3, #0]
      break;
 8008f28:	e003      	b.n	8008f32 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8008f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2e:	60fb      	str	r3, [r7, #12]
      break;
 8008f30:	bf00      	nop
  }

  return ret;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3320      	adds	r3, #32
 8008f4c:	f107 020e 	add.w	r2, r7, #14
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fa8a 	bl	800946c <stts751_resolution_get>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8008f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f62:	e0a5      	b.n	80090b0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008f64:	edd7 7a00 	vldr	s15, [r7]
 8008f68:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008f6c:	eef4 7a47 	vcmp.f32	s15, s14
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d10e      	bne.n	8008f94 <STTS751_TEMP_SetOutputDataRate+0x58>
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d10b      	bne.n	8008f94 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3320      	adds	r3, #32
 8008f80:	2101      	movs	r1, #1
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fa4c 	bl	8009420 <stts751_resolution_set>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	e08d      	b.n	80090b0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008f94:	edd7 7a00 	vldr	s15, [r7]
 8008f98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80090b8 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008f9c:	eef4 7a47 	vcmp.f32	s15, s14
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	d111      	bne.n	8008fca <STTS751_TEMP_SetOutputDataRate+0x8e>
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d002      	beq.n	8008fb2 <STTS751_TEMP_SetOutputDataRate+0x76>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d10b      	bne.n	8008fca <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3320      	adds	r3, #32
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fa31 	bl	8009420 <stts751_resolution_set>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	e072      	b.n	80090b0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008fca:	edd7 7a00 	vldr	s15, [r7]
 8008fce:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80090bc <STTS751_TEMP_SetOutputDataRate+0x180>
 8008fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	d801      	bhi.n	8008fe0 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e058      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008fe0:	edd7 7a00 	vldr	s15, [r7]
 8008fe4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff0:	d801      	bhi.n	8008ff6 <STTS751_TEMP_SetOutputDataRate+0xba>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e04d      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008ff6:	edd7 7a00 	vldr	s15, [r7]
 8008ffa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009006:	d801      	bhi.n	800900c <STTS751_TEMP_SetOutputDataRate+0xd0>
 8009008:	2302      	movs	r3, #2
 800900a:	e042      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 800900c:	edd7 7a00 	vldr	s15, [r7]
 8009010:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901c:	d801      	bhi.n	8009022 <STTS751_TEMP_SetOutputDataRate+0xe6>
 800901e:	2303      	movs	r3, #3
 8009020:	e037      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8009022:	edd7 7a00 	vldr	s15, [r7]
 8009026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800902a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800902e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009032:	d801      	bhi.n	8009038 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8009034:	2304      	movs	r3, #4
 8009036:	e02c      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8009038:	edd7 7a00 	vldr	s15, [r7]
 800903c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009048:	d801      	bhi.n	800904e <STTS751_TEMP_SetOutputDataRate+0x112>
 800904a:	2305      	movs	r3, #5
 800904c:	e021      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 800904e:	edd7 7a00 	vldr	s15, [r7]
 8009052:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800905a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905e:	d801      	bhi.n	8009064 <STTS751_TEMP_SetOutputDataRate+0x128>
 8009060:	2306      	movs	r3, #6
 8009062:	e016      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8009064:	edd7 7a00 	vldr	s15, [r7]
 8009068:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800906c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009074:	d801      	bhi.n	800907a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8009076:	2307      	movs	r3, #7
 8009078:	e00b      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 800907a:	edd7 7a00 	vldr	s15, [r7]
 800907e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	d801      	bhi.n	8009090 <STTS751_TEMP_SetOutputDataRate+0x154>
 800908c:	2308      	movs	r3, #8
 800908e:	e000      	b.n	8009092 <STTS751_TEMP_SetOutputDataRate+0x156>
 8009090:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8009092:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3320      	adds	r3, #32
 8009098:	7bfa      	ldrb	r2, [r7, #15]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f8e9 	bl	8009274 <stts751_temp_data_rate_set>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80090a8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ac:	e000      	b.n	80090b0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	42000000 	.word	0x42000000
 80090bc:	3d800000 	.word	0x3d800000

080090c0 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3320      	adds	r3, #32
 80090ce:	f107 020e 	add.w	r2, r7, #14
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fa01 	bl	80094dc <stts751_temperature_raw_get>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80090e0:	f04f 33ff 	mov.w	r3, #4294967295
 80090e4:	e00a      	b.n	80090fc <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80090e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f8a8 	bl	8009240 <stts751_from_lsb_to_celsius>
 80090f0:	eef0 7a40 	vmov.f32	s15, s0
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	461a      	mov	r2, r3
 8009110:	460b      	mov	r3, r1
 8009112:	72fb      	strb	r3, [r7, #11]
 8009114:	4613      	mov	r3, r2
 8009116:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11f      	bne.n	8009168 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009128:	2300      	movs	r3, #0
 800912a:	83fb      	strh	r3, [r7, #30]
 800912c:	e018      	b.n	8009160 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	695c      	ldr	r4, [r3, #20]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	7b1b      	ldrb	r3, [r3, #12]
 8009136:	b298      	uxth	r0, r3
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	b29a      	uxth	r2, r3
 800913c:	8bfb      	ldrh	r3, [r7, #30]
 800913e:	4413      	add	r3, r2
 8009140:	b299      	uxth	r1, r3
 8009142:	8bfb      	ldrh	r3, [r7, #30]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	441a      	add	r2, r3
 8009148:	2301      	movs	r3, #1
 800914a:	47a0      	blx	r4
 800914c:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8009154:	f04f 33ff 	mov.w	r3, #4294967295
 8009158:	e007      	b.n	800916a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800915a:	8bfb      	ldrh	r3, [r7, #30]
 800915c:	3301      	adds	r3, #1
 800915e:	83fb      	strh	r3, [r7, #30]
 8009160:	8bfa      	ldrh	r2, [r7, #30]
 8009162:	893b      	ldrh	r3, [r7, #8]
 8009164:	429a      	cmp	r2, r3
 8009166:	d3e2      	bcc.n	800912e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009168:	69bb      	ldr	r3, [r7, #24]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3724      	adds	r7, #36	; 0x24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd90      	pop	{r4, r7, pc}

08009172 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009172:	b590      	push	{r4, r7, lr}
 8009174:	b089      	sub	sp, #36	; 0x24
 8009176:	af00      	add	r7, sp, #0
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	461a      	mov	r2, r3
 800917e:	460b      	mov	r3, r1
 8009180:	72fb      	strb	r3, [r7, #11]
 8009182:	4613      	mov	r3, r2
 8009184:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d11f      	bne.n	80091d6 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009196:	2300      	movs	r3, #0
 8009198:	83fb      	strh	r3, [r7, #30]
 800919a:	e018      	b.n	80091ce <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	691c      	ldr	r4, [r3, #16]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	7b1b      	ldrb	r3, [r3, #12]
 80091a4:	b298      	uxth	r0, r3
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	8bfb      	ldrh	r3, [r7, #30]
 80091ac:	4413      	add	r3, r2
 80091ae:	b299      	uxth	r1, r3
 80091b0:	8bfb      	ldrh	r3, [r7, #30]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	2301      	movs	r3, #1
 80091b8:	47a0      	blx	r4
 80091ba:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80091c2:	f04f 33ff 	mov.w	r3, #4294967295
 80091c6:	e007      	b.n	80091d8 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80091c8:	8bfb      	ldrh	r3, [r7, #30]
 80091ca:	3301      	adds	r3, #1
 80091cc:	83fb      	strh	r3, [r7, #30]
 80091ce:	8bfa      	ldrh	r2, [r7, #30]
 80091d0:	893b      	ldrh	r3, [r7, #8]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d3e2      	bcc.n	800919c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80091d6:	69bb      	ldr	r3, [r7, #24]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3724      	adds	r7, #36	; 0x24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd90      	pop	{r4, r7, pc}

080091e0 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	72fb      	strb	r3, [r7, #11]
 80091f0:	4613      	mov	r3, r2
 80091f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685c      	ldr	r4, [r3, #4]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68d8      	ldr	r0, [r3, #12]
 80091fc:	893b      	ldrh	r3, [r7, #8]
 80091fe:	7af9      	ldrb	r1, [r7, #11]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	47a0      	blx	r4
 8009204:	6178      	str	r0, [r7, #20]

  return ret;
 8009206:	697b      	ldr	r3, [r7, #20]
}
 8009208:	4618      	mov	r0, r3
 800920a:	371c      	adds	r7, #28
 800920c:	46bd      	mov	sp, r7
 800920e:	bd90      	pop	{r4, r7, pc}

08009210 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	461a      	mov	r2, r3
 800921c:	460b      	mov	r3, r1
 800921e:	72fb      	strb	r3, [r7, #11]
 8009220:	4613      	mov	r3, r2
 8009222:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681c      	ldr	r4, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68d8      	ldr	r0, [r3, #12]
 800922c:	893b      	ldrh	r3, [r7, #8]
 800922e:	7af9      	ldrb	r1, [r7, #11]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	47a0      	blx	r4
 8009234:	6178      	str	r0, [r7, #20]

  return ret;
 8009236:	697b      	ldr	r3, [r7, #20]
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800924a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009256:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009270 <stts751_from_lsb_to_celsius+0x30>
 800925a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800925e:	eef0 7a66 	vmov.f32	s15, s13
}
 8009262:	eeb0 0a67 	vmov.f32	s0, s15
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	43800000 	.word	0x43800000

08009274 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8009280:	23aa      	movs	r3, #170	; 0xaa
 8009282:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8009284:	f107 020c 	add.w	r2, r7, #12
 8009288:	2301      	movs	r3, #1
 800928a:	2104      	movs	r1, #4
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ffa7 	bl	80091e0 <stts751_read_reg>
 8009292:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10f      	bne.n	80092ba <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	7b3b      	ldrb	r3, [r7, #12]
 80092a4:	f362 0303 	bfi	r3, r2, #0, #4
 80092a8:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80092aa:	f107 020c 	add.w	r2, r7, #12
 80092ae:	2301      	movs	r3, #1
 80092b0:	2104      	movs	r1, #4
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff ffac 	bl	8009210 <stts751_write_reg>
 80092b8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d107      	bne.n	80092d0 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80092c0:	f107 0210 	add.w	r2, r7, #16
 80092c4:	2301      	movs	r3, #1
 80092c6:	2103      	movs	r1, #3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff89 	bl	80091e0 <stts751_read_reg>
 80092ce:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d111      	bne.n	80092fa <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	09db      	lsrs	r3, r3, #7
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	7c3b      	ldrb	r3, [r7, #16]
 80092e4:	f362 1386 	bfi	r3, r2, #6, #1
 80092e8:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80092ea:	f107 0210 	add.w	r2, r7, #16
 80092ee:	2301      	movs	r3, #1
 80092f0:	2103      	movs	r1, #3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff ff8c 	bl	8009210 <stts751_write_reg>
 80092f8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10a      	bne.n	8009316 <stts751_temp_data_rate_set+0xa2>
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	2b90      	cmp	r3, #144	; 0x90
 8009304:	d107      	bne.n	8009316 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8009306:	f107 020b 	add.w	r2, r7, #11
 800930a:	2301      	movs	r3, #1
 800930c:	210f      	movs	r1, #15
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ff7e 	bl	8009210 <stts751_write_reg>
 8009314:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8009316:	697b      	ldr	r3, [r7, #20]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800932a:	f107 0210 	add.w	r2, r7, #16
 800932e:	2301      	movs	r3, #1
 8009330:	2104      	movs	r1, #4
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff ff54 	bl	80091e0 <stts751_read_reg>
 8009338:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d107      	bne.n	8009350 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8009340:	f107 020c 	add.w	r2, r7, #12
 8009344:	2301      	movs	r3, #1
 8009346:	2103      	movs	r1, #3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ff49 	bl	80091e0 <stts751_read_reg>
 800934e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8009350:	7b3b      	ldrb	r3, [r7, #12]
 8009352:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	01db      	lsls	r3, r3, #7
 800935a:	7c3a      	ldrb	r2, [r7, #16]
 800935c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	4413      	add	r3, r2
 8009364:	2b90      	cmp	r3, #144	; 0x90
 8009366:	d025      	beq.n	80093b4 <stts751_temp_data_rate_get+0x94>
 8009368:	2b90      	cmp	r3, #144	; 0x90
 800936a:	dc4f      	bgt.n	800940c <stts751_temp_data_rate_get+0xec>
 800936c:	2b09      	cmp	r3, #9
 800936e:	dc1b      	bgt.n	80093a8 <stts751_temp_data_rate_get+0x88>
 8009370:	2b00      	cmp	r3, #0
 8009372:	db4b      	blt.n	800940c <stts751_temp_data_rate_get+0xec>
 8009374:	2b09      	cmp	r3, #9
 8009376:	d849      	bhi.n	800940c <stts751_temp_data_rate_get+0xec>
 8009378:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <stts751_temp_data_rate_get+0x60>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	080093bd 	.word	0x080093bd
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093cd 	.word	0x080093cd
 800938c:	080093d5 	.word	0x080093d5
 8009390:	080093dd 	.word	0x080093dd
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093ed 	.word	0x080093ed
 800939c:	080093f5 	.word	0x080093f5
 80093a0:	080093fd 	.word	0x080093fd
 80093a4:	08009405 	.word	0x08009405
 80093a8:	2b80      	cmp	r3, #128	; 0x80
 80093aa:	d12f      	bne.n	800940c <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2280      	movs	r2, #128	; 0x80
 80093b0:	701a      	strb	r2, [r3, #0]
      break;
 80093b2:	e02f      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2290      	movs	r2, #144	; 0x90
 80093b8:	701a      	strb	r2, [r3, #0]
      break;
 80093ba:	e02b      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
      break;
 80093c2:	e027      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
      break;
 80093ca:	e023      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2202      	movs	r2, #2
 80093d0:	701a      	strb	r2, [r3, #0]
      break;
 80093d2:	e01f      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2203      	movs	r2, #3
 80093d8:	701a      	strb	r2, [r3, #0]
      break;
 80093da:	e01b      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2204      	movs	r2, #4
 80093e0:	701a      	strb	r2, [r3, #0]
      break;
 80093e2:	e017      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2205      	movs	r2, #5
 80093e8:	701a      	strb	r2, [r3, #0]
      break;
 80093ea:	e013      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2206      	movs	r2, #6
 80093f0:	701a      	strb	r2, [r3, #0]
      break;
 80093f2:	e00f      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2207      	movs	r2, #7
 80093f8:	701a      	strb	r2, [r3, #0]
      break;
 80093fa:	e00b      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2208      	movs	r2, #8
 8009400:	701a      	strb	r2, [r3, #0]
      break;
 8009402:	e007      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2209      	movs	r2, #9
 8009408:	701a      	strb	r2, [r3, #0]
      break;
 800940a:	e003      	b.n	8009414 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2280      	movs	r2, #128	; 0x80
 8009410:	701a      	strb	r2, [r3, #0]
      break;
 8009412:	bf00      	nop
  }

  return ret;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop

08009420 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800942c:	f107 0208 	add.w	r2, r7, #8
 8009430:	2301      	movs	r3, #1
 8009432:	2103      	movs	r1, #3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fed3 	bl	80091e0 <stts751_read_reg>
 800943a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10f      	bne.n	8009462 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	b2da      	uxtb	r2, r3
 800944a:	7a3b      	ldrb	r3, [r7, #8]
 800944c:	f362 0383 	bfi	r3, r2, #2, #2
 8009450:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009452:	f107 0208 	add.w	r2, r7, #8
 8009456:	2301      	movs	r3, #1
 8009458:	2103      	movs	r1, #3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fed8 	bl	8009210 <stts751_write_reg>
 8009460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009462:	68fb      	ldr	r3, [r7, #12]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009476:	f107 0208 	add.w	r2, r7, #8
 800947a:	2301      	movs	r3, #1
 800947c:	2103      	movs	r1, #3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff feae 	bl	80091e0 <stts751_read_reg>
 8009484:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8009486:	7a3b      	ldrb	r3, [r7, #8]
 8009488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d81a      	bhi.n	80094c8 <stts751_resolution_get+0x5c>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <stts751_resolution_get+0x2c>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094a9 	.word	0x080094a9
 80094a4:	080094c1 	.word	0x080094c1
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2202      	movs	r2, #2
 80094ac:	701a      	strb	r2, [r3, #0]
      break;
 80094ae:	e00f      	b.n	80094d0 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	701a      	strb	r2, [r3, #0]
      break;
 80094b6:	e00b      	b.n	80094d0 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
      break;
 80094be:	e007      	b.n	80094d0 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2203      	movs	r2, #3
 80094c4:	701a      	strb	r2, [r3, #0]
      break;
 80094c6:	e003      	b.n	80094d0 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2202      	movs	r2, #2
 80094cc:	701a      	strb	r2, [r3, #0]
      break;
 80094ce:	bf00      	nop
  }

  return ret;
 80094d0:	68fb      	ldr	r3, [r7, #12]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 80094e6:	f107 0308 	add.w	r3, r7, #8
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	2301      	movs	r3, #1
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fe75 	bl	80091e0 <stts751_read_reg>
 80094f6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d118      	bne.n	8009530 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80094fe:	f107 0208 	add.w	r2, r7, #8
 8009502:	2301      	movs	r3, #1
 8009504:	2102      	movs	r1, #2
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff fe6a 	bl	80091e0 <stts751_read_reg>
 800950c:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800950e:	7a7b      	ldrb	r3, [r7, #9]
 8009510:	b21a      	sxth	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800951c:	b29b      	uxth	r3, r3
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	b29a      	uxth	r2, r3
 8009522:	7a3b      	ldrb	r3, [r7, #8]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4413      	add	r3, r2
 8009528:	b29b      	uxth	r3, r3
 800952a:	b21a      	sxth	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009546:	f107 0208 	add.w	r2, r7, #8
 800954a:	2301      	movs	r3, #1
 800954c:	2103      	movs	r1, #3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fe46 	bl	80091e0 <stts751_read_reg>
 8009554:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10f      	bne.n	800957c <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	b2da      	uxtb	r2, r3
 8009564:	7a3b      	ldrb	r3, [r7, #8]
 8009566:	f362 13c7 	bfi	r3, r2, #7, #1
 800956a:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800956c:	f107 0208 	add.w	r2, r7, #8
 8009570:	2301      	movs	r3, #1
 8009572:	2103      	movs	r1, #3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff fe4b 	bl	8009210 <stts751_write_reg>
 800957a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800957c:	68fb      	ldr	r3, [r7, #12]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	2301      	movs	r3, #1
 8009594:	21fd      	movs	r1, #253	; 0xfd
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fe22 	bl	80091e0 <stts751_read_reg>
 800959c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d107      	bne.n	80095b4 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	2301      	movs	r3, #1
 80095aa:	21fe      	movs	r1, #254	; 0xfe
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff fe17 	bl	80091e0 <stts751_read_reg>
 80095b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d107      	bne.n	80095ca <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	1c9a      	adds	r2, r3, #2
 80095be:	2301      	movs	r3, #1
 80095c0:	21ff      	movs	r1, #255	; 0xff
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fe0c 	bl	80091e0 <stts751_read_reg>
 80095c8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08c      	sub	sp, #48	; 0x30
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80095de:	2300      	movs	r3, #0
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 80095e2:	2301      	movs	r3, #1
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d07c      	beq.n	80096ea <IKS01A3_ENV_SENSOR_Init+0x116>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	f200 80b2 	bhi.w	800975c <IKS01A3_ENV_SENSOR_Init+0x188>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <IKS01A3_ENV_SENSOR_Init+0x32>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d039      	beq.n	8009678 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8009604:	e0aa      	b.n	800975c <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8009606:	6838      	ldr	r0, [r7, #0]
 8009608:	f000 f95e 	bl	80098c8 <HTS221_0_Probe>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	e0df      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009618:	4a71      	ldr	r2, [pc, #452]	; (80097e0 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	4970      	ldr	r1, [pc, #448]	; (80097e4 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800962a:	f107 0108 	add.w	r1, r7, #8
 800962e:	4610      	mov	r0, r2
 8009630:	4798      	blx	r3
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009638:	f06f 0306 	mvn.w	r3, #6
 800963c:	e0cc      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800963e:	7a3b      	ldrb	r3, [r7, #8]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d103      	bne.n	800964c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800964c:	7abb      	ldrb	r3, [r7, #10]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d103      	bne.n	800965a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	f043 0304 	orr.w	r3, r3, #4
 8009658:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800965a:	7a7b      	ldrb	r3, [r7, #9]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d103      	bne.n	8009668 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	f043 0302 	orr.w	r3, r3, #2
 8009666:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d17a      	bne.n	8009764 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	f043 0308 	orr.w	r3, r3, #8
 8009674:	623b      	str	r3, [r7, #32]
      }
      break;
 8009676:	e075      	b.n	8009764 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009678:	6838      	ldr	r0, [r7, #0]
 800967a:	f000 f9ef 	bl	8009a5c <LPS22HH_0_Probe>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	e0a6      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800968a:	4a55      	ldr	r2, [pc, #340]	; (80097e0 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	4953      	ldr	r1, [pc, #332]	; (80097e4 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80096aa:	f06f 0306 	mvn.w	r3, #6
 80096ae:	e093      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80096b0:	7a3b      	ldrb	r3, [r7, #8]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d103      	bne.n	80096be <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80096be:	7abb      	ldrb	r3, [r7, #10]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d103      	bne.n	80096cc <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	f043 0304 	orr.w	r3, r3, #4
 80096ca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80096cc:	7a7b      	ldrb	r3, [r7, #9]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d103      	bne.n	80096da <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f043 0302 	orr.w	r3, r3, #2
 80096d8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d143      	bne.n	8009768 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	f043 0308 	orr.w	r3, r3, #8
 80096e6:	623b      	str	r3, [r7, #32]
      }
      break;
 80096e8:	e03e      	b.n	8009768 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80096ea:	6838      	ldr	r0, [r7, #0]
 80096ec:	f000 fa82 	bl	8009bf4 <STTS751_0_Probe>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 80096f6:	f04f 33ff 	mov.w	r3, #4294967295
 80096fa:	e06d      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80096fc:	4a38      	ldr	r2, [pc, #224]	; (80097e0 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	4937      	ldr	r1, [pc, #220]	; (80097e4 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800970e:	f107 0108 	add.w	r1, r7, #8
 8009712:	4610      	mov	r0, r2
 8009714:	4798      	blx	r3
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800971c:	f06f 0306 	mvn.w	r3, #6
 8009720:	e05a      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8009722:	7a3b      	ldrb	r3, [r7, #8]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d103      	bne.n	8009730 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8009730:	7abb      	ldrb	r3, [r7, #10]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d103      	bne.n	800973e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	f043 0304 	orr.w	r3, r3, #4
 800973c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800973e:	7a7b      	ldrb	r3, [r7, #9]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d103      	bne.n	800974c <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	f043 0302 	orr.w	r3, r3, #2
 800974a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d10c      	bne.n	800976c <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	f043 0308 	orr.w	r3, r3, #8
 8009758:	623b      	str	r3, [r7, #32]
      }
      break;
 800975a:	e007      	b.n	800976c <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800975c:	f06f 0301 	mvn.w	r3, #1
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009762:	e004      	b.n	800976e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009764:	bf00      	nop
 8009766:	e002      	b.n	800976e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009768:	bf00      	nop
 800976a:	e000      	b.n	800976e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800976c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	e02f      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009778:	2300      	movs	r3, #0
 800977a:	627b      	str	r3, [r7, #36]	; 0x24
 800977c:	e028      	b.n	80097d0 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	4013      	ands	r3, r2
 8009784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009786:	429a      	cmp	r2, r3
 8009788:	d11c      	bne.n	80097c4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 800978a:	6a3a      	ldr	r2, [r7, #32]
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	4013      	ands	r3, r2
 8009790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009792:	429a      	cmp	r2, r3
 8009794:	d116      	bne.n	80097c4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009796:	4a14      	ldr	r2, [pc, #80]	; (80097e8 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800979e:	4913      	ldr	r1, [pc, #76]	; (80097ec <IKS01A3_ENV_SENSOR_Init+0x218>)
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	490d      	ldr	r1, [pc, #52]	; (80097e4 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80097be:	f06f 0304 	mvn.w	r3, #4
 80097c2:	e009      	b.n	80097d8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	3301      	adds	r3, #1
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d9d3      	bls.n	800977e <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3730      	adds	r7, #48	; 0x30
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	200004b8 	.word	0x200004b8
 80097e4:	2000047c 	.word	0x2000047c
 80097e8:	2000015c 	.word	0x2000015c
 80097ec:	20000488 	.word	0x20000488

080097f0 <IKS01A3_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d903      	bls.n	8009808 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009800:	f06f 0301 	mvn.w	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e014      	b.n	8009832 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009808:	4a0c      	ldr	r2, [pc, #48]	; (800983c <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	490b      	ldr	r1, [pc, #44]	; (8009840 <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009826:	f06f 0306 	mvn.w	r3, #6
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	e001      	b.n	8009832 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009832:	68fb      	ldr	r3, [r7, #12]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	200004b8 	.word	0x200004b8
 8009840:	2000047c 	.word	0x2000047c

08009844 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d903      	bls.n	800985e <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009856:	f06f 0301 	mvn.w	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e027      	b.n	80098ae <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800985e:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4013      	ands	r3, r2
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	429a      	cmp	r2, r3
 800986e:	d11b      	bne.n	80098a8 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8009870:	4a12      	ldr	r2, [pc, #72]	; (80098bc <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009878:	4911      	ldr	r1, [pc, #68]	; (80098c0 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	0092      	lsls	r2, r2, #2
 800987e:	4413      	add	r3, r2
 8009880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	490f      	ldr	r1, [pc, #60]	; (80098c4 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800989a:	f06f 0304 	mvn.w	r3, #4
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	e005      	b.n	80098ae <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	e002      	b.n	80098ae <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80098a8:	f06f 0301 	mvn.w	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80098ae:	697b      	ldr	r3, [r7, #20]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	200004c4 	.word	0x200004c4
 80098bc:	2000015c 	.word	0x2000015c
 80098c0:	20000488 	.word	0x20000488
 80098c4:	2000047c 	.word	0x2000047c

080098c8 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b092      	sub	sp, #72	; 0x48
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80098d4:	2300      	movs	r3, #0
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80098d8:	23bf      	movs	r3, #191	; 0xbf
 80098da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80098de:	4b51      	ldr	r3, [pc, #324]	; (8009a24 <HTS221_0_Probe+0x15c>)
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80098e2:	4b51      	ldr	r3, [pc, #324]	; (8009a28 <HTS221_0_Probe+0x160>)
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80098e6:	4b51      	ldr	r3, [pc, #324]	; (8009a2c <HTS221_0_Probe+0x164>)
 80098e8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80098ea:	4b51      	ldr	r3, [pc, #324]	; (8009a30 <HTS221_0_Probe+0x168>)
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80098ee:	4b51      	ldr	r3, [pc, #324]	; (8009a34 <HTS221_0_Probe+0x16c>)
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80098f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f6:	4619      	mov	r1, r3
 80098f8:	484f      	ldr	r0, [pc, #316]	; (8009a38 <HTS221_0_Probe+0x170>)
 80098fa:	f7f9 fa6d 	bl	8002dd8 <HTS221_RegisterBusIO>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009904:	f06f 0306 	mvn.w	r3, #6
 8009908:	647b      	str	r3, [r7, #68]	; 0x44
 800990a:	e085      	b.n	8009a18 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800990c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8009910:	4619      	mov	r1, r3
 8009912:	4849      	ldr	r0, [pc, #292]	; (8009a38 <HTS221_0_Probe+0x170>)
 8009914:	f7f9 fae9 	bl	8002eea <HTS221_ReadID>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800991e:	f06f 0306 	mvn.w	r3, #6
 8009922:	647b      	str	r3, [r7, #68]	; 0x44
 8009924:	e078      	b.n	8009a18 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8009926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800992a:	2bbc      	cmp	r3, #188	; 0xbc
 800992c:	d003      	beq.n	8009936 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800992e:	f06f 0306 	mvn.w	r3, #6
 8009932:	647b      	str	r3, [r7, #68]	; 0x44
 8009934:	e070      	b.n	8009a18 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4619      	mov	r1, r3
 800993c:	483e      	ldr	r0, [pc, #248]	; (8009a38 <HTS221_0_Probe+0x170>)
 800993e:	f7f9 faeb 	bl	8002f18 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8009942:	7a3b      	ldrb	r3, [r7, #8]
 8009944:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8009946:	7a7b      	ldrb	r3, [r7, #9]
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800994c:	7abb      	ldrb	r3, [r7, #10]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8009958:	4a38      	ldr	r2, [pc, #224]	; (8009a3c <HTS221_0_Probe+0x174>)
 800995a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800995c:	4b38      	ldr	r3, [pc, #224]	; (8009a40 <HTS221_0_Probe+0x178>)
 800995e:	4a36      	ldr	r2, [pc, #216]	; (8009a38 <HTS221_0_Probe+0x170>)
 8009960:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8009962:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <HTS221_0_Probe+0x17c>)
 8009964:	4a38      	ldr	r2, [pc, #224]	; (8009a48 <HTS221_0_Probe+0x180>)
 8009966:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800996a:	2b00      	cmp	r3, #0
 800996c:	d11d      	bne.n	80099aa <HTS221_0_Probe+0xe2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d018      	beq.n	80099aa <HTS221_0_Probe+0xe2>
 8009978:	7a3b      	ldrb	r3, [r7, #8]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d115      	bne.n	80099aa <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800997e:	4b33      	ldr	r3, [pc, #204]	; (8009a4c <HTS221_0_Probe+0x184>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4a33      	ldr	r2, [pc, #204]	; (8009a50 <HTS221_0_Probe+0x188>)
 8009984:	4933      	ldr	r1, [pc, #204]	; (8009a54 <HTS221_0_Probe+0x18c>)
 8009986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800998a:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <HTS221_0_Probe+0x17c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a2b      	ldr	r2, [pc, #172]	; (8009a40 <HTS221_0_Probe+0x178>)
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800999e:	f06f 0304 	mvn.w	r3, #4
 80099a2:	647b      	str	r3, [r7, #68]	; 0x44
 80099a4:	e001      	b.n	80099aa <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80099aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11d      	bne.n	80099ec <HTS221_0_Probe+0x124>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d018      	beq.n	80099ec <HTS221_0_Probe+0x124>
 80099ba:	7abb      	ldrb	r3, [r7, #10]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d115      	bne.n	80099ec <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80099c0:	4b22      	ldr	r3, [pc, #136]	; (8009a4c <HTS221_0_Probe+0x184>)
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <HTS221_0_Probe+0x188>)
 80099c6:	4924      	ldr	r1, [pc, #144]	; (8009a58 <HTS221_0_Probe+0x190>)
 80099c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80099cc:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <HTS221_0_Probe+0x17c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <HTS221_0_Probe+0x178>)
 80099d4:	6812      	ldr	r2, [r2, #0]
 80099d6:	4610      	mov	r0, r2
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099e0:	f06f 0304 	mvn.w	r3, #4
 80099e4:	647b      	str	r3, [r7, #68]	; 0x44
 80099e6:	e001      	b.n	80099ec <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80099ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <HTS221_0_Probe+0x13a>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80099fc:	f06f 0304 	mvn.w	r3, #4
 8009a00:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8009a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d107      	bne.n	8009a18 <HTS221_0_Probe+0x150>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f003 0308 	and.w	r3, r3, #8
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a12:	f06f 0304 	mvn.w	r3, #4
 8009a16:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8009a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3748      	adds	r7, #72	; 0x48
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	08000eb1 	.word	0x08000eb1
 8009a28:	08000f2d 	.word	0x08000f2d
 8009a2c:	08000fe1 	.word	0x08000fe1
 8009a30:	08000f7d 	.word	0x08000f7d
 8009a34:	08001045 	.word	0x08001045
 8009a38:	200004d0 	.word	0x200004d0
 8009a3c:	200004c4 	.word	0x200004c4
 8009a40:	2000047c 	.word	0x2000047c
 8009a44:	200004b8 	.word	0x200004b8
 8009a48:	20000008 	.word	0x20000008
 8009a4c:	2000015c 	.word	0x2000015c
 8009a50:	20000488 	.word	0x20000488
 8009a54:	2000002c 	.word	0x2000002c
 8009a58:	20000018 	.word	0x20000018

08009a5c <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b092      	sub	sp, #72	; 0x48
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8009a68:	2300      	movs	r3, #0
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8009a6c:	23bb      	movs	r3, #187	; 0xbb
 8009a6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a72:	4b52      	ldr	r3, [pc, #328]	; (8009bbc <LPS22HH_0_Probe+0x160>)
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009a76:	4b52      	ldr	r3, [pc, #328]	; (8009bc0 <LPS22HH_0_Probe+0x164>)
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009a7a:	4b52      	ldr	r3, [pc, #328]	; (8009bc4 <LPS22HH_0_Probe+0x168>)
 8009a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009a7e:	4b52      	ldr	r3, [pc, #328]	; (8009bc8 <LPS22HH_0_Probe+0x16c>)
 8009a80:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009a82:	4b52      	ldr	r3, [pc, #328]	; (8009bcc <LPS22HH_0_Probe+0x170>)
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8009a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4850      	ldr	r0, [pc, #320]	; (8009bd0 <LPS22HH_0_Probe+0x174>)
 8009a8e:	f7fc fa61 	bl	8005f54 <LPS22HH_RegisterBusIO>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a98:	f06f 0306 	mvn.w	r3, #6
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a9e:	e087      	b.n	8009bb0 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8009aa0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	484a      	ldr	r0, [pc, #296]	; (8009bd0 <LPS22HH_0_Probe+0x174>)
 8009aa8:	f7fc fafd 	bl	80060a6 <LPS22HH_ReadID>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ab2:	f06f 0306 	mvn.w	r3, #6
 8009ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ab8:	e07a      	b.n	8009bb0 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8009aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009abe:	2bb3      	cmp	r3, #179	; 0xb3
 8009ac0:	d003      	beq.n	8009aca <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ac2:	f06f 0306 	mvn.w	r3, #6
 8009ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ac8:	e072      	b.n	8009bb0 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8009aca:	f107 0308 	add.w	r3, r7, #8
 8009ace:	4619      	mov	r1, r3
 8009ad0:	483f      	ldr	r0, [pc, #252]	; (8009bd0 <LPS22HH_0_Probe+0x174>)
 8009ad2:	f7fc faff 	bl	80060d4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8009ad6:	7a3b      	ldrb	r3, [r7, #8]
 8009ad8:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8009ada:	7a7b      	ldrb	r3, [r7, #9]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8009ae0:	7abb      	ldrb	r3, [r7, #10]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8009aec:	4a39      	ldr	r2, [pc, #228]	; (8009bd4 <LPS22HH_0_Probe+0x178>)
 8009aee:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8009af0:	4b39      	ldr	r3, [pc, #228]	; (8009bd8 <LPS22HH_0_Probe+0x17c>)
 8009af2:	4a37      	ldr	r2, [pc, #220]	; (8009bd0 <LPS22HH_0_Probe+0x174>)
 8009af4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8009af6:	4b39      	ldr	r3, [pc, #228]	; (8009bdc <LPS22HH_0_Probe+0x180>)
 8009af8:	4a39      	ldr	r2, [pc, #228]	; (8009be0 <LPS22HH_0_Probe+0x184>)
 8009afa:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11e      	bne.n	8009b40 <LPS22HH_0_Probe+0xe4>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d019      	beq.n	8009b40 <LPS22HH_0_Probe+0xe4>
 8009b0c:	7a3b      	ldrb	r3, [r7, #8]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d116      	bne.n	8009b40 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8009b12:	4b34      	ldr	r3, [pc, #208]	; (8009be4 <LPS22HH_0_Probe+0x188>)
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	4a34      	ldr	r2, [pc, #208]	; (8009be8 <LPS22HH_0_Probe+0x18c>)
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4934      	ldr	r1, [pc, #208]	; (8009bec <LPS22HH_0_Probe+0x190>)
 8009b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009b20:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <LPS22HH_0_Probe+0x180>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a2c      	ldr	r2, [pc, #176]	; (8009bd8 <LPS22HH_0_Probe+0x17c>)
 8009b28:	6852      	ldr	r2, [r2, #4]
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	4798      	blx	r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b34:	f06f 0304 	mvn.w	r3, #4
 8009b38:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3a:	e001      	b.n	8009b40 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d11e      	bne.n	8009b84 <LPS22HH_0_Probe+0x128>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d019      	beq.n	8009b84 <LPS22HH_0_Probe+0x128>
 8009b50:	7a7b      	ldrb	r3, [r7, #9]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d116      	bne.n	8009b84 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8009b56:	4b23      	ldr	r3, [pc, #140]	; (8009be4 <LPS22HH_0_Probe+0x188>)
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	4a23      	ldr	r2, [pc, #140]	; (8009be8 <LPS22HH_0_Probe+0x18c>)
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4924      	ldr	r1, [pc, #144]	; (8009bf0 <LPS22HH_0_Probe+0x194>)
 8009b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009b64:	4b1d      	ldr	r3, [pc, #116]	; (8009bdc <LPS22HH_0_Probe+0x180>)
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <LPS22HH_0_Probe+0x17c>)
 8009b6c:	6852      	ldr	r2, [r2, #4]
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4798      	blx	r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b78:	f06f 0304 	mvn.w	r3, #4
 8009b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b7e:	e001      	b.n	8009b84 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d107      	bne.n	8009b9a <LPS22HH_0_Probe+0x13e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b94:	f06f 0304 	mvn.w	r3, #4
 8009b98:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8009b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d107      	bne.n	8009bb0 <LPS22HH_0_Probe+0x154>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009baa:	f06f 0304 	mvn.w	r3, #4
 8009bae:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3748      	adds	r7, #72	; 0x48
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	08000eb1 	.word	0x08000eb1
 8009bc0:	08000f2d 	.word	0x08000f2d
 8009bc4:	08000fe1 	.word	0x08000fe1
 8009bc8:	08000f7d 	.word	0x08000f7d
 8009bcc:	08001045 	.word	0x08001045
 8009bd0:	20000504 	.word	0x20000504
 8009bd4:	200004c4 	.word	0x200004c4
 8009bd8:	2000047c 	.word	0x2000047c
 8009bdc:	200004b8 	.word	0x200004b8
 8009be0:	200000a8 	.word	0x200000a8
 8009be4:	2000015c 	.word	0x2000015c
 8009be8:	20000488 	.word	0x20000488
 8009bec:	200000cc 	.word	0x200000cc
 8009bf0:	200000b8 	.word	0x200000b8

08009bf4 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b092      	sub	sp, #72	; 0x48
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009c00:	2300      	movs	r3, #0
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8009c04:	2395      	movs	r3, #149	; 0x95
 8009c06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009c0a:	4b46      	ldr	r3, [pc, #280]	; (8009d24 <STTS751_0_Probe+0x130>)
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009c0e:	4b46      	ldr	r3, [pc, #280]	; (8009d28 <STTS751_0_Probe+0x134>)
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009c12:	4b46      	ldr	r3, [pc, #280]	; (8009d2c <STTS751_0_Probe+0x138>)
 8009c14:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009c16:	4b46      	ldr	r3, [pc, #280]	; (8009d30 <STTS751_0_Probe+0x13c>)
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009c1a:	4b46      	ldr	r3, [pc, #280]	; (8009d34 <STTS751_0_Probe+0x140>)
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8009c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c22:	4619      	mov	r1, r3
 8009c24:	4844      	ldr	r0, [pc, #272]	; (8009d38 <STTS751_0_Probe+0x144>)
 8009c26:	f7fe ffdb 	bl	8008be0 <STTS751_RegisterBusIO>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c30:	f06f 0306 	mvn.w	r3, #6
 8009c34:	647b      	str	r3, [r7, #68]	; 0x44
 8009c36:	e070      	b.n	8009d1a <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009c38:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	483e      	ldr	r0, [pc, #248]	; (8009d38 <STTS751_0_Probe+0x144>)
 8009c40:	f7ff f86d 	bl	8008d1e <STTS751_ReadID>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c4a:	f06f 0306 	mvn.w	r3, #6
 8009c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c50:	e063      	b.n	8009d1a <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8009c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c56:	2b53      	cmp	r3, #83	; 0x53
 8009c58:	d003      	beq.n	8009c62 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c5a:	f06f 0306 	mvn.w	r3, #6
 8009c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c60:	e05b      	b.n	8009d1a <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8009c62:	f107 0308 	add.w	r3, r7, #8
 8009c66:	4619      	mov	r1, r3
 8009c68:	4833      	ldr	r0, [pc, #204]	; (8009d38 <STTS751_0_Probe+0x144>)
 8009c6a:	f7ff f873 	bl	8008d54 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8009c6e:	7a3b      	ldrb	r3, [r7, #8]
 8009c70:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8009c72:	7a7b      	ldrb	r3, [r7, #9]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8009c78:	7abb      	ldrb	r3, [r7, #10]
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8009c84:	4a2d      	ldr	r2, [pc, #180]	; (8009d3c <STTS751_0_Probe+0x148>)
 8009c86:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8009c88:	4b2d      	ldr	r3, [pc, #180]	; (8009d40 <STTS751_0_Probe+0x14c>)
 8009c8a:	4a2b      	ldr	r2, [pc, #172]	; (8009d38 <STTS751_0_Probe+0x144>)
 8009c8c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8009c8e:	4b2d      	ldr	r3, [pc, #180]	; (8009d44 <STTS751_0_Probe+0x150>)
 8009c90:	4a2d      	ldr	r2, [pc, #180]	; (8009d48 <STTS751_0_Probe+0x154>)
 8009c92:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11e      	bne.n	8009cd8 <STTS751_0_Probe+0xe4>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d019      	beq.n	8009cd8 <STTS751_0_Probe+0xe4>
 8009ca4:	7a3b      	ldrb	r3, [r7, #8]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d116      	bne.n	8009cd8 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8009caa:	4b28      	ldr	r3, [pc, #160]	; (8009d4c <STTS751_0_Probe+0x158>)
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	4a28      	ldr	r2, [pc, #160]	; (8009d50 <STTS751_0_Probe+0x15c>)
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	4928      	ldr	r1, [pc, #160]	; (8009d54 <STTS751_0_Probe+0x160>)
 8009cb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8009cb8:	4b22      	ldr	r3, [pc, #136]	; (8009d44 <STTS751_0_Probe+0x150>)
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <STTS751_0_Probe+0x14c>)
 8009cc0:	6892      	ldr	r2, [r2, #8]
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4798      	blx	r3
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ccc:	f06f 0304 	mvn.w	r3, #4
 8009cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd2:	e001      	b.n	8009cd8 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d107      	bne.n	8009cee <STTS751_0_Probe+0xfa>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ce8:	f06f 0304 	mvn.w	r3, #4
 8009cec:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <STTS751_0_Probe+0x110>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cfe:	f06f 0304 	mvn.w	r3, #4
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8009d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <STTS751_0_Probe+0x126>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d14:	f06f 0304 	mvn.w	r3, #4
 8009d18:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3748      	adds	r7, #72	; 0x48
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	08000eb1 	.word	0x08000eb1
 8009d28:	08000f2d 	.word	0x08000f2d
 8009d2c:	08000fe1 	.word	0x08000fe1
 8009d30:	08000f7d 	.word	0x08000f7d
 8009d34:	08001045 	.word	0x08001045
 8009d38:	20000538 	.word	0x20000538
 8009d3c:	200004c4 	.word	0x200004c4
 8009d40:	2000047c 	.word	0x2000047c
 8009d44:	200004b8 	.word	0x200004b8
 8009d48:	20000138 	.word	0x20000138
 8009d4c:	2000015c 	.word	0x2000015c
 8009d50:	20000488 	.word	0x20000488
 8009d54:	20000148 	.word	0x20000148

08009d58 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8009d66:	2301      	movs	r3, #1
 8009d68:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d06e      	beq.n	8009e52 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	f200 809d 	bhi.w	8009eb6 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <IKS01A3_MOTION_SENSOR_Init+0x32>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d032      	beq.n	8009dee <IKS01A3_MOTION_SENSOR_Init+0x96>
 8009d88:	e095      	b.n	8009eb6 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8009d8a:	6838      	ldr	r0, [r7, #0]
 8009d8c:	f000 f90a 	bl	8009fa4 <LSM6DSO_0_Probe>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009d96:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9a:	e0cc      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009d9c:	4a68      	ldr	r2, [pc, #416]	; (8009f40 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	4967      	ldr	r1, [pc, #412]	; (8009f44 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009dae:	f107 010c 	add.w	r1, r7, #12
 8009db2:	4610      	mov	r0, r2
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009dbc:	f06f 0306 	mvn.w	r3, #6
 8009dc0:	e0b9      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009dc2:	7b3b      	ldrb	r3, [r7, #12]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d103      	bne.n	8009dd0 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	f043 0302 	orr.w	r3, r3, #2
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009dd0:	7b7b      	ldrb	r3, [r7, #13]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d103      	bne.n	8009dde <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	f043 0301 	orr.w	r3, r3, #1
 8009ddc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d16c      	bne.n	8009ebe <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f043 0304 	orr.w	r3, r3, #4
 8009dea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009dec:	e067      	b.n	8009ebe <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009dee:	6838      	ldr	r0, [r7, #0]
 8009df0:	f000 f998 	bl	800a124 <LIS2DW12_0_Probe>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	e09a      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009e00:	4a4f      	ldr	r2, [pc, #316]	; (8009f40 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	494e      	ldr	r1, [pc, #312]	; (8009f44 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e12:	f107 010c 	add.w	r1, r7, #12
 8009e16:	4610      	mov	r0, r2
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009e20:	f06f 0306 	mvn.w	r3, #6
 8009e24:	e087      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009e26:	7b3b      	ldrb	r3, [r7, #12]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d103      	bne.n	8009e34 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	f043 0302 	orr.w	r3, r3, #2
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009e34:	7b7b      	ldrb	r3, [r7, #13]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d103      	bne.n	8009e42 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	f043 0301 	orr.w	r3, r3, #1
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d13c      	bne.n	8009ec2 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	f043 0304 	orr.w	r3, r3, #4
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009e50:	e037      	b.n	8009ec2 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8009e52:	6838      	ldr	r0, [r7, #0]
 8009e54:	f000 fa0e 	bl	800a274 <LIS2MDL_0_Probe>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e62:	e068      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009e64:	4a36      	ldr	r2, [pc, #216]	; (8009f40 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4935      	ldr	r1, [pc, #212]	; (8009f44 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e76:	f107 010c 	add.w	r1, r7, #12
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009e84:	f06f 0306 	mvn.w	r3, #6
 8009e88:	e055      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009e8a:	7b3b      	ldrb	r3, [r7, #12]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d103      	bne.n	8009e98 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009e98:	7b7b      	ldrb	r3, [r7, #13]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d103      	bne.n	8009ea6 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d10c      	bne.n	8009ec6 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	f043 0304 	orr.w	r3, r3, #4
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009eb4:	e007      	b.n	8009ec6 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009eb6:	f06f 0301 	mvn.w	r3, #1
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009ebc:	e004      	b.n	8009ec8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009ebe:	bf00      	nop
 8009ec0:	e002      	b.n	8009ec8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009ec2:	bf00      	nop
 8009ec4:	e000      	b.n	8009ec8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009ec6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	e031      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ed6:	e02a      	b.n	8009f2e <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	4013      	ands	r3, r2
 8009ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d11e      	bne.n	8009f22 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8009ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	4013      	ands	r3, r2
 8009eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d118      	bne.n	8009f22 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009ef0:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ef8:	4814      	ldr	r0, [pc, #80]	; (8009f4c <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	440b      	add	r3, r1
 8009f04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	490e      	ldr	r1, [pc, #56]	; (8009f44 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f12:	4610      	mov	r0, r2
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009f1c:	f06f 0304 	mvn.w	r3, #4
 8009f20:	e009      	b.n	8009f36 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d9d1      	bls.n	8009ed8 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3738      	adds	r7, #56	; 0x38
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200005a0 	.word	0x200005a0
 8009f44:	20000570 	.word	0x20000570
 8009f48:	20000180 	.word	0x20000180
 8009f4c:	2000057c 	.word	0x2000057c

08009f50 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d903      	bls.n	8009f68 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f60:	f06f 0301 	mvn.w	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e014      	b.n	8009f92 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009f68:	4a0c      	ldr	r2, [pc, #48]	; (8009f9c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	490b      	ldr	r1, [pc, #44]	; (8009fa0 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009f86:	f06f 0306 	mvn.w	r3, #6
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e001      	b.n	8009f92 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f92:	68fb      	ldr	r3, [r7, #12]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	200005a0 	.word	0x200005a0
 8009fa0:	20000570 	.word	0x20000570

08009fa4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b094      	sub	sp, #80	; 0x50
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009fb4:	23d7      	movs	r3, #215	; 0xd7
 8009fb6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009fba:	4b4b      	ldr	r3, [pc, #300]	; (800a0e8 <LSM6DSO_0_Probe+0x144>)
 8009fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009fbe:	4b4b      	ldr	r3, [pc, #300]	; (800a0ec <LSM6DSO_0_Probe+0x148>)
 8009fc0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009fc2:	4b4b      	ldr	r3, [pc, #300]	; (800a0f0 <LSM6DSO_0_Probe+0x14c>)
 8009fc4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009fc6:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <LSM6DSO_0_Probe+0x150>)
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009fca:	4b4b      	ldr	r3, [pc, #300]	; (800a0f8 <LSM6DSO_0_Probe+0x154>)
 8009fcc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009fce:	4b4b      	ldr	r3, [pc, #300]	; (800a0fc <LSM6DSO_0_Probe+0x158>)
 8009fd0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4849      	ldr	r0, [pc, #292]	; (800a100 <LSM6DSO_0_Probe+0x15c>)
 8009fda:	f7fc fe21 	bl	8006c20 <LSM6DSO_RegisterBusIO>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009fe4:	f06f 0306 	mvn.w	r3, #6
 8009fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fea:	e077      	b.n	800a0dc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009fec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4843      	ldr	r0, [pc, #268]	; (800a100 <LSM6DSO_0_Probe+0x15c>)
 8009ff4:	f7fc ff1e 	bl	8006e34 <LSM6DSO_ReadID>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ffe:	f06f 0306 	mvn.w	r3, #6
 800a002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a004:	e06a      	b.n	800a0dc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800a006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a00a:	2b6c      	cmp	r3, #108	; 0x6c
 800a00c:	d003      	beq.n	800a016 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a00e:	f06f 0306 	mvn.w	r3, #6
 800a012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a014:	e062      	b.n	800a0dc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800a016:	f107 030c 	add.w	r3, r7, #12
 800a01a:	4619      	mov	r1, r3
 800a01c:	4838      	ldr	r0, [pc, #224]	; (800a100 <LSM6DSO_0_Probe+0x15c>)
 800a01e:	f7fc ff1f 	bl	8006e60 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a022:	7b7b      	ldrb	r3, [r7, #13]
 800a024:	461a      	mov	r2, r3
 800a026:	7b3b      	ldrb	r3, [r7, #12]
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	431a      	orrs	r2, r3
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4313      	orrs	r3, r2
 800a032:	4a34      	ldr	r2, [pc, #208]	; (800a104 <LSM6DSO_0_Probe+0x160>)
 800a034:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800a036:	4b34      	ldr	r3, [pc, #208]	; (800a108 <LSM6DSO_0_Probe+0x164>)
 800a038:	4a31      	ldr	r2, [pc, #196]	; (800a100 <LSM6DSO_0_Probe+0x15c>)
 800a03a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800a03c:	4b33      	ldr	r3, [pc, #204]	; (800a10c <LSM6DSO_0_Probe+0x168>)
 800a03e:	4a34      	ldr	r2, [pc, #208]	; (800a110 <LSM6DSO_0_Probe+0x16c>)
 800a040:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11d      	bne.n	800a084 <LSM6DSO_0_Probe+0xe0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d018      	beq.n	800a084 <LSM6DSO_0_Probe+0xe0>
 800a052:	7b7b      	ldrb	r3, [r7, #13]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d115      	bne.n	800a084 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a058:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <LSM6DSO_0_Probe+0x170>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4a2e      	ldr	r2, [pc, #184]	; (800a118 <LSM6DSO_0_Probe+0x174>)
 800a05e:	492f      	ldr	r1, [pc, #188]	; (800a11c <LSM6DSO_0_Probe+0x178>)
 800a060:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a064:	4b29      	ldr	r3, [pc, #164]	; (800a10c <LSM6DSO_0_Probe+0x168>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a27      	ldr	r2, [pc, #156]	; (800a108 <LSM6DSO_0_Probe+0x164>)
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	4610      	mov	r0, r2
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a078:	f06f 0304 	mvn.w	r3, #4
 800a07c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a07e:	e001      	b.n	800a084 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d11d      	bne.n	800a0c6 <LSM6DSO_0_Probe+0x122>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d018      	beq.n	800a0c6 <LSM6DSO_0_Probe+0x122>
 800a094:	7b3b      	ldrb	r3, [r7, #12]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d115      	bne.n	800a0c6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a09a:	4b1e      	ldr	r3, [pc, #120]	; (800a114 <LSM6DSO_0_Probe+0x170>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <LSM6DSO_0_Probe+0x174>)
 800a0a0:	491f      	ldr	r1, [pc, #124]	; (800a120 <LSM6DSO_0_Probe+0x17c>)
 800a0a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <LSM6DSO_0_Probe+0x168>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a16      	ldr	r2, [pc, #88]	; (800a108 <LSM6DSO_0_Probe+0x164>)
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0ba:	f06f 0304 	mvn.w	r3, #4
 800a0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0c0:	e001      	b.n	800a0c6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d107      	bne.n	800a0dc <LSM6DSO_0_Probe+0x138>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0d6:	f06f 0304 	mvn.w	r3, #4
 800a0da:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3750      	adds	r7, #80	; 0x50
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	08000eb1 	.word	0x08000eb1
 800a0ec:	08000f2d 	.word	0x08000f2d
 800a0f0:	08000fe1 	.word	0x08000fe1
 800a0f4:	08000f7d 	.word	0x08000f7d
 800a0f8:	08001045 	.word	0x08001045
 800a0fc:	0800a4ad 	.word	0x0800a4ad
 800a100:	200005b8 	.word	0x200005b8
 800a104:	200005ac 	.word	0x200005ac
 800a108:	20000570 	.word	0x20000570
 800a10c:	200005a0 	.word	0x200005a0
 800a110:	200000e0 	.word	0x200000e0
 800a114:	20000180 	.word	0x20000180
 800a118:	2000057c 	.word	0x2000057c
 800a11c:	20000114 	.word	0x20000114
 800a120:	200000f0 	.word	0x200000f0

0800a124 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b094      	sub	sp, #80	; 0x50
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800a130:	2300      	movs	r3, #0
 800a132:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800a134:	2333      	movs	r3, #51	; 0x33
 800a136:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a13a:	4b40      	ldr	r3, [pc, #256]	; (800a23c <LIS2DW12_0_Probe+0x118>)
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a13e:	4b40      	ldr	r3, [pc, #256]	; (800a240 <LIS2DW12_0_Probe+0x11c>)
 800a140:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a142:	4b40      	ldr	r3, [pc, #256]	; (800a244 <LIS2DW12_0_Probe+0x120>)
 800a144:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a146:	4b40      	ldr	r3, [pc, #256]	; (800a248 <LIS2DW12_0_Probe+0x124>)
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a14a:	4b40      	ldr	r3, [pc, #256]	; (800a24c <LIS2DW12_0_Probe+0x128>)
 800a14c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a14e:	4b40      	ldr	r3, [pc, #256]	; (800a250 <LIS2DW12_0_Probe+0x12c>)
 800a150:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a156:	4619      	mov	r1, r3
 800a158:	483e      	ldr	r0, [pc, #248]	; (800a254 <LIS2DW12_0_Probe+0x130>)
 800a15a:	f7f9 fc67 	bl	8003a2c <LIS2DW12_RegisterBusIO>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a164:	f06f 0306 	mvn.w	r3, #6
 800a168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a16a:	e062      	b.n	800a232 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800a16c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a170:	4619      	mov	r1, r3
 800a172:	4838      	ldr	r0, [pc, #224]	; (800a254 <LIS2DW12_0_Probe+0x130>)
 800a174:	f7f9 fd48 	bl	8003c08 <LIS2DW12_ReadID>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a17e:	f06f 0306 	mvn.w	r3, #6
 800a182:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a184:	e055      	b.n	800a232 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800a186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a18a:	2b44      	cmp	r3, #68	; 0x44
 800a18c:	d003      	beq.n	800a196 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a18e:	f06f 0306 	mvn.w	r3, #6
 800a192:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a194:	e04d      	b.n	800a232 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	4619      	mov	r1, r3
 800a19c:	482d      	ldr	r0, [pc, #180]	; (800a254 <LIS2DW12_0_Probe+0x130>)
 800a19e:	f7f9 fd49 	bl	8003c34 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a1a2:	7b7b      	ldrb	r3, [r7, #13]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	7b3b      	ldrb	r3, [r7, #12]
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	4a29      	ldr	r2, [pc, #164]	; (800a258 <LIS2DW12_0_Probe+0x134>)
 800a1b4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800a1b6:	4b29      	ldr	r3, [pc, #164]	; (800a25c <LIS2DW12_0_Probe+0x138>)
 800a1b8:	4a26      	ldr	r2, [pc, #152]	; (800a254 <LIS2DW12_0_Probe+0x130>)
 800a1ba:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800a1bc:	4b28      	ldr	r3, [pc, #160]	; (800a260 <LIS2DW12_0_Probe+0x13c>)
 800a1be:	4a29      	ldr	r2, [pc, #164]	; (800a264 <LIS2DW12_0_Probe+0x140>)
 800a1c0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d11e      	bne.n	800a206 <LIS2DW12_0_Probe+0xe2>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f003 0302 	and.w	r3, r3, #2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d019      	beq.n	800a206 <LIS2DW12_0_Probe+0xe2>
 800a1d2:	7b3b      	ldrb	r3, [r7, #12]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d116      	bne.n	800a206 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a1d8:	4b23      	ldr	r3, [pc, #140]	; (800a268 <LIS2DW12_0_Probe+0x144>)
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	4a23      	ldr	r2, [pc, #140]	; (800a26c <LIS2DW12_0_Probe+0x148>)
 800a1de:	3303      	adds	r3, #3
 800a1e0:	4923      	ldr	r1, [pc, #140]	; (800a270 <LIS2DW12_0_Probe+0x14c>)
 800a1e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800a1e6:	4b1e      	ldr	r3, [pc, #120]	; (800a260 <LIS2DW12_0_Probe+0x13c>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a1b      	ldr	r2, [pc, #108]	; (800a25c <LIS2DW12_0_Probe+0x138>)
 800a1ee:	6852      	ldr	r2, [r2, #4]
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1fa:	f06f 0304 	mvn.w	r3, #4
 800a1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a200:	e001      	b.n	800a206 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a202:	2300      	movs	r3, #0
 800a204:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d107      	bne.n	800a21c <LIS2DW12_0_Probe+0xf8>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a216:	f06f 0304 	mvn.w	r3, #4
 800a21a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d107      	bne.n	800a232 <LIS2DW12_0_Probe+0x10e>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a22c:	f06f 0304 	mvn.w	r3, #4
 800a230:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a234:	4618      	mov	r0, r3
 800a236:	3750      	adds	r7, #80	; 0x50
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	08000eb1 	.word	0x08000eb1
 800a240:	08000f2d 	.word	0x08000f2d
 800a244:	08000fe1 	.word	0x08000fe1
 800a248:	08000f7d 	.word	0x08000f7d
 800a24c:	08001045 	.word	0x08001045
 800a250:	0800a4ad 	.word	0x0800a4ad
 800a254:	200005f0 	.word	0x200005f0
 800a258:	200005ac 	.word	0x200005ac
 800a25c:	20000570 	.word	0x20000570
 800a260:	200005a0 	.word	0x200005a0
 800a264:	20000040 	.word	0x20000040
 800a268:	20000180 	.word	0x20000180
 800a26c:	2000057c 	.word	0x2000057c
 800a270:	20000050 	.word	0x20000050

0800a274 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b094      	sub	sp, #80	; 0x50
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a280:	2300      	movs	r3, #0
 800a282:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a284:	233d      	movs	r3, #61	; 0x3d
 800a286:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a28a:	4b40      	ldr	r3, [pc, #256]	; (800a38c <LIS2MDL_0_Probe+0x118>)
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a28e:	4b40      	ldr	r3, [pc, #256]	; (800a390 <LIS2MDL_0_Probe+0x11c>)
 800a290:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a292:	4b40      	ldr	r3, [pc, #256]	; (800a394 <LIS2MDL_0_Probe+0x120>)
 800a294:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a296:	4b40      	ldr	r3, [pc, #256]	; (800a398 <LIS2MDL_0_Probe+0x124>)
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a29a:	4b40      	ldr	r3, [pc, #256]	; (800a39c <LIS2MDL_0_Probe+0x128>)
 800a29c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a29e:	4b40      	ldr	r3, [pc, #256]	; (800a3a0 <LIS2MDL_0_Probe+0x12c>)
 800a2a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a2a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	483e      	ldr	r0, [pc, #248]	; (800a3a4 <LIS2MDL_0_Probe+0x130>)
 800a2aa:	f7fa fe4d 	bl	8004f48 <LIS2MDL_RegisterBusIO>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2b4:	f06f 0306 	mvn.w	r3, #6
 800a2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2ba:	e062      	b.n	800a382 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a2bc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4838      	ldr	r0, [pc, #224]	; (800a3a4 <LIS2MDL_0_Probe+0x130>)
 800a2c4:	f7fa ff5c 	bl	8005180 <LIS2MDL_ReadID>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2ce:	f06f 0306 	mvn.w	r3, #6
 800a2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2d4:	e055      	b.n	800a382 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800a2d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d003      	beq.n	800a2e6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2de:	f06f 0306 	mvn.w	r3, #6
 800a2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e4:	e04d      	b.n	800a382 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	482d      	ldr	r0, [pc, #180]	; (800a3a4 <LIS2MDL_0_Probe+0x130>)
 800a2ee:	f7fa ff6d 	bl	80051cc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a2f2:	7b7b      	ldrb	r3, [r7, #13]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	7b3b      	ldrb	r3, [r7, #12]
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4313      	orrs	r3, r2
 800a302:	4a29      	ldr	r2, [pc, #164]	; (800a3a8 <LIS2MDL_0_Probe+0x134>)
 800a304:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <LIS2MDL_0_Probe+0x138>)
 800a308:	4a26      	ldr	r2, [pc, #152]	; (800a3a4 <LIS2MDL_0_Probe+0x130>)
 800a30a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a30c:	4b28      	ldr	r3, [pc, #160]	; (800a3b0 <LIS2MDL_0_Probe+0x13c>)
 800a30e:	4a29      	ldr	r2, [pc, #164]	; (800a3b4 <LIS2MDL_0_Probe+0x140>)
 800a310:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11e      	bne.n	800a356 <LIS2MDL_0_Probe+0xe2>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d019      	beq.n	800a356 <LIS2MDL_0_Probe+0xe2>
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d116      	bne.n	800a356 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a328:	4b23      	ldr	r3, [pc, #140]	; (800a3b8 <LIS2MDL_0_Probe+0x144>)
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	4a23      	ldr	r2, [pc, #140]	; (800a3bc <LIS2MDL_0_Probe+0x148>)
 800a32e:	3306      	adds	r3, #6
 800a330:	4923      	ldr	r1, [pc, #140]	; (800a3c0 <LIS2MDL_0_Probe+0x14c>)
 800a332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800a336:	4b1e      	ldr	r3, [pc, #120]	; (800a3b0 <LIS2MDL_0_Probe+0x13c>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1b      	ldr	r2, [pc, #108]	; (800a3ac <LIS2MDL_0_Probe+0x138>)
 800a33e:	6892      	ldr	r2, [r2, #8]
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a34a:	f06f 0304 	mvn.w	r3, #4
 800a34e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a350:	e001      	b.n	800a356 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a352:	2300      	movs	r3, #0
 800a354:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800a356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d107      	bne.n	800a36c <LIS2MDL_0_Probe+0xf8>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a366:	f06f 0304 	mvn.w	r3, #4
 800a36a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d107      	bne.n	800a382 <LIS2MDL_0_Probe+0x10e>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a37c:	f06f 0304 	mvn.w	r3, #4
 800a380:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a384:	4618      	mov	r0, r3
 800a386:	3750      	adds	r7, #80	; 0x50
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	08000eb1 	.word	0x08000eb1
 800a390:	08000f2d 	.word	0x08000f2d
 800a394:	08000fe1 	.word	0x08000fe1
 800a398:	08000f7d 	.word	0x08000f7d
 800a39c:	08001045 	.word	0x08001045
 800a3a0:	0800a4ad 	.word	0x0800a4ad
 800a3a4:	2000062c 	.word	0x2000062c
 800a3a8:	200005ac 	.word	0x200005ac
 800a3ac:	20000570 	.word	0x20000570
 800a3b0:	200005a0 	.word	0x200005a0
 800a3b4:	20000074 	.word	0x20000074
 800a3b8:	20000180 	.word	0x20000180
 800a3bc:	2000057c 	.word	0x2000057c
 800a3c0:	20000084 	.word	0x20000084

0800a3c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a3ce:	2003      	movs	r0, #3
 800a3d0:	f001 fd20 	bl	800be14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a3d4:	200f      	movs	r0, #15
 800a3d6:	f000 f80d 	bl	800a3f4 <HAL_InitTick>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	71fb      	strb	r3, [r7, #7]
 800a3e4:	e001      	b.n	800a3ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a3e6:	f7f8 fb9f 	bl	8002b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a400:	4b17      	ldr	r3, [pc, #92]	; (800a460 <HAL_InitTick+0x6c>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d023      	beq.n	800a450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a408:	4b16      	ldr	r3, [pc, #88]	; (800a464 <HAL_InitTick+0x70>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	4b14      	ldr	r3, [pc, #80]	; (800a460 <HAL_InitTick+0x6c>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	4619      	mov	r1, r3
 800a412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a416:	fbb3 f3f1 	udiv	r3, r3, r1
 800a41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fd2d 	bl	800be7e <HAL_SYSTICK_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10f      	bne.n	800a44a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b0f      	cmp	r3, #15
 800a42e:	d809      	bhi.n	800a444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a430:	2200      	movs	r2, #0
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	f001 fcf7 	bl	800be2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a43c:	4a0a      	ldr	r2, [pc, #40]	; (800a468 <HAL_InitTick+0x74>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	e007      	b.n	800a454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
 800a448:	e004      	b.n	800a454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	73fb      	strb	r3, [r7, #15]
 800a44e:	e001      	b.n	800a454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20000198 	.word	0x20000198
 800a464:	20000004 	.word	0x20000004
 800a468:	20000194 	.word	0x20000194

0800a46c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <HAL_IncTick+0x20>)
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	4b06      	ldr	r3, [pc, #24]	; (800a490 <HAL_IncTick+0x24>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4413      	add	r3, r2
 800a47c:	4a04      	ldr	r2, [pc, #16]	; (800a490 <HAL_IncTick+0x24>)
 800a47e:	6013      	str	r3, [r2, #0]
}
 800a480:	bf00      	nop
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	20000198 	.word	0x20000198
 800a490:	20000660 	.word	0x20000660

0800a494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a494:	b480      	push	{r7}
 800a496:	af00      	add	r7, sp, #0
  return uwTick;
 800a498:	4b03      	ldr	r3, [pc, #12]	; (800a4a8 <HAL_GetTick+0x14>)
 800a49a:	681b      	ldr	r3, [r3, #0]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	20000660 	.word	0x20000660

0800a4ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4b4:	f7ff ffee 	bl	800a494 <HAL_GetTick>
 800a4b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d005      	beq.n	800a4d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a4c6:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <HAL_Delay+0x44>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a4d2:	bf00      	nop
 800a4d4:	f7ff ffde 	bl	800a494 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d8f7      	bhi.n	800a4d4 <HAL_Delay+0x28>
  {
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000198 	.word	0x20000198

0800a4f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	431a      	orrs	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	609a      	str	r2, [r3, #8]
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	431a      	orrs	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	609a      	str	r2, [r3, #8]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3360      	adds	r3, #96	; 0x60
 800a56e:	461a      	mov	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	4b08      	ldr	r3, [pc, #32]	; (800a5a0 <LL_ADC_SetOffset+0x44>)
 800a57e:	4013      	ands	r3, r2
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a594:	bf00      	nop
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	03fff000 	.word	0x03fff000

0800a5a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3360      	adds	r3, #96	; 0x60
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3360      	adds	r3, #96	; 0x60
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3330      	adds	r3, #48	; 0x30
 800a63c:	461a      	mov	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	0a1b      	lsrs	r3, r3, #8
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	f003 030c 	and.w	r3, r3, #12
 800a648:	4413      	add	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f003 031f 	and.w	r3, r3, #31
 800a656:	211f      	movs	r1, #31
 800a658:	fa01 f303 	lsl.w	r3, r1, r3
 800a65c:	43db      	mvns	r3, r3
 800a65e:	401a      	ands	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	0e9b      	lsrs	r3, r3, #26
 800a664:	f003 011f 	and.w	r1, r3, #31
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 031f 	and.w	r3, r3, #31
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	431a      	orrs	r2, r3
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a678:	bf00      	nop
 800a67a:	371c      	adds	r7, #28
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a684:	b480      	push	{r7}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3314      	adds	r3, #20
 800a694:	461a      	mov	r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	0e5b      	lsrs	r3, r3, #25
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	4413      	add	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	0d1b      	lsrs	r3, r3, #20
 800a6ac:	f003 031f 	and.w	r3, r3, #31
 800a6b0:	2107      	movs	r1, #7
 800a6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	401a      	ands	r2, r3
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	0d1b      	lsrs	r3, r3, #20
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a6ce:	bf00      	nop
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
	...

0800a6dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6f4:	43db      	mvns	r3, r3
 800a6f6:	401a      	ands	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f003 0318 	and.w	r3, r3, #24
 800a6fe:	4908      	ldr	r1, [pc, #32]	; (800a720 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a700:	40d9      	lsrs	r1, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	400b      	ands	r3, r1
 800a706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a70a:	431a      	orrs	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a712:	bf00      	nop
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	0007ffff 	.word	0x0007ffff

0800a724 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f003 031f 	and.w	r3, r3, #31
}
 800a734:	4618      	mov	r0, r3
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a76c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6093      	str	r3, [r2, #8]
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a794:	d101      	bne.n	800a79a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a796:	2301      	movs	r3, #1
 800a798:	e000      	b.n	800a79c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a7b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a7bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e4:	d101      	bne.n	800a7ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a80c:	f043 0201 	orr.w	r2, r3, #1
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a834:	f043 0202 	orr.w	r2, r3, #2
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d101      	bne.n	800a860 <LL_ADC_IsEnabled+0x18>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <LL_ADC_IsEnabled+0x1a>
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d101      	bne.n	800a886 <LL_ADC_IsDisableOngoing+0x18>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <LL_ADC_IsDisableOngoing+0x1a>
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8a8:	f043 0204 	orr.w	r2, r3, #4
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8d0:	f043 0210 	orr.w	r2, r3, #16
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d101      	bne.n	800a8fc <LL_ADC_REG_IsConversionOngoing+0x18>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e000      	b.n	800a8fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a91a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a91e:	f043 0220 	orr.w	r2, r3, #32
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b08      	cmp	r3, #8
 800a944:	d101      	bne.n	800a94a <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a946:	2301      	movs	r3, #1
 800a948:	e000      	b.n	800a94c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a958:	b590      	push	{r4, r7, lr}
 800a95a:	b089      	sub	sp, #36	; 0x24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e130      	b.n	800abd4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d109      	bne.n	800a994 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7f6 fa2d 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fef1 	bl	800a780 <LL_ADC_IsDeepPowerDownEnabled>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff fed7 	bl	800a75c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff ff0c 	bl	800a7d0 <LL_ADC_IsInternalRegulatorEnabled>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d115      	bne.n	800a9ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fef0 	bl	800a7a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a9c8:	4b84      	ldr	r3, [pc, #528]	; (800abdc <HAL_ADC_Init+0x284>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	099b      	lsrs	r3, r3, #6
 800a9ce:	4a84      	ldr	r2, [pc, #528]	; (800abe0 <HAL_ADC_Init+0x288>)
 800a9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d4:	099b      	lsrs	r3, r3, #6
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a9dc:	e002      	b.n	800a9e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1f9      	bne.n	800a9de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff feee 	bl	800a7d0 <LL_ADC_IsInternalRegulatorEnabled>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10d      	bne.n	800aa16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fe:	f043 0210 	orr.w	r2, r3, #16
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0a:	f043 0201 	orr.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff ff62 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800aa20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 80c9 	bne.w	800abc2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f040 80c5 	bne.w	800abc2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800aa40:	f043 0202 	orr.w	r2, r3, #2
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff fefb 	bl	800a848 <LL_ADC_IsEnabled>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d115      	bne.n	800aa84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aa58:	4862      	ldr	r0, [pc, #392]	; (800abe4 <HAL_ADC_Init+0x28c>)
 800aa5a:	f7ff fef5 	bl	800a848 <LL_ADC_IsEnabled>
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4861      	ldr	r0, [pc, #388]	; (800abe8 <HAL_ADC_Init+0x290>)
 800aa62:	f7ff fef1 	bl	800a848 <LL_ADC_IsEnabled>
 800aa66:	4603      	mov	r3, r0
 800aa68:	431c      	orrs	r4, r3
 800aa6a:	4860      	ldr	r0, [pc, #384]	; (800abec <HAL_ADC_Init+0x294>)
 800aa6c:	f7ff feec 	bl	800a848 <LL_ADC_IsEnabled>
 800aa70:	4603      	mov	r3, r0
 800aa72:	4323      	orrs	r3, r4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	485c      	ldr	r0, [pc, #368]	; (800abf0 <HAL_ADC_Init+0x298>)
 800aa80:	f7ff fd38 	bl	800a4f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7e5b      	ldrb	r3, [r3, #25]
 800aa88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800aa94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800aa9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaa2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d106      	bne.n	800aac0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	3b01      	subs	r3, #1
 800aab8:	045b      	lsls	r3, r3, #17
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d009      	beq.n	800aadc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	4313      	orrs	r3, r2
 800aada:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	4b44      	ldr	r3, [pc, #272]	; (800abf4 <HAL_ADC_Init+0x29c>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	69b9      	ldr	r1, [r7, #24]
 800aaec:	430b      	orrs	r3, r1
 800aaee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff ff1c 	bl	800a932 <LL_ADC_INJ_IsConversionOngoing>
 800aafa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d13d      	bne.n	800ab7e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d13a      	bne.n	800ab7e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ab0c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab14:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ab16:	4313      	orrs	r3, r2
 800ab18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab24:	f023 0302 	bic.w	r3, r3, #2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6812      	ldr	r2, [r2, #0]
 800ab2c:	69b9      	ldr	r1, [r7, #24]
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d118      	bne.n	800ab6e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab46:	f023 0304 	bic.w	r3, r3, #4
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ab52:	4311      	orrs	r1, r2
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ab58:	4311      	orrs	r1, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	431a      	orrs	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0201 	orr.w	r2, r2, #1
 800ab6a:	611a      	str	r2, [r3, #16]
 800ab6c:	e007      	b.n	800ab7e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0201 	bic.w	r2, r2, #1
 800ab7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d10c      	bne.n	800aba0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8c:	f023 010f 	bic.w	r1, r3, #15
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	1e5a      	subs	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	631a      	str	r2, [r3, #48]	; 0x30
 800ab9e:	e007      	b.n	800abb0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f022 020f 	bic.w	r2, r2, #15
 800abae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	f043 0201 	orr.w	r2, r3, #1
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	655a      	str	r2, [r3, #84]	; 0x54
 800abc0:	e007      	b.n	800abd2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc6:	f043 0210 	orr.w	r2, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800abd2:	7ffb      	ldrb	r3, [r7, #31]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3724      	adds	r7, #36	; 0x24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd90      	pop	{r4, r7, pc}
 800abdc:	20000004 	.word	0x20000004
 800abe0:	053e2d63 	.word	0x053e2d63
 800abe4:	50040000 	.word	0x50040000
 800abe8:	50040100 	.word	0x50040100
 800abec:	50040200 	.word	0x50040200
 800abf0:	50040300 	.word	0x50040300
 800abf4:	fff0c007 	.word	0xfff0c007

0800abf8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ac00:	4857      	ldr	r0, [pc, #348]	; (800ad60 <HAL_ADC_Start+0x168>)
 800ac02:	f7ff fd8f 	bl	800a724 <LL_ADC_GetMultimode>
 800ac06:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff fe69 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 809c 	bne.w	800ad52 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <HAL_ADC_Start+0x30>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e097      	b.n	800ad58 <HAL_ADC_Start+0x160>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fe63 	bl	800b8fc <ADC_Enable>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 8083 	bne.w	800ad48 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac4a:	f023 0301 	bic.w	r3, r3, #1
 800ac4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a42      	ldr	r2, [pc, #264]	; (800ad64 <HAL_ADC_Start+0x16c>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d002      	beq.n	800ac66 <HAL_ADC_Start+0x6e>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	e000      	b.n	800ac68 <HAL_ADC_Start+0x70>
 800ac66:	4b40      	ldr	r3, [pc, #256]	; (800ad68 <HAL_ADC_Start+0x170>)
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d002      	beq.n	800ac76 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac8e:	d106      	bne.n	800ac9e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac94:	f023 0206 	bic.w	r2, r3, #6
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	659a      	str	r2, [r3, #88]	; 0x58
 800ac9c:	e002      	b.n	800aca4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	221c      	movs	r2, #28
 800acaa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a2a      	ldr	r2, [pc, #168]	; (800ad64 <HAL_ADC_Start+0x16c>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d002      	beq.n	800acc4 <HAL_ADC_Start+0xcc>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	e000      	b.n	800acc6 <HAL_ADC_Start+0xce>
 800acc4:	4b28      	ldr	r3, [pc, #160]	; (800ad68 <HAL_ADC_Start+0x170>)
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6812      	ldr	r2, [r2, #0]
 800acca:	4293      	cmp	r3, r2
 800accc:	d008      	beq.n	800ace0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d005      	beq.n	800ace0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d002      	beq.n	800ace0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b09      	cmp	r3, #9
 800acde:	d114      	bne.n	800ad0a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800acf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fdc6 	bl	800a894 <LL_ADC_REG_StartConversion>
 800ad08:	e025      	b.n	800ad56 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a12      	ldr	r2, [pc, #72]	; (800ad64 <HAL_ADC_Start+0x16c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d002      	beq.n	800ad26 <HAL_ADC_Start+0x12e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	e000      	b.n	800ad28 <HAL_ADC_Start+0x130>
 800ad26:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <HAL_ADC_Start+0x170>)
 800ad28:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00f      	beq.n	800ad56 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ad3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	655a      	str	r2, [r3, #84]	; 0x54
 800ad46:	e006      	b.n	800ad56 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800ad50:	e001      	b.n	800ad56 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ad52:	2302      	movs	r3, #2
 800ad54:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	50040300 	.word	0x50040300
 800ad64:	50040100 	.word	0x50040100
 800ad68:	50040000 	.word	0x50040000

0800ad6c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_ADC_Stop+0x16>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e023      	b.n	800adca <HAL_ADC_Stop+0x5e>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ad8a:	2103      	movs	r1, #3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fcf9 	bl	800b784 <ADC_ConversionStop>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d111      	bne.n	800adc0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fe33 	bl	800ba08 <ADC_Disable>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800adb4:	f023 0301 	bic.w	r3, r3, #1
 800adb8:	f043 0201 	orr.w	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800adde:	4866      	ldr	r0, [pc, #408]	; (800af78 <HAL_ADC_PollForConversion+0x1a4>)
 800ade0:	f7ff fca0 	bl	800a724 <LL_ADC_GetMultimode>
 800ade4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	2b08      	cmp	r3, #8
 800adec:	d102      	bne.n	800adf4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800adee:	2308      	movs	r3, #8
 800adf0:	61fb      	str	r3, [r7, #28]
 800adf2:	e02a      	b.n	800ae4a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d005      	beq.n	800ae06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b05      	cmp	r3, #5
 800adfe:	d002      	beq.n	800ae06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d111      	bne.n	800ae2a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d007      	beq.n	800ae24 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae18:	f043 0220 	orr.w	r2, r3, #32
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0a4      	b.n	800af6e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800ae24:	2304      	movs	r3, #4
 800ae26:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800ae28:	e00f      	b.n	800ae4a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800ae2a:	4853      	ldr	r0, [pc, #332]	; (800af78 <HAL_ADC_PollForConversion+0x1a4>)
 800ae2c:	f7ff fc88 	bl	800a740 <LL_ADC_GetMultiDMATransfer>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3a:	f043 0220 	orr.w	r2, r3, #32
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e093      	b.n	800af6e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800ae46:	2304      	movs	r3, #4
 800ae48:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800ae4a:	f7ff fb23 	bl	800a494 <HAL_GetTick>
 800ae4e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae50:	e021      	b.n	800ae96 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae58:	d01d      	beq.n	800ae96 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800ae5a:	f7ff fb1b 	bl	800a494 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <HAL_ADC_PollForConversion+0x9c>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d112      	bne.n	800ae96 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	f043 0204 	orr.w	r2, r3, #4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e06b      	b.n	800af6e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d0d6      	beq.n	800ae52 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff fba6 	bl	800a606 <LL_ADC_REG_IsTriggerSourceSWStart>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01c      	beq.n	800aefa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7e5b      	ldrb	r3, [r3, #25]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d118      	bne.n	800aefa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b08      	cmp	r3, #8
 800aed4:	d111      	bne.n	800aefa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d105      	bne.n	800aefa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	f043 0201 	orr.w	r2, r3, #1
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <HAL_ADC_PollForConversion+0x1a8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d002      	beq.n	800af0a <HAL_ADC_PollForConversion+0x136>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	e000      	b.n	800af0c <HAL_ADC_PollForConversion+0x138>
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <HAL_ADC_PollForConversion+0x1ac>)
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	4293      	cmp	r3, r2
 800af12:	d008      	beq.n	800af26 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b05      	cmp	r3, #5
 800af1e:	d002      	beq.n	800af26 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b09      	cmp	r3, #9
 800af24:	d104      	bne.n	800af30 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	e00c      	b.n	800af4a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a11      	ldr	r2, [pc, #68]	; (800af7c <HAL_ADC_PollForConversion+0x1a8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d002      	beq.n	800af40 <HAL_ADC_PollForConversion+0x16c>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	e000      	b.n	800af42 <HAL_ADC_PollForConversion+0x16e>
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <HAL_ADC_PollForConversion+0x1ac>)
 800af42:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d104      	bne.n	800af5a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2208      	movs	r2, #8
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	e008      	b.n	800af6c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	220c      	movs	r2, #12
 800af6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	50040300 	.word	0x50040300
 800af7c:	50040100 	.word	0x50040100
 800af80:	50040000 	.word	0x50040000

0800af84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b0b6      	sub	sp, #216	; 0xd8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_ADC_ConfigChannel+0x22>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e3c9      	b.n	800b756 <HAL_ADC_ConfigChannel+0x7b6>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fc88 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f040 83aa 	bne.w	800b730 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b05      	cmp	r3, #5
 800afea:	d824      	bhi.n	800b036 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	3b02      	subs	r3, #2
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d81b      	bhi.n	800b02e <HAL_ADC_ConfigChannel+0x8e>
 800aff6:	a201      	add	r2, pc, #4	; (adr r2, 800affc <HAL_ADC_ConfigChannel+0x5c>)
 800aff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b015 	.word	0x0800b015
 800b004:	0800b01d 	.word	0x0800b01d
 800b008:	0800b025 	.word	0x0800b025
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800b00c:	230c      	movs	r3, #12
 800b00e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800b012:	e010      	b.n	800b036 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800b014:	2312      	movs	r3, #18
 800b016:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800b01a:	e00c      	b.n	800b036 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800b01c:	2318      	movs	r3, #24
 800b01e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800b022:	e008      	b.n	800b036 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800b02c:	e003      	b.n	800b036 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800b02e:	2306      	movs	r3, #6
 800b030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800b034:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800b044:	f7ff faf2 	bl	800a62c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff fc49 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800b052:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fc69 	bl	800a932 <LL_ADC_INJ_IsConversionOngoing>
 800b060:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f040 81a4 	bne.w	800b3b6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b072:	2b00      	cmp	r3, #0
 800b074:	f040 819f 	bne.w	800b3b6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	6819      	ldr	r1, [r3, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	461a      	mov	r2, r3
 800b086:	f7ff fafd 	bl	800a684 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	695a      	ldr	r2, [r3, #20]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	08db      	lsrs	r3, r3, #3
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d00a      	beq.n	800b0c2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	6919      	ldr	r1, [r3, #16]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0bc:	f7ff fa4e 	bl	800a55c <LL_ADC_SetOffset>
 800b0c0:	e179      	b.n	800b3b6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fa6b 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <HAL_ADC_ConfigChannel+0x14e>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff fa60 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	0e9b      	lsrs	r3, r3, #26
 800b0e8:	f003 021f 	and.w	r2, r3, #31
 800b0ec:	e01e      	b.n	800b12c <HAL_ADC_ConfigChannel+0x18c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fa55 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b100:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b104:	fa93 f3a3 	rbit	r3, r3
 800b108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b10c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b114:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800b11c:	2320      	movs	r3, #32
 800b11e:	e004      	b.n	800b12a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800b120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b124:	fab3 f383 	clz	r3, r3
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <HAL_ADC_ConfigChannel+0x1a4>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	0e9b      	lsrs	r3, r3, #26
 800b13e:	f003 031f 	and.w	r3, r3, #31
 800b142:	e018      	b.n	800b176 <HAL_ADC_ConfigChannel+0x1d6>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b14c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b150:	fa93 f3a3 	rbit	r3, r3
 800b154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800b158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b15c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800b160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800b168:	2320      	movs	r3, #32
 800b16a:	e004      	b.n	800b176 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800b16c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b170:	fab3 f383 	clz	r3, r3
 800b174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b176:	429a      	cmp	r2, r3
 800b178:	d106      	bne.n	800b188 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2200      	movs	r2, #0
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff fa24 	bl	800a5d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2101      	movs	r1, #1
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff fa08 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b194:	4603      	mov	r3, r0
 800b196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <HAL_ADC_ConfigChannel+0x214>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff f9fd 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	0e9b      	lsrs	r3, r3, #26
 800b1ae:	f003 021f 	and.w	r2, r3, #31
 800b1b2:	e01e      	b.n	800b1f2 <HAL_ADC_ConfigChannel+0x252>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff f9f2 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1ca:	fa93 f3a3 	rbit	r3, r3
 800b1ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800b1d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800b1da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	e004      	b.n	800b1f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800b1e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1ea:	fab3 f383 	clz	r3, r3
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d105      	bne.n	800b20a <HAL_ADC_ConfigChannel+0x26a>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	0e9b      	lsrs	r3, r3, #26
 800b204:	f003 031f 	and.w	r3, r3, #31
 800b208:	e018      	b.n	800b23c <HAL_ADC_ConfigChannel+0x29c>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b216:	fa93 f3a3 	rbit	r3, r3
 800b21a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800b21e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800b226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800b22e:	2320      	movs	r3, #32
 800b230:	e004      	b.n	800b23c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800b232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b236:	fab3 f383 	clz	r3, r3
 800b23a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d106      	bne.n	800b24e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2200      	movs	r2, #0
 800b246:	2101      	movs	r1, #1
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff f9c1 	bl	800a5d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2102      	movs	r1, #2
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff f9a5 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <HAL_ADC_ConfigChannel+0x2da>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2102      	movs	r1, #2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff f99a 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b270:	4603      	mov	r3, r0
 800b272:	0e9b      	lsrs	r3, r3, #26
 800b274:	f003 021f 	and.w	r2, r3, #31
 800b278:	e01e      	b.n	800b2b8 <HAL_ADC_ConfigChannel+0x318>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2102      	movs	r1, #2
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff f98f 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b286:	4603      	mov	r3, r0
 800b288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b28c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b290:	fa93 f3a3 	rbit	r3, r3
 800b294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800b298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b29c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800b2a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800b2a8:	2320      	movs	r3, #32
 800b2aa:	e004      	b.n	800b2b6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800b2ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2b0:	fab3 f383 	clz	r3, r3
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d105      	bne.n	800b2d0 <HAL_ADC_ConfigChannel+0x330>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	0e9b      	lsrs	r3, r3, #26
 800b2ca:	f003 031f 	and.w	r3, r3, #31
 800b2ce:	e014      	b.n	800b2fa <HAL_ADC_ConfigChannel+0x35a>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2d8:	fa93 f3a3 	rbit	r3, r3
 800b2dc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800b2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800b2e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	e004      	b.n	800b2fa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800b2f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2f4:	fab3 f383 	clz	r3, r3
 800b2f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d106      	bne.n	800b30c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2200      	movs	r2, #0
 800b304:	2102      	movs	r1, #2
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff f962 	bl	800a5d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2103      	movs	r1, #3
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f946 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b318:	4603      	mov	r3, r0
 800b31a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <HAL_ADC_ConfigChannel+0x398>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2103      	movs	r1, #3
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff f93b 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b32e:	4603      	mov	r3, r0
 800b330:	0e9b      	lsrs	r3, r3, #26
 800b332:	f003 021f 	and.w	r2, r3, #31
 800b336:	e017      	b.n	800b368 <HAL_ADC_ConfigChannel+0x3c8>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2103      	movs	r1, #3
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff f930 	bl	800a5a4 <LL_ADC_GetOffsetChannel>
 800b344:	4603      	mov	r3, r0
 800b346:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34a:	fa93 f3a3 	rbit	r3, r3
 800b34e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800b350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b352:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800b354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800b35a:	2320      	movs	r3, #32
 800b35c:	e003      	b.n	800b366 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800b35e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b360:	fab3 f383 	clz	r3, r3
 800b364:	b2db      	uxtb	r3, r3
 800b366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b370:	2b00      	cmp	r3, #0
 800b372:	d105      	bne.n	800b380 <HAL_ADC_ConfigChannel+0x3e0>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	0e9b      	lsrs	r3, r3, #26
 800b37a:	f003 031f 	and.w	r3, r3, #31
 800b37e:	e011      	b.n	800b3a4 <HAL_ADC_ConfigChannel+0x404>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b388:	fa93 f3a3 	rbit	r3, r3
 800b38c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800b38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b390:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800b392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800b398:	2320      	movs	r3, #32
 800b39a:	e003      	b.n	800b3a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800b39c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b39e:	fab3 f383 	clz	r3, r3
 800b3a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d106      	bne.n	800b3b6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2103      	movs	r1, #3
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff f90d 	bl	800a5d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff fa44 	bl	800a848 <LL_ADC_IsEnabled>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 8140 	bne.w	800b648 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	f7ff f981 	bl	800a6dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	4a8f      	ldr	r2, [pc, #572]	; (800b61c <HAL_ADC_ConfigChannel+0x67c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	f040 8131 	bne.w	800b648 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10b      	bne.n	800b40e <HAL_ADC_ConfigChannel+0x46e>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	0e9b      	lsrs	r3, r3, #26
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	f003 031f 	and.w	r3, r3, #31
 800b402:	2b09      	cmp	r3, #9
 800b404:	bf94      	ite	ls
 800b406:	2301      	movls	r3, #1
 800b408:	2300      	movhi	r3, #0
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	e019      	b.n	800b442 <HAL_ADC_ConfigChannel+0x4a2>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b416:	fa93 f3a3 	rbit	r3, r3
 800b41a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800b41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800b420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800b426:	2320      	movs	r3, #32
 800b428:	e003      	b.n	800b432 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800b42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b42c:	fab3 f383 	clz	r3, r3
 800b430:	b2db      	uxtb	r3, r3
 800b432:	3301      	adds	r3, #1
 800b434:	f003 031f 	and.w	r3, r3, #31
 800b438:	2b09      	cmp	r3, #9
 800b43a:	bf94      	ite	ls
 800b43c:	2301      	movls	r3, #1
 800b43e:	2300      	movhi	r3, #0
 800b440:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b442:	2b00      	cmp	r3, #0
 800b444:	d079      	beq.n	800b53a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d107      	bne.n	800b462 <HAL_ADC_ConfigChannel+0x4c2>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	0e9b      	lsrs	r3, r3, #26
 800b458:	3301      	adds	r3, #1
 800b45a:	069b      	lsls	r3, r3, #26
 800b45c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b460:	e015      	b.n	800b48e <HAL_ADC_ConfigChannel+0x4ee>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b46a:	fa93 f3a3 	rbit	r3, r3
 800b46e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800b470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b472:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800b474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800b47a:	2320      	movs	r3, #32
 800b47c:	e003      	b.n	800b486 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800b47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b480:	fab3 f383 	clz	r3, r3
 800b484:	b2db      	uxtb	r3, r3
 800b486:	3301      	adds	r3, #1
 800b488:	069b      	lsls	r3, r3, #26
 800b48a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <HAL_ADC_ConfigChannel+0x50e>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	0e9b      	lsrs	r3, r3, #26
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	f003 031f 	and.w	r3, r3, #31
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ac:	e017      	b.n	800b4de <HAL_ADC_ConfigChannel+0x53e>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b6:	fa93 f3a3 	rbit	r3, r3
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4be:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800b4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b4c6:	2320      	movs	r3, #32
 800b4c8:	e003      	b.n	800b4d2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4cc:	fab3 f383 	clz	r3, r3
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	f003 031f 	and.w	r3, r3, #31
 800b4d8:	2101      	movs	r1, #1
 800b4da:	fa01 f303 	lsl.w	r3, r1, r3
 800b4de:	ea42 0103 	orr.w	r1, r2, r3
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <HAL_ADC_ConfigChannel+0x564>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	0e9b      	lsrs	r3, r3, #26
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	f003 021f 	and.w	r2, r3, #31
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	4413      	add	r3, r2
 800b500:	051b      	lsls	r3, r3, #20
 800b502:	e018      	b.n	800b536 <HAL_ADC_ConfigChannel+0x596>
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50c:	fa93 f3a3 	rbit	r3, r3
 800b510:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800b51c:	2320      	movs	r3, #32
 800b51e:	e003      	b.n	800b528 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	fab3 f383 	clz	r3, r3
 800b526:	b2db      	uxtb	r3, r3
 800b528:	3301      	adds	r3, #1
 800b52a:	f003 021f 	and.w	r2, r3, #31
 800b52e:	4613      	mov	r3, r2
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	4413      	add	r3, r2
 800b534:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b536:	430b      	orrs	r3, r1
 800b538:	e081      	b.n	800b63e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b542:	2b00      	cmp	r3, #0
 800b544:	d107      	bne.n	800b556 <HAL_ADC_ConfigChannel+0x5b6>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	0e9b      	lsrs	r3, r3, #26
 800b54c:	3301      	adds	r3, #1
 800b54e:	069b      	lsls	r3, r3, #26
 800b550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b554:	e015      	b.n	800b582 <HAL_ADC_ConfigChannel+0x5e2>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	fa93 f3a3 	rbit	r3, r3
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800b56e:	2320      	movs	r3, #32
 800b570:	e003      	b.n	800b57a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	fab3 f383 	clz	r3, r3
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	3301      	adds	r3, #1
 800b57c:	069b      	lsls	r3, r3, #26
 800b57e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <HAL_ADC_ConfigChannel+0x602>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	0e9b      	lsrs	r3, r3, #26
 800b594:	3301      	adds	r3, #1
 800b596:	f003 031f 	and.w	r3, r3, #31
 800b59a:	2101      	movs	r1, #1
 800b59c:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a0:	e017      	b.n	800b5d2 <HAL_ADC_ConfigChannel+0x632>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	fa93 f3a3 	rbit	r3, r3
 800b5ae:	61bb      	str	r3, [r7, #24]
  return result;
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800b5ba:	2320      	movs	r3, #32
 800b5bc:	e003      	b.n	800b5c6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	fab3 f383 	clz	r3, r3
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	f003 031f 	and.w	r3, r3, #31
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d2:	ea42 0103 	orr.w	r1, r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10d      	bne.n	800b5fe <HAL_ADC_ConfigChannel+0x65e>
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	0e9b      	lsrs	r3, r3, #26
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	f003 021f 	and.w	r2, r3, #31
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3b1e      	subs	r3, #30
 800b5f6:	051b      	lsls	r3, r3, #20
 800b5f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b5fc:	e01e      	b.n	800b63c <HAL_ADC_ConfigChannel+0x69c>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	fa93 f3a3 	rbit	r3, r3
 800b60a:	60fb      	str	r3, [r7, #12]
  return result;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800b616:	2320      	movs	r3, #32
 800b618:	e006      	b.n	800b628 <HAL_ADC_ConfigChannel+0x688>
 800b61a:	bf00      	nop
 800b61c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	fab3 f383 	clz	r3, r3
 800b626:	b2db      	uxtb	r3, r3
 800b628:	3301      	adds	r3, #1
 800b62a:	f003 021f 	and.w	r2, r3, #31
 800b62e:	4613      	mov	r3, r2
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	4413      	add	r3, r2
 800b634:	3b1e      	subs	r3, #30
 800b636:	051b      	lsls	r3, r3, #20
 800b638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b63c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b642:	4619      	mov	r1, r3
 800b644:	f7ff f81e 	bl	800a684 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	4b44      	ldr	r3, [pc, #272]	; (800b760 <HAL_ADC_ConfigChannel+0x7c0>)
 800b64e:	4013      	ands	r3, r2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d07a      	beq.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b654:	4843      	ldr	r0, [pc, #268]	; (800b764 <HAL_ADC_ConfigChannel+0x7c4>)
 800b656:	f7fe ff73 	bl	800a540 <LL_ADC_GetCommonPathInternalCh>
 800b65a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a41      	ldr	r2, [pc, #260]	; (800b768 <HAL_ADC_ConfigChannel+0x7c8>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d12c      	bne.n	800b6c2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b66c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d126      	bne.n	800b6c2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a3c      	ldr	r2, [pc, #240]	; (800b76c <HAL_ADC_ConfigChannel+0x7cc>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d004      	beq.n	800b688 <HAL_ADC_ConfigChannel+0x6e8>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a3b      	ldr	r2, [pc, #236]	; (800b770 <HAL_ADC_ConfigChannel+0x7d0>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d15d      	bne.n	800b744 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b68c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b690:	4619      	mov	r1, r3
 800b692:	4834      	ldr	r0, [pc, #208]	; (800b764 <HAL_ADC_ConfigChannel+0x7c4>)
 800b694:	f7fe ff41 	bl	800a51a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b698:	4b36      	ldr	r3, [pc, #216]	; (800b774 <HAL_ADC_ConfigChannel+0x7d4>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	099b      	lsrs	r3, r3, #6
 800b69e:	4a36      	ldr	r2, [pc, #216]	; (800b778 <HAL_ADC_ConfigChannel+0x7d8>)
 800b6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a4:	099b      	lsrs	r3, r3, #6
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b6b2:	e002      	b.n	800b6ba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f9      	bne.n	800b6b4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b6c0:	e040      	b.n	800b744 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a2d      	ldr	r2, [pc, #180]	; (800b77c <HAL_ADC_ConfigChannel+0x7dc>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d118      	bne.n	800b6fe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b6cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d112      	bne.n	800b6fe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a23      	ldr	r2, [pc, #140]	; (800b76c <HAL_ADC_ConfigChannel+0x7cc>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d004      	beq.n	800b6ec <HAL_ADC_ConfigChannel+0x74c>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a22      	ldr	r2, [pc, #136]	; (800b770 <HAL_ADC_ConfigChannel+0x7d0>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d12d      	bne.n	800b748 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b6ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	481b      	ldr	r0, [pc, #108]	; (800b764 <HAL_ADC_ConfigChannel+0x7c4>)
 800b6f8:	f7fe ff0f 	bl	800a51a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b6fc:	e024      	b.n	800b748 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <HAL_ADC_ConfigChannel+0x7e0>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d120      	bne.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b70c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d11a      	bne.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a14      	ldr	r2, [pc, #80]	; (800b76c <HAL_ADC_ConfigChannel+0x7cc>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d115      	bne.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b71e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b726:	4619      	mov	r1, r3
 800b728:	480e      	ldr	r0, [pc, #56]	; (800b764 <HAL_ADC_ConfigChannel+0x7c4>)
 800b72a:	f7fe fef6 	bl	800a51a <LL_ADC_SetCommonPathInternalCh>
 800b72e:	e00c      	b.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b734:	f043 0220 	orr.w	r2, r3, #32
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800b742:	e002      	b.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b748:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b752:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800b756:	4618      	mov	r0, r3
 800b758:	37d8      	adds	r7, #216	; 0xd8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	80080000 	.word	0x80080000
 800b764:	50040300 	.word	0x50040300
 800b768:	c7520000 	.word	0xc7520000
 800b76c:	50040000 	.word	0x50040000
 800b770:	50040200 	.word	0x50040200
 800b774:	20000004 	.word	0x20000004
 800b778:	053e2d63 	.word	0x053e2d63
 800b77c:	cb840000 	.word	0xcb840000
 800b780:	80000001 	.word	0x80000001

0800b784 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b78e:	2300      	movs	r3, #0
 800b790:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff f8a2 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800b7a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff f8c3 	bl	800a932 <LL_ADC_INJ_IsConversionOngoing>
 800b7ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d103      	bne.n	800b7bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8098 	beq.w	800b8ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d02a      	beq.n	800b820 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	7e5b      	ldrb	r3, [r3, #25]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d126      	bne.n	800b820 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7e1b      	ldrb	r3, [r3, #24]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d122      	bne.n	800b820 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b7de:	e014      	b.n	800b80a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	4a45      	ldr	r2, [pc, #276]	; (800b8f8 <ADC_ConversionStop+0x174>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d90d      	bls.n	800b804 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ec:	f043 0210 	orr.w	r2, r3, #16
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f8:	f043 0201 	orr.w	r2, r3, #1
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e074      	b.n	800b8ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	3301      	adds	r3, #1
 800b808:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	d1e3      	bne.n	800b7e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2240      	movs	r2, #64	; 0x40
 800b81e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d014      	beq.n	800b850 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff f85a 	bl	800a8e4 <LL_ADC_REG_IsConversionOngoing>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00c      	beq.n	800b850 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff f817 	bl	800a86e <LL_ADC_IsDisableOngoing>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d104      	bne.n	800b850 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff f836 	bl	800a8bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d014      	beq.n	800b880 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f869 	bl	800a932 <LL_ADC_INJ_IsConversionOngoing>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00c      	beq.n	800b880 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe ffff 	bl	800a86e <LL_ADC_IsDisableOngoing>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d104      	bne.n	800b880 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff f845 	bl	800a90a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d005      	beq.n	800b892 <ADC_ConversionStop+0x10e>
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d105      	bne.n	800b898 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b88c:	230c      	movs	r3, #12
 800b88e:	617b      	str	r3, [r7, #20]
        break;
 800b890:	e005      	b.n	800b89e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b892:	2308      	movs	r3, #8
 800b894:	617b      	str	r3, [r7, #20]
        break;
 800b896:	e002      	b.n	800b89e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b898:	2304      	movs	r3, #4
 800b89a:	617b      	str	r3, [r7, #20]
        break;
 800b89c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b89e:	f7fe fdf9 	bl	800a494 <HAL_GetTick>
 800b8a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b8a4:	e01b      	b.n	800b8de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b8a6:	f7fe fdf5 	bl	800a494 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	d914      	bls.n	800b8de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	4013      	ands	r3, r2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00d      	beq.n	800b8de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c6:	f043 0210 	orr.w	r2, r3, #16
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d2:	f043 0201 	orr.w	r2, r3, #1
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e007      	b.n	800b8ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1dc      	bne.n	800b8a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	a33fffff 	.word	0xa33fffff

0800b8fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b904:	2300      	movs	r3, #0
 800b906:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe ff9b 	bl	800a848 <LL_ADC_IsEnabled>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d169      	bne.n	800b9ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	4b36      	ldr	r3, [pc, #216]	; (800b9f8 <ADC_Enable+0xfc>)
 800b920:	4013      	ands	r3, r2
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00d      	beq.n	800b942 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f043 0210 	orr.w	r2, r3, #16
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b936:	f043 0201 	orr.w	r2, r3, #1
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e055      	b.n	800b9ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe ff56 	bl	800a7f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b94c:	482b      	ldr	r0, [pc, #172]	; (800b9fc <ADC_Enable+0x100>)
 800b94e:	f7fe fdf7 	bl	800a540 <LL_ADC_GetCommonPathInternalCh>
 800b952:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d013      	beq.n	800b984 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b95c:	4b28      	ldr	r3, [pc, #160]	; (800ba00 <ADC_Enable+0x104>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	099b      	lsrs	r3, r3, #6
 800b962:	4a28      	ldr	r2, [pc, #160]	; (800ba04 <ADC_Enable+0x108>)
 800b964:	fba2 2303 	umull	r2, r3, r2, r3
 800b968:	099b      	lsrs	r3, r3, #6
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b976:	e002      	b.n	800b97e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1f9      	bne.n	800b978 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b984:	f7fe fd86 	bl	800a494 <HAL_GetTick>
 800b988:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b98a:	e028      	b.n	800b9de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe ff59 	bl	800a848 <LL_ADC_IsEnabled>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d104      	bne.n	800b9a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe ff29 	bl	800a7f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b9a6:	f7fe fd75 	bl	800a494 <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d914      	bls.n	800b9de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d00d      	beq.n	800b9de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c6:	f043 0210 	orr.w	r2, r3, #16
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d2:	f043 0201 	orr.w	r2, r3, #1
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e007      	b.n	800b9ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d1cf      	bne.n	800b98c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	8000003f 	.word	0x8000003f
 800b9fc:	50040300 	.word	0x50040300
 800ba00:	20000004 	.word	0x20000004
 800ba04:	053e2d63 	.word	0x053e2d63

0800ba08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe ff2a 	bl	800a86e <LL_ADC_IsDisableOngoing>
 800ba1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe ff11 	bl	800a848 <LL_ADC_IsEnabled>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d047      	beq.n	800babc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d144      	bne.n	800babc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f003 030d 	and.w	r3, r3, #13
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10c      	bne.n	800ba5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fe feeb 	bl	800a820 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2203      	movs	r2, #3
 800ba50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ba52:	f7fe fd1f 	bl	800a494 <HAL_GetTick>
 800ba56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ba58:	e029      	b.n	800baae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5e:	f043 0210 	orr.w	r2, r3, #16
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6a:	f043 0201 	orr.w	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e023      	b.n	800babe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ba76:	f7fe fd0d 	bl	800a494 <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d914      	bls.n	800baae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00d      	beq.n	800baae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	f043 0210 	orr.w	r2, r3, #16
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa2:	f043 0201 	orr.w	r2, r3, #1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e007      	b.n	800babe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1dc      	bne.n	800ba76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <LL_ADC_IsEnabled>:
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d101      	bne.n	800bade <LL_ADC_IsEnabled+0x18>
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <LL_ADC_IsEnabled+0x1a>
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <LL_ADC_REG_IsConversionOngoing>:
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b04      	cmp	r3, #4
 800bafe:	d101      	bne.n	800bb04 <LL_ADC_REG_IsConversionOngoing+0x18>
 800bb00:	2301      	movs	r3, #1
 800bb02:	e000      	b.n	800bb06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
	...

0800bb14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b09f      	sub	sp, #124	; 0x7c
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d101      	bne.n	800bb32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e093      	b.n	800bc5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800bb3e:	2300      	movs	r3, #0
 800bb40:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a47      	ldr	r2, [pc, #284]	; (800bc64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d102      	bne.n	800bb52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bb4c:	4b46      	ldr	r3, [pc, #280]	; (800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bb4e:	60bb      	str	r3, [r7, #8]
 800bb50:	e001      	b.n	800bb56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800bb52:	2300      	movs	r3, #0
 800bb54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb60:	f043 0220 	orr.w	r2, r3, #32
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e072      	b.n	800bc5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff ffb8 	bl	800baec <LL_ADC_REG_IsConversionOngoing>
 800bb7c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff ffb2 	bl	800baec <LL_ADC_REG_IsConversionOngoing>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d154      	bne.n	800bc38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800bb8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d151      	bne.n	800bc38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bb94:	4b35      	ldr	r3, [pc, #212]	; (800bc6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800bb96:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d02c      	beq.n	800bbfa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	6859      	ldr	r1, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbb2:	035b      	lsls	r3, r3, #13
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bbbc:	4829      	ldr	r0, [pc, #164]	; (800bc64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bbbe:	f7ff ff82 	bl	800bac6 <LL_ADC_IsEnabled>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4828      	ldr	r0, [pc, #160]	; (800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bbc6:	f7ff ff7e 	bl	800bac6 <LL_ADC_IsEnabled>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	431c      	orrs	r4, r3
 800bbce:	4828      	ldr	r0, [pc, #160]	; (800bc70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800bbd0:	f7ff ff79 	bl	800bac6 <LL_ADC_IsEnabled>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	4323      	orrs	r3, r4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d137      	bne.n	800bc4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bbe4:	f023 030f 	bic.w	r3, r3, #15
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	6811      	ldr	r1, [r2, #0]
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	6892      	ldr	r2, [r2, #8]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bbf8:	e028      	b.n	800bc4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bbfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bc06:	4817      	ldr	r0, [pc, #92]	; (800bc64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bc08:	f7ff ff5d 	bl	800bac6 <LL_ADC_IsEnabled>
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4816      	ldr	r0, [pc, #88]	; (800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bc10:	f7ff ff59 	bl	800bac6 <LL_ADC_IsEnabled>
 800bc14:	4603      	mov	r3, r0
 800bc16:	431c      	orrs	r4, r3
 800bc18:	4815      	ldr	r0, [pc, #84]	; (800bc70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800bc1a:	f7ff ff54 	bl	800bac6 <LL_ADC_IsEnabled>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	4323      	orrs	r3, r4
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d112      	bne.n	800bc4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bc2e:	f023 030f 	bic.w	r3, r3, #15
 800bc32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bc36:	e009      	b.n	800bc4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3c:	f043 0220 	orr.w	r2, r3, #32
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bc4a:	e000      	b.n	800bc4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bc4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800bc56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	377c      	adds	r7, #124	; 0x7c
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	bf00      	nop
 800bc64:	50040000 	.word	0x50040000
 800bc68:	50040100 	.word	0x50040100
 800bc6c:	50040300 	.word	0x50040300
 800bc70:	50040200 	.word	0x50040200

0800bc74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f003 0307 	and.w	r3, r3, #7
 800bc82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc84:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <__NVIC_SetPriorityGrouping+0x44>)
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc90:	4013      	ands	r3, r2
 800bc92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bc9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bca6:	4a04      	ldr	r2, [pc, #16]	; (800bcb8 <__NVIC_SetPriorityGrouping+0x44>)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	60d3      	str	r3, [r2, #12]
}
 800bcac:	bf00      	nop
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	e000ed00 	.word	0xe000ed00

0800bcbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bcc0:	4b04      	ldr	r3, [pc, #16]	; (800bcd4 <__NVIC_GetPriorityGrouping+0x18>)
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	0a1b      	lsrs	r3, r3, #8
 800bcc6:	f003 0307 	and.w	r3, r3, #7
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	e000ed00 	.word	0xe000ed00

0800bcd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	db0b      	blt.n	800bd02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	f003 021f 	and.w	r2, r3, #31
 800bcf0:	4907      	ldr	r1, [pc, #28]	; (800bd10 <__NVIC_EnableIRQ+0x38>)
 800bcf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf6:	095b      	lsrs	r3, r3, #5
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	fa00 f202 	lsl.w	r2, r0, r2
 800bcfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bd02:	bf00      	nop
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	e000e100 	.word	0xe000e100

0800bd14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	db0a      	blt.n	800bd3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	490c      	ldr	r1, [pc, #48]	; (800bd60 <__NVIC_SetPriority+0x4c>)
 800bd2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd32:	0112      	lsls	r2, r2, #4
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	440b      	add	r3, r1
 800bd38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bd3c:	e00a      	b.n	800bd54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	4908      	ldr	r1, [pc, #32]	; (800bd64 <__NVIC_SetPriority+0x50>)
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	3b04      	subs	r3, #4
 800bd4c:	0112      	lsls	r2, r2, #4
 800bd4e:	b2d2      	uxtb	r2, r2
 800bd50:	440b      	add	r3, r1
 800bd52:	761a      	strb	r2, [r3, #24]
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	e000e100 	.word	0xe000e100
 800bd64:	e000ed00 	.word	0xe000ed00

0800bd68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b089      	sub	sp, #36	; 0x24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f1c3 0307 	rsb	r3, r3, #7
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	bf28      	it	cs
 800bd86:	2304      	movcs	r3, #4
 800bd88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	2b06      	cmp	r3, #6
 800bd90:	d902      	bls.n	800bd98 <NVIC_EncodePriority+0x30>
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	3b03      	subs	r3, #3
 800bd96:	e000      	b.n	800bd9a <NVIC_EncodePriority+0x32>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	fa02 f303 	lsl.w	r3, r2, r3
 800bda6:	43da      	mvns	r2, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	401a      	ands	r2, r3
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bdb0:	f04f 31ff 	mov.w	r1, #4294967295
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800bdba:	43d9      	mvns	r1, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bdc0:	4313      	orrs	r3, r2
         );
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3724      	adds	r7, #36	; 0x24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bde0:	d301      	bcc.n	800bde6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bde2:	2301      	movs	r3, #1
 800bde4:	e00f      	b.n	800be06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bde6:	4a0a      	ldr	r2, [pc, #40]	; (800be10 <SysTick_Config+0x40>)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bdee:	210f      	movs	r1, #15
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	f7ff ff8e 	bl	800bd14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <SysTick_Config+0x40>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bdfe:	4b04      	ldr	r3, [pc, #16]	; (800be10 <SysTick_Config+0x40>)
 800be00:	2207      	movs	r2, #7
 800be02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	e000e010 	.word	0xe000e010

0800be14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff29 	bl	800bc74 <__NVIC_SetPriorityGrouping>
}
 800be22:	bf00      	nop
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b086      	sub	sp, #24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	4603      	mov	r3, r0
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
 800be36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800be3c:	f7ff ff3e 	bl	800bcbc <__NVIC_GetPriorityGrouping>
 800be40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	6978      	ldr	r0, [r7, #20]
 800be48:	f7ff ff8e 	bl	800bd68 <NVIC_EncodePriority>
 800be4c:	4602      	mov	r2, r0
 800be4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be52:	4611      	mov	r1, r2
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff ff5d 	bl	800bd14 <__NVIC_SetPriority>
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	4603      	mov	r3, r0
 800be6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff ff31 	bl	800bcd8 <__NVIC_EnableIRQ>
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff ffa2 	bl	800bdd0 <SysTick_Config>
 800be8c:	4603      	mov	r3, r0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bea6:	e17f      	b.n	800c1a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	2101      	movs	r1, #1
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	fa01 f303 	lsl.w	r3, r1, r3
 800beb4:	4013      	ands	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 8171 	beq.w	800c1a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f003 0303 	and.w	r3, r3, #3
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d005      	beq.n	800bed8 <HAL_GPIO_Init+0x40>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f003 0303 	and.w	r3, r3, #3
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d130      	bne.n	800bf3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	2203      	movs	r2, #3
 800bee4:	fa02 f303 	lsl.w	r3, r2, r3
 800bee8:	43db      	mvns	r3, r3
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	4013      	ands	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	68da      	ldr	r2, [r3, #12]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf0e:	2201      	movs	r2, #1
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	43db      	mvns	r3, r3
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	091b      	lsrs	r3, r3, #4
 800bf24:	f003 0201 	and.w	r2, r3, #1
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d118      	bne.n	800bf78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	43db      	mvns	r3, r3
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	4013      	ands	r3, r2
 800bf5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	08db      	lsrs	r3, r3, #3
 800bf62:	f003 0201 	and.w	r2, r3, #1
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f003 0303 	and.w	r3, r3, #3
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d017      	beq.n	800bfb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	2203      	movs	r2, #3
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	43db      	mvns	r3, r3
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d123      	bne.n	800c008 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	08da      	lsrs	r2, r3, #3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3208      	adds	r2, #8
 800bfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f003 0307 	and.w	r3, r3, #7
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	220f      	movs	r2, #15
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	43db      	mvns	r3, r3
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	fa02 f303 	lsl.w	r3, r2, r3
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	08da      	lsrs	r2, r3, #3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3208      	adds	r2, #8
 800c002:	6939      	ldr	r1, [r7, #16]
 800c004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	2203      	movs	r2, #3
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	43db      	mvns	r3, r3
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	4013      	ands	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	f003 0203 	and.w	r2, r3, #3
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	fa02 f303 	lsl.w	r3, r2, r3
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	4313      	orrs	r3, r2
 800c034:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 80ac 	beq.w	800c1a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c04a:	4b5f      	ldr	r3, [pc, #380]	; (800c1c8 <HAL_GPIO_Init+0x330>)
 800c04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c04e:	4a5e      	ldr	r2, [pc, #376]	; (800c1c8 <HAL_GPIO_Init+0x330>)
 800c050:	f043 0301 	orr.w	r3, r3, #1
 800c054:	6613      	str	r3, [r2, #96]	; 0x60
 800c056:	4b5c      	ldr	r3, [pc, #368]	; (800c1c8 <HAL_GPIO_Init+0x330>)
 800c058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	60bb      	str	r3, [r7, #8]
 800c060:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c062:	4a5a      	ldr	r2, [pc, #360]	; (800c1cc <HAL_GPIO_Init+0x334>)
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	089b      	lsrs	r3, r3, #2
 800c068:	3302      	adds	r3, #2
 800c06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c06e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f003 0303 	and.w	r3, r3, #3
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	220f      	movs	r2, #15
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	43db      	mvns	r3, r3
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4013      	ands	r3, r2
 800c084:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c08c:	d025      	beq.n	800c0da <HAL_GPIO_Init+0x242>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a4f      	ldr	r2, [pc, #316]	; (800c1d0 <HAL_GPIO_Init+0x338>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d01f      	beq.n	800c0d6 <HAL_GPIO_Init+0x23e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a4e      	ldr	r2, [pc, #312]	; (800c1d4 <HAL_GPIO_Init+0x33c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d019      	beq.n	800c0d2 <HAL_GPIO_Init+0x23a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a4d      	ldr	r2, [pc, #308]	; (800c1d8 <HAL_GPIO_Init+0x340>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d013      	beq.n	800c0ce <HAL_GPIO_Init+0x236>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a4c      	ldr	r2, [pc, #304]	; (800c1dc <HAL_GPIO_Init+0x344>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d00d      	beq.n	800c0ca <HAL_GPIO_Init+0x232>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a4b      	ldr	r2, [pc, #300]	; (800c1e0 <HAL_GPIO_Init+0x348>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d007      	beq.n	800c0c6 <HAL_GPIO_Init+0x22e>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a4a      	ldr	r2, [pc, #296]	; (800c1e4 <HAL_GPIO_Init+0x34c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d101      	bne.n	800c0c2 <HAL_GPIO_Init+0x22a>
 800c0be:	2306      	movs	r3, #6
 800c0c0:	e00c      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0c2:	2307      	movs	r3, #7
 800c0c4:	e00a      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0c6:	2305      	movs	r3, #5
 800c0c8:	e008      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0ca:	2304      	movs	r3, #4
 800c0cc:	e006      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e004      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e002      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e000      	b.n	800c0dc <HAL_GPIO_Init+0x244>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	f002 0203 	and.w	r2, r2, #3
 800c0e2:	0092      	lsls	r2, r2, #2
 800c0e4:	4093      	lsls	r3, r2
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c0ec:	4937      	ldr	r1, [pc, #220]	; (800c1cc <HAL_GPIO_Init+0x334>)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	089b      	lsrs	r3, r3, #2
 800c0f2:	3302      	adds	r3, #2
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c0fa:	4b3b      	ldr	r3, [pc, #236]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	43db      	mvns	r3, r3
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4013      	ands	r3, r2
 800c108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c11e:	4a32      	ldr	r2, [pc, #200]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c124:	4b30      	ldr	r3, [pc, #192]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	43db      	mvns	r3, r3
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	4013      	ands	r3, r2
 800c132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4313      	orrs	r3, r2
 800c146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c148:	4a27      	ldr	r2, [pc, #156]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c14e:	4b26      	ldr	r3, [pc, #152]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	43db      	mvns	r3, r3
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	4013      	ands	r3, r2
 800c15c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c172:	4a1d      	ldr	r2, [pc, #116]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c178:	4b1b      	ldr	r3, [pc, #108]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	43db      	mvns	r3, r3
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	4013      	ands	r3, r2
 800c186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	4313      	orrs	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c19c:	4a12      	ldr	r2, [pc, #72]	; (800c1e8 <HAL_GPIO_Init+0x350>)
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f47f ae78 	bne.w	800bea8 <HAL_GPIO_Init+0x10>
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	40021000 	.word	0x40021000
 800c1cc:	40010000 	.word	0x40010000
 800c1d0:	48000400 	.word	0x48000400
 800c1d4:	48000800 	.word	0x48000800
 800c1d8:	48000c00 	.word	0x48000c00
 800c1dc:	48001000 	.word	0x48001000
 800c1e0:	48001400 	.word	0x48001400
 800c1e4:	48001800 	.word	0x48001800
 800c1e8:	40010400 	.word	0x40010400

0800c1ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c1fa:	e0cd      	b.n	800c398 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	fa02 f303 	lsl.w	r3, r2, r3
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	4013      	ands	r3, r2
 800c208:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80c0 	beq.w	800c392 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c212:	4a68      	ldr	r2, [pc, #416]	; (800c3b4 <HAL_GPIO_DeInit+0x1c8>)
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	089b      	lsrs	r3, r3, #2
 800c218:	3302      	adds	r3, #2
 800c21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c21e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	220f      	movs	r2, #15
 800c22a:	fa02 f303 	lsl.w	r3, r2, r3
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	4013      	ands	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c23a:	d025      	beq.n	800c288 <HAL_GPIO_DeInit+0x9c>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a5e      	ldr	r2, [pc, #376]	; (800c3b8 <HAL_GPIO_DeInit+0x1cc>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d01f      	beq.n	800c284 <HAL_GPIO_DeInit+0x98>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a5d      	ldr	r2, [pc, #372]	; (800c3bc <HAL_GPIO_DeInit+0x1d0>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d019      	beq.n	800c280 <HAL_GPIO_DeInit+0x94>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a5c      	ldr	r2, [pc, #368]	; (800c3c0 <HAL_GPIO_DeInit+0x1d4>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d013      	beq.n	800c27c <HAL_GPIO_DeInit+0x90>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a5b      	ldr	r2, [pc, #364]	; (800c3c4 <HAL_GPIO_DeInit+0x1d8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d00d      	beq.n	800c278 <HAL_GPIO_DeInit+0x8c>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a5a      	ldr	r2, [pc, #360]	; (800c3c8 <HAL_GPIO_DeInit+0x1dc>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d007      	beq.n	800c274 <HAL_GPIO_DeInit+0x88>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a59      	ldr	r2, [pc, #356]	; (800c3cc <HAL_GPIO_DeInit+0x1e0>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d101      	bne.n	800c270 <HAL_GPIO_DeInit+0x84>
 800c26c:	2306      	movs	r3, #6
 800c26e:	e00c      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c270:	2307      	movs	r3, #7
 800c272:	e00a      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c274:	2305      	movs	r3, #5
 800c276:	e008      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c278:	2304      	movs	r3, #4
 800c27a:	e006      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c27c:	2303      	movs	r3, #3
 800c27e:	e004      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c280:	2302      	movs	r3, #2
 800c282:	e002      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c284:	2301      	movs	r3, #1
 800c286:	e000      	b.n	800c28a <HAL_GPIO_DeInit+0x9e>
 800c288:	2300      	movs	r3, #0
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	f002 0203 	and.w	r2, r2, #3
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	4093      	lsls	r3, r2
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	429a      	cmp	r2, r3
 800c298:	d132      	bne.n	800c300 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c29a:	4b4d      	ldr	r3, [pc, #308]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	43db      	mvns	r3, r3
 800c2a2:	494b      	ldr	r1, [pc, #300]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c2a8:	4b49      	ldr	r3, [pc, #292]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	43db      	mvns	r3, r3
 800c2b0:	4947      	ldr	r1, [pc, #284]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c2b6:	4b46      	ldr	r3, [pc, #280]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2b8:	68da      	ldr	r2, [r3, #12]
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	43db      	mvns	r3, r3
 800c2be:	4944      	ldr	r1, [pc, #272]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800c2c4:	4b42      	ldr	r3, [pc, #264]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	43db      	mvns	r3, r3
 800c2cc:	4940      	ldr	r1, [pc, #256]	; (800c3d0 <HAL_GPIO_DeInit+0x1e4>)
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f003 0303 	and.w	r3, r3, #3
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	220f      	movs	r2, #15
 800c2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c2e2:	4a34      	ldr	r2, [pc, #208]	; (800c3b4 <HAL_GPIO_DeInit+0x1c8>)
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	089b      	lsrs	r3, r3, #2
 800c2e8:	3302      	adds	r3, #2
 800c2ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	43da      	mvns	r2, r3
 800c2f2:	4830      	ldr	r0, [pc, #192]	; (800c3b4 <HAL_GPIO_DeInit+0x1c8>)
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	089b      	lsrs	r3, r3, #2
 800c2f8:	400a      	ands	r2, r1
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	2103      	movs	r1, #3
 800c30a:	fa01 f303 	lsl.w	r3, r1, r3
 800c30e:	431a      	orrs	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	08da      	lsrs	r2, r3, #3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3208      	adds	r2, #8
 800c31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	220f      	movs	r2, #15
 800c32a:	fa02 f303 	lsl.w	r3, r2, r3
 800c32e:	43db      	mvns	r3, r3
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	08d2      	lsrs	r2, r2, #3
 800c334:	4019      	ands	r1, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3208      	adds	r2, #8
 800c33a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	2103      	movs	r1, #3
 800c348:	fa01 f303 	lsl.w	r3, r1, r3
 800c34c:	43db      	mvns	r3, r3
 800c34e:	401a      	ands	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	2101      	movs	r1, #1
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	fa01 f303 	lsl.w	r3, r1, r3
 800c360:	43db      	mvns	r3, r3
 800c362:	401a      	ands	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	2103      	movs	r1, #3
 800c372:	fa01 f303 	lsl.w	r3, r1, r3
 800c376:	43db      	mvns	r3, r3
 800c378:	401a      	ands	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c382:	2101      	movs	r1, #1
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	fa01 f303 	lsl.w	r3, r1, r3
 800c38a:	43db      	mvns	r3, r3
 800c38c:	401a      	ands	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	3301      	adds	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f47f af2b 	bne.w	800c1fc <HAL_GPIO_DeInit+0x10>
  }
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	48000400 	.word	0x48000400
 800c3bc:	48000800 	.word	0x48000800
 800c3c0:	48000c00 	.word	0x48000c00
 800c3c4:	48001000 	.word	0x48001000
 800c3c8:	48001400 	.word	0x48001400
 800c3cc:	48001800 	.word	0x48001800
 800c3d0:	40010400 	.word	0x40010400

0800c3d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	807b      	strh	r3, [r7, #2]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3e4:	787b      	ldrb	r3, [r7, #1]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c3ea:	887a      	ldrh	r2, [r7, #2]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c3f0:	e002      	b.n	800c3f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c3f2:	887a      	ldrh	r2, [r7, #2]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	4603      	mov	r3, r0
 800c40c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c40e:	4b08      	ldr	r3, [pc, #32]	; (800c430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c410:	695a      	ldr	r2, [r3, #20]
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	4013      	ands	r3, r2
 800c416:	2b00      	cmp	r3, #0
 800c418:	d006      	beq.n	800c428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c41a:	4a05      	ldr	r2, [pc, #20]	; (800c430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	4618      	mov	r0, r3
 800c424:	f7f6 fb08 	bl	8002a38 <HAL_GPIO_EXTI_Callback>
  }
}
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	40010400 	.word	0x40010400

0800c434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e08d      	b.n	800c562 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f8b4 	bl	800c5c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2224      	movs	r2, #36	; 0x24
 800c464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 0201 	bic.w	r2, r2, #1
 800c476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689a      	ldr	r2, [r3, #8]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d107      	bne.n	800c4ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4aa:	609a      	str	r2, [r3, #8]
 800c4ac:	e006      	b.n	800c4bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689a      	ldr	r2, [r3, #8]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c4ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d108      	bne.n	800c4d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4d2:	605a      	str	r2, [r3, #4]
 800c4d4:	e007      	b.n	800c4e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68da      	ldr	r2, [r3, #12]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	691a      	ldr	r2, [r3, #16]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	69d9      	ldr	r1, [r3, #28]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a1a      	ldr	r2, [r3, #32]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0201 	orr.w	r2, r2, #1
 800c542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e021      	b.n	800c5c0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2224      	movs	r2, #36	; 0x24
 800c580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f022 0201 	bic.w	r2, r2, #1
 800c592:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f821 	bl	800c5dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	817b      	strh	r3, [r7, #10]
 800c602:	460b      	mov	r3, r1
 800c604:	813b      	strh	r3, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b20      	cmp	r3, #32
 800c614:	f040 80f9 	bne.w	800c80a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <HAL_I2C_Mem_Write+0x34>
 800c61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c62a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e0ed      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c636:	2b01      	cmp	r3, #1
 800c638:	d101      	bne.n	800c63e <HAL_I2C_Mem_Write+0x4e>
 800c63a:	2302      	movs	r3, #2
 800c63c:	e0e6      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c646:	f7fd ff25 	bl	800a494 <HAL_GetTick>
 800c64a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	2319      	movs	r3, #25
 800c652:	2201      	movs	r2, #1
 800c654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f000 fadd 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e0d1      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2221      	movs	r2, #33	; 0x21
 800c66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2240      	movs	r2, #64	; 0x40
 800c674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a3a      	ldr	r2, [r7, #32]
 800c682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c690:	88f8      	ldrh	r0, [r7, #6]
 800c692:	893a      	ldrh	r2, [r7, #8]
 800c694:	8979      	ldrh	r1, [r7, #10]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	4603      	mov	r3, r0
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f9ed 	bl	800ca80 <I2C_RequestMemoryWrite>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e0a9      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2bff      	cmp	r3, #255	; 0xff
 800c6c0:	d90e      	bls.n	800c6e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	22ff      	movs	r2, #255	; 0xff
 800c6c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	8979      	ldrh	r1, [r7, #10]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 fc57 	bl	800cf8c <I2C_TransferConfig>
 800c6de:	e00f      	b.n	800c700 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	8979      	ldrh	r1, [r7, #10]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fc46 	bl	800cf8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 fad6 	bl	800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e07b      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	781a      	ldrb	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c72e:	b29b      	uxth	r3, r3
 800c730:	3b01      	subs	r3, #1
 800c732:	b29a      	uxth	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c73c:	3b01      	subs	r3, #1
 800c73e:	b29a      	uxth	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d034      	beq.n	800c7b8 <HAL_I2C_Mem_Write+0x1c8>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c752:	2b00      	cmp	r3, #0
 800c754:	d130      	bne.n	800c7b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	2200      	movs	r2, #0
 800c75e:	2180      	movs	r1, #128	; 0x80
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 fa59 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e04d      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c774:	b29b      	uxth	r3, r3
 800c776:	2bff      	cmp	r3, #255	; 0xff
 800c778:	d90e      	bls.n	800c798 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	22ff      	movs	r2, #255	; 0xff
 800c77e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c784:	b2da      	uxtb	r2, r3
 800c786:	8979      	ldrh	r1, [r7, #10]
 800c788:	2300      	movs	r3, #0
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 fbfb 	bl	800cf8c <I2C_TransferConfig>
 800c796:	e00f      	b.n	800c7b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	8979      	ldrh	r1, [r7, #10]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f000 fbea 	bl	800cf8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d19e      	bne.n	800c700 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f000 fabc 	bl	800cd44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e01a      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6859      	ldr	r1, [r3, #4]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <HAL_I2C_Mem_Write+0x224>)
 800c7ea:	400b      	ands	r3, r1
 800c7ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2220      	movs	r2, #32
 800c7f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	e000      	b.n	800c80c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c80a:	2302      	movs	r3, #2
  }
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	fe00e800 	.word	0xfe00e800

0800c818 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	461a      	mov	r2, r3
 800c826:	4603      	mov	r3, r0
 800c828:	817b      	strh	r3, [r7, #10]
 800c82a:	460b      	mov	r3, r1
 800c82c:	813b      	strh	r3, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	f040 80fd 	bne.w	800ca3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <HAL_I2C_Mem_Read+0x34>
 800c846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d105      	bne.n	800c858 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c852:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e0f1      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d101      	bne.n	800c866 <HAL_I2C_Mem_Read+0x4e>
 800c862:	2302      	movs	r3, #2
 800c864:	e0ea      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c86e:	f7fd fe11 	bl	800a494 <HAL_GetTick>
 800c872:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	2319      	movs	r3, #25
 800c87a:	2201      	movs	r2, #1
 800c87c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 f9c9 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e0d5      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2222      	movs	r2, #34	; 0x22
 800c894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2240      	movs	r2, #64	; 0x40
 800c89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a3a      	ldr	r2, [r7, #32]
 800c8aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c8b8:	88f8      	ldrh	r0, [r7, #6]
 800c8ba:	893a      	ldrh	r2, [r7, #8]
 800c8bc:	8979      	ldrh	r1, [r7, #10]
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 f92d 	bl	800cb28 <I2C_RequestMemoryRead>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d005      	beq.n	800c8e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e0ad      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	2bff      	cmp	r3, #255	; 0xff
 800c8e8:	d90e      	bls.n	800c908 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	22ff      	movs	r2, #255	; 0xff
 800c8ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	8979      	ldrh	r1, [r7, #10]
 800c8f8:	4b52      	ldr	r3, [pc, #328]	; (800ca44 <HAL_I2C_Mem_Read+0x22c>)
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 fb43 	bl	800cf8c <I2C_TransferConfig>
 800c906:	e00f      	b.n	800c928 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c916:	b2da      	uxtb	r2, r3
 800c918:	8979      	ldrh	r1, [r7, #10]
 800c91a:	4b4a      	ldr	r3, [pc, #296]	; (800ca44 <HAL_I2C_Mem_Read+0x22c>)
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f000 fb32 	bl	800cf8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	2200      	movs	r2, #0
 800c930:	2104      	movs	r1, #4
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f000 f970 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e07c      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	b2d2      	uxtb	r2, r2
 800c94e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c978:	b29b      	uxth	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d034      	beq.n	800c9e8 <HAL_I2C_Mem_Read+0x1d0>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c982:	2b00      	cmp	r3, #0
 800c984:	d130      	bne.n	800c9e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	2200      	movs	r2, #0
 800c98e:	2180      	movs	r1, #128	; 0x80
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 f941 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e04d      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	2bff      	cmp	r3, #255	; 0xff
 800c9a8:	d90e      	bls.n	800c9c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	22ff      	movs	r2, #255	; 0xff
 800c9ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	8979      	ldrh	r1, [r7, #10]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 fae3 	bl	800cf8c <I2C_TransferConfig>
 800c9c6:	e00f      	b.n	800c9e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	8979      	ldrh	r1, [r7, #10]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f000 fad2 	bl	800cf8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d19a      	bne.n	800c928 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 f9a4 	bl	800cd44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e01a      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6859      	ldr	r1, [r3, #4]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <HAL_I2C_Mem_Read+0x230>)
 800ca1a:	400b      	ands	r3, r1
 800ca1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	e000      	b.n	800ca3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ca3a:	2302      	movs	r3, #2
  }
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	80002400 	.word	0x80002400
 800ca48:	fe00e800 	.word	0xfe00e800

0800ca4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca5a:	b2db      	uxtb	r3, r3
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	4608      	mov	r0, r1
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	817b      	strh	r3, [r7, #10]
 800ca92:	460b      	mov	r3, r1
 800ca94:	813b      	strh	r3, [r7, #8]
 800ca96:	4613      	mov	r3, r2
 800ca98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ca9a:	88fb      	ldrh	r3, [r7, #6]
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	8979      	ldrh	r1, [r7, #10]
 800caa0:	4b20      	ldr	r3, [pc, #128]	; (800cb24 <I2C_RequestMemoryWrite+0xa4>)
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 fa6f 	bl	800cf8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	69b9      	ldr	r1, [r7, #24]
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 f8ff 	bl	800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e02c      	b.n	800cb1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cac2:	88fb      	ldrh	r3, [r7, #6]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d105      	bne.n	800cad4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cac8:	893b      	ldrh	r3, [r7, #8]
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	629a      	str	r2, [r3, #40]	; 0x28
 800cad2:	e015      	b.n	800cb00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cad4:	893b      	ldrh	r3, [r7, #8]
 800cad6:	0a1b      	lsrs	r3, r3, #8
 800cad8:	b29b      	uxth	r3, r3
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	69b9      	ldr	r1, [r7, #24]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f8e5 	bl	800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e012      	b.n	800cb1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800caf6:	893b      	ldrh	r3, [r7, #8]
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	2200      	movs	r2, #0
 800cb08:	2180      	movs	r1, #128	; 0x80
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 f884 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	80002000 	.word	0x80002000

0800cb28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af02      	add	r7, sp, #8
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	4608      	mov	r0, r1
 800cb32:	4611      	mov	r1, r2
 800cb34:	461a      	mov	r2, r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	817b      	strh	r3, [r7, #10]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	813b      	strh	r3, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cb42:	88fb      	ldrh	r3, [r7, #6]
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	8979      	ldrh	r1, [r7, #10]
 800cb48:	4b20      	ldr	r3, [pc, #128]	; (800cbcc <I2C_RequestMemoryRead+0xa4>)
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 fa1c 	bl	800cf8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb54:	69fa      	ldr	r2, [r7, #28]
 800cb56:	69b9      	ldr	r1, [r7, #24]
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 f8ac 	bl	800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e02c      	b.n	800cbc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb68:	88fb      	ldrh	r3, [r7, #6]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d105      	bne.n	800cb7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb6e:	893b      	ldrh	r3, [r7, #8]
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	629a      	str	r2, [r3, #40]	; 0x28
 800cb78:	e015      	b.n	800cba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cb7a:	893b      	ldrh	r3, [r7, #8]
 800cb7c:	0a1b      	lsrs	r3, r3, #8
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb88:	69fa      	ldr	r2, [r7, #28]
 800cb8a:	69b9      	ldr	r1, [r7, #24]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f892 	bl	800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e012      	b.n	800cbc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb9c:	893b      	ldrh	r3, [r7, #8]
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	2200      	movs	r2, #0
 800cbae:	2140      	movs	r1, #64	; 0x40
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f000 f831 	bl	800cc18 <I2C_WaitOnFlagUntilTimeout>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	80002000 	.word	0x80002000

0800cbd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	f003 0302 	and.w	r3, r3, #2
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d103      	bne.n	800cbee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2200      	movs	r2, #0
 800cbec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d007      	beq.n	800cc0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	699a      	ldr	r2, [r3, #24]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	619a      	str	r2, [r3, #24]
  }
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	603b      	str	r3, [r7, #0]
 800cc24:	4613      	mov	r3, r2
 800cc26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc28:	e031      	b.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc30:	d02d      	beq.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc32:	f7fd fc2f 	bl	800a494 <HAL_GetTick>
 800cc36:	4602      	mov	r2, r0
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d302      	bcc.n	800cc48 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d122      	bne.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	4013      	ands	r3, r2
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	bf0c      	ite	eq
 800cc58:	2301      	moveq	r3, #1
 800cc5a:	2300      	movne	r3, #0
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	461a      	mov	r2, r3
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d113      	bne.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6a:	f043 0220 	orr.w	r2, r3, #32
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2220      	movs	r2, #32
 800cc76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e00f      	b.n	800ccae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	699a      	ldr	r2, [r3, #24]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	4013      	ands	r3, r2
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	bf0c      	ite	eq
 800cc9e:	2301      	moveq	r3, #1
 800cca0:	2300      	movne	r3, #0
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	461a      	mov	r2, r3
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d0be      	beq.n	800cc2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ccc2:	e033      	b.n	800cd2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f000 f87f 	bl	800cdcc <I2C_IsErrorOccurred>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e031      	b.n	800cd3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d025      	beq.n	800cd2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cce0:	f7fd fbd8 	bl	800a494 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d302      	bcc.n	800ccf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d11a      	bne.n	800cd2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f003 0302 	and.w	r3, r3, #2
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d013      	beq.n	800cd2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd08:	f043 0220 	orr.w	r2, r3, #32
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2220      	movs	r2, #32
 800cd14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e007      	b.n	800cd3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d1c4      	bne.n	800ccc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd50:	e02f      	b.n	800cdb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f000 f838 	bl	800cdcc <I2C_IsErrorOccurred>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	e02d      	b.n	800cdc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd66:	f7fd fb95 	bl	800a494 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d302      	bcc.n	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d11a      	bne.n	800cdb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f003 0320 	and.w	r3, r3, #32
 800cd86:	2b20      	cmp	r3, #32
 800cd88:	d013      	beq.n	800cdb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8e:	f043 0220 	orr.w	r2, r3, #32
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e007      	b.n	800cdc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b20      	cmp	r3, #32
 800cdbe:	d1c8      	bne.n	800cd52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
	...

0800cdcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08a      	sub	sp, #40	; 0x28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	f003 0310 	and.w	r3, r3, #16
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d068      	beq.n	800ceca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2210      	movs	r2, #16
 800cdfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ce00:	e049      	b.n	800ce96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce08:	d045      	beq.n	800ce96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ce0a:	f7fd fb43 	bl	800a494 <HAL_GetTick>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d302      	bcc.n	800ce20 <I2C_IsErrorOccurred+0x54>
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d13a      	bne.n	800ce96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	699b      	ldr	r3, [r3, #24]
 800ce3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce42:	d121      	bne.n	800ce88 <I2C_IsErrorOccurred+0xbc>
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce4a:	d01d      	beq.n	800ce88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ce4c:	7cfb      	ldrb	r3, [r7, #19]
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	d01a      	beq.n	800ce88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ce62:	f7fd fb17 	bl	800a494 <HAL_GetTick>
 800ce66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce68:	e00e      	b.n	800ce88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ce6a:	f7fd fb13 	bl	800a494 <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b19      	cmp	r3, #25
 800ce76:	d907      	bls.n	800ce88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	f043 0320 	orr.w	r3, r3, #32
 800ce7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800ce86:	e006      	b.n	800ce96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	d1e9      	bne.n	800ce6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	f003 0320 	and.w	r3, r3, #32
 800cea0:	2b20      	cmp	r3, #32
 800cea2:	d003      	beq.n	800ceac <I2C_IsErrorOccurred+0xe0>
 800cea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0aa      	beq.n	800ce02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d103      	bne.n	800cebc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2220      	movs	r2, #32
 800ceba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	f043 0304 	orr.w	r3, r3, #4
 800cec2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	f043 0301 	orr.w	r3, r3, #1
 800cee2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ceec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00b      	beq.n	800cf16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	f043 0308 	orr.w	r3, r3, #8
 800cf04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	f043 0302 	orr.w	r3, r3, #2
 800cf26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800cf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d01c      	beq.n	800cf7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff fe45 	bl	800cbd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6859      	ldr	r1, [r3, #4]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <I2C_IsErrorOccurred+0x1bc>)
 800cf52:	400b      	ands	r3, r1
 800cf54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800cf7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3728      	adds	r7, #40	; 0x28
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	fe00e800 	.word	0xfe00e800

0800cf8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	460b      	mov	r3, r1
 800cf98:	817b      	strh	r3, [r7, #10]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf9e:	897b      	ldrh	r3, [r7, #10]
 800cfa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cfa4:	7a7b      	ldrb	r3, [r7, #9]
 800cfa6:	041b      	lsls	r3, r3, #16
 800cfa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cfac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	0d5b      	lsrs	r3, r3, #21
 800cfc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cfca:	4b08      	ldr	r3, [pc, #32]	; (800cfec <I2C_TransferConfig+0x60>)
 800cfcc:	430b      	orrs	r3, r1
 800cfce:	43db      	mvns	r3, r3
 800cfd0:	ea02 0103 	and.w	r1, r2, r3
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cfde:	bf00      	nop
 800cfe0:	371c      	adds	r7, #28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	03ff63ff 	.word	0x03ff63ff

0800cff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b20      	cmp	r3, #32
 800d004:	d138      	bne.n	800d078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d101      	bne.n	800d014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d010:	2302      	movs	r3, #2
 800d012:	e032      	b.n	800d07a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2224      	movs	r2, #36	; 0x24
 800d020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f022 0201 	bic.w	r2, r2, #1
 800d032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6819      	ldr	r1, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	430a      	orrs	r2, r1
 800d052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f042 0201 	orr.w	r2, r2, #1
 800d062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	e000      	b.n	800d07a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d078:	2302      	movs	r3, #2
  }
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b20      	cmp	r3, #32
 800d09a:	d139      	bne.n	800d110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d101      	bne.n	800d0aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	e033      	b.n	800d112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2224      	movs	r2, #36	; 0x24
 800d0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f022 0201 	bic.w	r2, r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d0d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	021b      	lsls	r3, r3, #8
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0201 	orr.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2220      	movs	r2, #32
 800d100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	e000      	b.n	800d112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d110:	2302      	movs	r3, #2
  }
}
 800d112:	4618      	mov	r0, r3
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
	...

0800d120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800d124:	4b04      	ldr	r3, [pc, #16]	; (800d138 <HAL_PWREx_GetVoltageRange+0x18>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	40007000 	.word	0x40007000

0800d13c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d14a:	d130      	bne.n	800d1ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800d14c:	4b23      	ldr	r3, [pc, #140]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d158:	d038      	beq.n	800d1cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d15a:	4b20      	ldr	r3, [pc, #128]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d162:	4a1e      	ldr	r2, [pc, #120]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d16a:	4b1d      	ldr	r3, [pc, #116]	; (800d1e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2232      	movs	r2, #50	; 0x32
 800d170:	fb02 f303 	mul.w	r3, r2, r3
 800d174:	4a1b      	ldr	r2, [pc, #108]	; (800d1e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d176:	fba2 2303 	umull	r2, r3, r2, r3
 800d17a:	0c9b      	lsrs	r3, r3, #18
 800d17c:	3301      	adds	r3, #1
 800d17e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d180:	e002      	b.n	800d188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3b01      	subs	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d188:	4b14      	ldr	r3, [pc, #80]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d194:	d102      	bne.n	800d19c <HAL_PWREx_ControlVoltageScaling+0x60>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f2      	bne.n	800d182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d19c:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1a8:	d110      	bne.n	800d1cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e00f      	b.n	800d1ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1ba:	d007      	beq.n	800d1cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d1bc:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d1c4:	4a05      	ldr	r2, [pc, #20]	; (800d1dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d1c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	40007000 	.word	0x40007000
 800d1e0:	20000004 	.word	0x20000004
 800d1e4:	431bde83 	.word	0x431bde83

0800d1e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e3ca      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1fa:	4b97      	ldr	r3, [pc, #604]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f003 030c 	and.w	r3, r3, #12
 800d202:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d204:	4b94      	ldr	r3, [pc, #592]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f003 0303 	and.w	r3, r3, #3
 800d20c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 0310 	and.w	r3, r3, #16
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 80e4 	beq.w	800d3e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d007      	beq.n	800d232 <HAL_RCC_OscConfig+0x4a>
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b0c      	cmp	r3, #12
 800d226:	f040 808b 	bne.w	800d340 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	f040 8087 	bne.w	800d340 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d232:	4b89      	ldr	r3, [pc, #548]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0302 	and.w	r3, r3, #2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d005      	beq.n	800d24a <HAL_RCC_OscConfig+0x62>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e3a2      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1a      	ldr	r2, [r3, #32]
 800d24e:	4b82      	ldr	r3, [pc, #520]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	2b00      	cmp	r3, #0
 800d258:	d004      	beq.n	800d264 <HAL_RCC_OscConfig+0x7c>
 800d25a:	4b7f      	ldr	r3, [pc, #508]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d262:	e005      	b.n	800d270 <HAL_RCC_OscConfig+0x88>
 800d264:	4b7c      	ldr	r3, [pc, #496]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d26a:	091b      	lsrs	r3, r3, #4
 800d26c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d270:	4293      	cmp	r3, r2
 800d272:	d223      	bcs.n	800d2bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 fd1d 	bl	800dcb8 <RCC_SetFlashLatencyFromMSIRange>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e383      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d288:	4b73      	ldr	r3, [pc, #460]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a72      	ldr	r2, [pc, #456]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d28e:	f043 0308 	orr.w	r3, r3, #8
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	4b70      	ldr	r3, [pc, #448]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	496d      	ldr	r1, [pc, #436]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d2a6:	4b6c      	ldr	r3, [pc, #432]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	4968      	ldr	r1, [pc, #416]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	604b      	str	r3, [r1, #4]
 800d2ba:	e025      	b.n	800d308 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d2bc:	4b66      	ldr	r3, [pc, #408]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a65      	ldr	r2, [pc, #404]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2c2:	f043 0308 	orr.w	r3, r3, #8
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	4b63      	ldr	r3, [pc, #396]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	4960      	ldr	r1, [pc, #384]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d2da:	4b5f      	ldr	r3, [pc, #380]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	021b      	lsls	r3, r3, #8
 800d2e8:	495b      	ldr	r1, [pc, #364]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d109      	bne.n	800d308 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a1b      	ldr	r3, [r3, #32]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 fcdd 	bl	800dcb8 <RCC_SetFlashLatencyFromMSIRange>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	e343      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d308:	f000 fc4a 	bl	800dba0 <HAL_RCC_GetSysClockFreq>
 800d30c:	4602      	mov	r2, r0
 800d30e:	4b52      	ldr	r3, [pc, #328]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	091b      	lsrs	r3, r3, #4
 800d314:	f003 030f 	and.w	r3, r3, #15
 800d318:	4950      	ldr	r1, [pc, #320]	; (800d45c <HAL_RCC_OscConfig+0x274>)
 800d31a:	5ccb      	ldrb	r3, [r1, r3]
 800d31c:	f003 031f 	and.w	r3, r3, #31
 800d320:	fa22 f303 	lsr.w	r3, r2, r3
 800d324:	4a4e      	ldr	r2, [pc, #312]	; (800d460 <HAL_RCC_OscConfig+0x278>)
 800d326:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d328:	4b4e      	ldr	r3, [pc, #312]	; (800d464 <HAL_RCC_OscConfig+0x27c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fd f861 	bl	800a3f4 <HAL_InitTick>
 800d332:	4603      	mov	r3, r0
 800d334:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d336:	7bfb      	ldrb	r3, [r7, #15]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d052      	beq.n	800d3e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	e327      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d032      	beq.n	800d3ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d348:	4b43      	ldr	r3, [pc, #268]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a42      	ldr	r2, [pc, #264]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d34e:	f043 0301 	orr.w	r3, r3, #1
 800d352:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d354:	f7fd f89e 	bl	800a494 <HAL_GetTick>
 800d358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d35a:	e008      	b.n	800d36e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d35c:	f7fd f89a 	bl	800a494 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b02      	cmp	r3, #2
 800d368:	d901      	bls.n	800d36e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e310      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d36e:	4b3a      	ldr	r3, [pc, #232]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0f0      	beq.n	800d35c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d37a:	4b37      	ldr	r3, [pc, #220]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a36      	ldr	r2, [pc, #216]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d380:	f043 0308 	orr.w	r3, r3, #8
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	4b34      	ldr	r3, [pc, #208]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	4931      	ldr	r1, [pc, #196]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d394:	4313      	orrs	r3, r2
 800d396:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d398:	4b2f      	ldr	r3, [pc, #188]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	69db      	ldr	r3, [r3, #28]
 800d3a4:	021b      	lsls	r3, r3, #8
 800d3a6:	492c      	ldr	r1, [pc, #176]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	604b      	str	r3, [r1, #4]
 800d3ac:	e01a      	b.n	800d3e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d3ae:	4b2a      	ldr	r3, [pc, #168]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a29      	ldr	r2, [pc, #164]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d3b4:	f023 0301 	bic.w	r3, r3, #1
 800d3b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d3ba:	f7fd f86b 	bl	800a494 <HAL_GetTick>
 800d3be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d3c0:	e008      	b.n	800d3d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d3c2:	f7fd f867 	bl	800a494 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d901      	bls.n	800d3d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e2dd      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d3d4:	4b20      	ldr	r3, [pc, #128]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1f0      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x1da>
 800d3e0:	e000      	b.n	800d3e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d3e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d074      	beq.n	800d4da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b08      	cmp	r3, #8
 800d3f4:	d005      	beq.n	800d402 <HAL_RCC_OscConfig+0x21a>
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2b0c      	cmp	r3, #12
 800d3fa:	d10e      	bne.n	800d41a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d10b      	bne.n	800d41a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d064      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x2f0>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d160      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e2ba      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d422:	d106      	bne.n	800d432 <HAL_RCC_OscConfig+0x24a>
 800d424:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a0b      	ldr	r2, [pc, #44]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d42a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d42e:	6013      	str	r3, [r2, #0]
 800d430:	e026      	b.n	800d480 <HAL_RCC_OscConfig+0x298>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d43a:	d115      	bne.n	800d468 <HAL_RCC_OscConfig+0x280>
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a05      	ldr	r2, [pc, #20]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a02      	ldr	r2, [pc, #8]	; (800d458 <HAL_RCC_OscConfig+0x270>)
 800d44e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	e014      	b.n	800d480 <HAL_RCC_OscConfig+0x298>
 800d456:	bf00      	nop
 800d458:	40021000 	.word	0x40021000
 800d45c:	08015174 	.word	0x08015174
 800d460:	20000004 	.word	0x20000004
 800d464:	20000194 	.word	0x20000194
 800d468:	4ba0      	ldr	r3, [pc, #640]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a9f      	ldr	r2, [pc, #636]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d46e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	4b9d      	ldr	r3, [pc, #628]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a9c      	ldr	r2, [pc, #624]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d47a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d47e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d013      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d488:	f7fd f804 	bl	800a494 <HAL_GetTick>
 800d48c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d48e:	e008      	b.n	800d4a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d490:	f7fd f800 	bl	800a494 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b64      	cmp	r3, #100	; 0x64
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e276      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d4a2:	4b92      	ldr	r3, [pc, #584]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f0      	beq.n	800d490 <HAL_RCC_OscConfig+0x2a8>
 800d4ae:	e014      	b.n	800d4da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4b0:	f7fc fff0 	bl	800a494 <HAL_GetTick>
 800d4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d4b6:	e008      	b.n	800d4ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4b8:	f7fc ffec 	bl	800a494 <HAL_GetTick>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	2b64      	cmp	r3, #100	; 0x64
 800d4c4:	d901      	bls.n	800d4ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e262      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d4ca:	4b88      	ldr	r3, [pc, #544]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1f0      	bne.n	800d4b8 <HAL_RCC_OscConfig+0x2d0>
 800d4d6:	e000      	b.n	800d4da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d060      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d005      	beq.n	800d4f8 <HAL_RCC_OscConfig+0x310>
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	2b0c      	cmp	r3, #12
 800d4f0:	d119      	bne.n	800d526 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d116      	bne.n	800d526 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d4f8:	4b7c      	ldr	r3, [pc, #496]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d500:	2b00      	cmp	r3, #0
 800d502:	d005      	beq.n	800d510 <HAL_RCC_OscConfig+0x328>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e23f      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d510:	4b76      	ldr	r3, [pc, #472]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	061b      	lsls	r3, r3, #24
 800d51e:	4973      	ldr	r1, [pc, #460]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d520:	4313      	orrs	r3, r2
 800d522:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d524:	e040      	b.n	800d5a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d023      	beq.n	800d576 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d52e:	4b6f      	ldr	r3, [pc, #444]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a6e      	ldr	r2, [pc, #440]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d53a:	f7fc ffab 	bl	800a494 <HAL_GetTick>
 800d53e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d540:	e008      	b.n	800d554 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d542:	f7fc ffa7 	bl	800a494 <HAL_GetTick>
 800d546:	4602      	mov	r2, r0
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d901      	bls.n	800d554 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d550:	2303      	movs	r3, #3
 800d552:	e21d      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d554:	4b65      	ldr	r3, [pc, #404]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0f0      	beq.n	800d542 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d560:	4b62      	ldr	r3, [pc, #392]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	061b      	lsls	r3, r3, #24
 800d56e:	495f      	ldr	r1, [pc, #380]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d570:	4313      	orrs	r3, r2
 800d572:	604b      	str	r3, [r1, #4]
 800d574:	e018      	b.n	800d5a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d576:	4b5d      	ldr	r3, [pc, #372]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a5c      	ldr	r2, [pc, #368]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d582:	f7fc ff87 	bl	800a494 <HAL_GetTick>
 800d586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d588:	e008      	b.n	800d59c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d58a:	f7fc ff83 	bl	800a494 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b02      	cmp	r3, #2
 800d596:	d901      	bls.n	800d59c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e1f9      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d59c:	4b53      	ldr	r3, [pc, #332]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1f0      	bne.n	800d58a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 0308 	and.w	r3, r3, #8
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d03c      	beq.n	800d62e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01c      	beq.n	800d5f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5bc:	4b4b      	ldr	r3, [pc, #300]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d5be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5c2:	4a4a      	ldr	r2, [pc, #296]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d5c4:	f043 0301 	orr.w	r3, r3, #1
 800d5c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5cc:	f7fc ff62 	bl	800a494 <HAL_GetTick>
 800d5d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d5d2:	e008      	b.n	800d5e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5d4:	f7fc ff5e 	bl	800a494 <HAL_GetTick>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d901      	bls.n	800d5e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e1d4      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d5e6:	4b41      	ldr	r3, [pc, #260]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d5e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5ec:	f003 0302 	and.w	r3, r3, #2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d0ef      	beq.n	800d5d4 <HAL_RCC_OscConfig+0x3ec>
 800d5f4:	e01b      	b.n	800d62e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5f6:	4b3d      	ldr	r3, [pc, #244]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d5f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5fc:	4a3b      	ldr	r2, [pc, #236]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d5fe:	f023 0301 	bic.w	r3, r3, #1
 800d602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d606:	f7fc ff45 	bl	800a494 <HAL_GetTick>
 800d60a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d60c:	e008      	b.n	800d620 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d60e:	f7fc ff41 	bl	800a494 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d901      	bls.n	800d620 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e1b7      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d620:	4b32      	ldr	r3, [pc, #200]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d626:	f003 0302 	and.w	r3, r3, #2
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1ef      	bne.n	800d60e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 80a6 	beq.w	800d788 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d63c:	2300      	movs	r3, #0
 800d63e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d640:	4b2a      	ldr	r3, [pc, #168]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10d      	bne.n	800d668 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d64c:	4b27      	ldr	r3, [pc, #156]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d650:	4a26      	ldr	r2, [pc, #152]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d656:	6593      	str	r3, [r2, #88]	; 0x58
 800d658:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d65c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d660:	60bb      	str	r3, [r7, #8]
 800d662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d664:	2301      	movs	r3, #1
 800d666:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d668:	4b21      	ldr	r3, [pc, #132]	; (800d6f0 <HAL_RCC_OscConfig+0x508>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d670:	2b00      	cmp	r3, #0
 800d672:	d118      	bne.n	800d6a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d674:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <HAL_RCC_OscConfig+0x508>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a1d      	ldr	r2, [pc, #116]	; (800d6f0 <HAL_RCC_OscConfig+0x508>)
 800d67a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d67e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d680:	f7fc ff08 	bl	800a494 <HAL_GetTick>
 800d684:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d686:	e008      	b.n	800d69a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d688:	f7fc ff04 	bl	800a494 <HAL_GetTick>
 800d68c:	4602      	mov	r2, r0
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	2b02      	cmp	r3, #2
 800d694:	d901      	bls.n	800d69a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d696:	2303      	movs	r3, #3
 800d698:	e17a      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <HAL_RCC_OscConfig+0x508>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0f0      	beq.n	800d688 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d108      	bne.n	800d6c0 <HAL_RCC_OscConfig+0x4d8>
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b4:	4a0d      	ldr	r2, [pc, #52]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6b6:	f043 0301 	orr.w	r3, r3, #1
 800d6ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6be:	e029      	b.n	800d714 <HAL_RCC_OscConfig+0x52c>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	2b05      	cmp	r3, #5
 800d6c6:	d115      	bne.n	800d6f4 <HAL_RCC_OscConfig+0x50c>
 800d6c8:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ce:	4a07      	ldr	r2, [pc, #28]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6d0:	f043 0304 	orr.w	r3, r3, #4
 800d6d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6d8:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6de:	4a03      	ldr	r2, [pc, #12]	; (800d6ec <HAL_RCC_OscConfig+0x504>)
 800d6e0:	f043 0301 	orr.w	r3, r3, #1
 800d6e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6e8:	e014      	b.n	800d714 <HAL_RCC_OscConfig+0x52c>
 800d6ea:	bf00      	nop
 800d6ec:	40021000 	.word	0x40021000
 800d6f0:	40007000 	.word	0x40007000
 800d6f4:	4b9c      	ldr	r3, [pc, #624]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6fa:	4a9b      	ldr	r2, [pc, #620]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d6fc:	f023 0301 	bic.w	r3, r3, #1
 800d700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d704:	4b98      	ldr	r3, [pc, #608]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d70a:	4a97      	ldr	r2, [pc, #604]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d70c:	f023 0304 	bic.w	r3, r3, #4
 800d710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d016      	beq.n	800d74a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d71c:	f7fc feba 	bl	800a494 <HAL_GetTick>
 800d720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d722:	e00a      	b.n	800d73a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d724:	f7fc feb6 	bl	800a494 <HAL_GetTick>
 800d728:	4602      	mov	r2, r0
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d732:	4293      	cmp	r3, r2
 800d734:	d901      	bls.n	800d73a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e12a      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d73a:	4b8b      	ldr	r3, [pc, #556]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d740:	f003 0302 	and.w	r3, r3, #2
 800d744:	2b00      	cmp	r3, #0
 800d746:	d0ed      	beq.n	800d724 <HAL_RCC_OscConfig+0x53c>
 800d748:	e015      	b.n	800d776 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d74a:	f7fc fea3 	bl	800a494 <HAL_GetTick>
 800d74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d750:	e00a      	b.n	800d768 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d752:	f7fc fe9f 	bl	800a494 <HAL_GetTick>
 800d756:	4602      	mov	r2, r0
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d760:	4293      	cmp	r3, r2
 800d762:	d901      	bls.n	800d768 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e113      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d768:	4b7f      	ldr	r3, [pc, #508]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1ed      	bne.n	800d752 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d776:	7ffb      	ldrb	r3, [r7, #31]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d105      	bne.n	800d788 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d77c:	4b7a      	ldr	r3, [pc, #488]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d780:	4a79      	ldr	r2, [pc, #484]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d786:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 80fe 	beq.w	800d98e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d796:	2b02      	cmp	r3, #2
 800d798:	f040 80d0 	bne.w	800d93c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d79c:	4b72      	ldr	r3, [pc, #456]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f003 0203 	and.w	r2, r3, #3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d130      	bne.n	800d812 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d127      	bne.n	800d812 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d11f      	bne.n	800d812 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d7dc:	2a07      	cmp	r2, #7
 800d7de:	bf14      	ite	ne
 800d7e0:	2201      	movne	r2, #1
 800d7e2:	2200      	moveq	r2, #0
 800d7e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d113      	bne.n	800d812 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f4:	085b      	lsrs	r3, r3, #1
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d109      	bne.n	800d812 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d808:	085b      	lsrs	r3, r3, #1
 800d80a:	3b01      	subs	r3, #1
 800d80c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d80e:	429a      	cmp	r2, r3
 800d810:	d06e      	beq.n	800d8f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	2b0c      	cmp	r3, #12
 800d816:	d069      	beq.n	800d8ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d818:	4b53      	ldr	r3, [pc, #332]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d105      	bne.n	800d830 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d824:	4b50      	ldr	r3, [pc, #320]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	e0ad      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d834:	4b4c      	ldr	r3, [pc, #304]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a4b      	ldr	r2, [pc, #300]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d83e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d840:	f7fc fe28 	bl	800a494 <HAL_GetTick>
 800d844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d846:	e008      	b.n	800d85a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d848:	f7fc fe24 	bl	800a494 <HAL_GetTick>
 800d84c:	4602      	mov	r2, r0
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	2b02      	cmp	r3, #2
 800d854:	d901      	bls.n	800d85a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d856:	2303      	movs	r3, #3
 800d858:	e09a      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d85a:	4b43      	ldr	r3, [pc, #268]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1f0      	bne.n	800d848 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d866:	4b40      	ldr	r3, [pc, #256]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	4b40      	ldr	r3, [pc, #256]	; (800d96c <HAL_RCC_OscConfig+0x784>)
 800d86c:	4013      	ands	r3, r2
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d876:	3a01      	subs	r2, #1
 800d878:	0112      	lsls	r2, r2, #4
 800d87a:	4311      	orrs	r1, r2
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d880:	0212      	lsls	r2, r2, #8
 800d882:	4311      	orrs	r1, r2
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d888:	0852      	lsrs	r2, r2, #1
 800d88a:	3a01      	subs	r2, #1
 800d88c:	0552      	lsls	r2, r2, #21
 800d88e:	4311      	orrs	r1, r2
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d894:	0852      	lsrs	r2, r2, #1
 800d896:	3a01      	subs	r2, #1
 800d898:	0652      	lsls	r2, r2, #25
 800d89a:	4311      	orrs	r1, r2
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d8a0:	0912      	lsrs	r2, r2, #4
 800d8a2:	0452      	lsls	r2, r2, #17
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	4930      	ldr	r1, [pc, #192]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d8ac:	4b2e      	ldr	r3, [pc, #184]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a2d      	ldr	r2, [pc, #180]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d8b8:	4b2b      	ldr	r3, [pc, #172]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	4a2a      	ldr	r2, [pc, #168]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d8c4:	f7fc fde6 	bl	800a494 <HAL_GetTick>
 800d8c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d8ca:	e008      	b.n	800d8de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8cc:	f7fc fde2 	bl	800a494 <HAL_GetTick>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d901      	bls.n	800d8de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d8da:	2303      	movs	r3, #3
 800d8dc:	e058      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d8de:	4b22      	ldr	r3, [pc, #136]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d0f0      	beq.n	800d8cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d8ea:	e050      	b.n	800d98e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e04f      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d8f0:	4b1d      	ldr	r3, [pc, #116]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d148      	bne.n	800d98e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d8fc:	4b1a      	ldr	r3, [pc, #104]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a19      	ldr	r2, [pc, #100]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d906:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d908:	4b17      	ldr	r3, [pc, #92]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	4a16      	ldr	r2, [pc, #88]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d90e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d912:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d914:	f7fc fdbe 	bl	800a494 <HAL_GetTick>
 800d918:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d91a:	e008      	b.n	800d92e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d91c:	f7fc fdba 	bl	800a494 <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b02      	cmp	r3, #2
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e030      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d92e:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0f0      	beq.n	800d91c <HAL_RCC_OscConfig+0x734>
 800d93a:	e028      	b.n	800d98e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b0c      	cmp	r3, #12
 800d940:	d023      	beq.n	800d98a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d942:	4b09      	ldr	r3, [pc, #36]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a08      	ldr	r2, [pc, #32]	; (800d968 <HAL_RCC_OscConfig+0x780>)
 800d948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d94c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d94e:	f7fc fda1 	bl	800a494 <HAL_GetTick>
 800d952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d954:	e00c      	b.n	800d970 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d956:	f7fc fd9d 	bl	800a494 <HAL_GetTick>
 800d95a:	4602      	mov	r2, r0
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	2b02      	cmp	r3, #2
 800d962:	d905      	bls.n	800d970 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e013      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
 800d968:	40021000 	.word	0x40021000
 800d96c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d970:	4b09      	ldr	r3, [pc, #36]	; (800d998 <HAL_RCC_OscConfig+0x7b0>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1ec      	bne.n	800d956 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d97c:	4b06      	ldr	r3, [pc, #24]	; (800d998 <HAL_RCC_OscConfig+0x7b0>)
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	4905      	ldr	r1, [pc, #20]	; (800d998 <HAL_RCC_OscConfig+0x7b0>)
 800d982:	4b06      	ldr	r3, [pc, #24]	; (800d99c <HAL_RCC_OscConfig+0x7b4>)
 800d984:	4013      	ands	r3, r2
 800d986:	60cb      	str	r3, [r1, #12]
 800d988:	e001      	b.n	800d98e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3720      	adds	r7, #32
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	40021000 	.word	0x40021000
 800d99c:	feeefffc 	.word	0xfeeefffc

0800d9a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e0e7      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d9b4:	4b75      	ldr	r3, [pc, #468]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f003 0307 	and.w	r3, r3, #7
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d910      	bls.n	800d9e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9c2:	4b72      	ldr	r3, [pc, #456]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f023 0207 	bic.w	r2, r3, #7
 800d9ca:	4970      	ldr	r1, [pc, #448]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9d2:	4b6e      	ldr	r3, [pc, #440]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 0307 	and.w	r3, r3, #7
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d001      	beq.n	800d9e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e0cf      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 0302 	and.w	r3, r3, #2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d010      	beq.n	800da12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	4b66      	ldr	r3, [pc, #408]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d908      	bls.n	800da12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da00:	4b63      	ldr	r3, [pc, #396]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	4960      	ldr	r1, [pc, #384]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d04c      	beq.n	800dab8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d107      	bne.n	800da36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800da26:	4b5a      	ldr	r3, [pc, #360]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d121      	bne.n	800da76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e0a6      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d107      	bne.n	800da4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da3e:	4b54      	ldr	r3, [pc, #336]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d115      	bne.n	800da76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e09a      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d107      	bne.n	800da66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800da56:	4b4e      	ldr	r3, [pc, #312]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d109      	bne.n	800da76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e08e      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da66:	4b4a      	ldr	r3, [pc, #296]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	e086      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800da76:	4b46      	ldr	r3, [pc, #280]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f023 0203 	bic.w	r2, r3, #3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	4943      	ldr	r1, [pc, #268]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800da84:	4313      	orrs	r3, r2
 800da86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da88:	f7fc fd04 	bl	800a494 <HAL_GetTick>
 800da8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da8e:	e00a      	b.n	800daa6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da90:	f7fc fd00 	bl	800a494 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d901      	bls.n	800daa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800daa2:	2303      	movs	r3, #3
 800daa4:	e06e      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daa6:	4b3a      	ldr	r3, [pc, #232]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f003 020c 	and.w	r2, r3, #12
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d1eb      	bne.n	800da90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d010      	beq.n	800dae6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	4b31      	ldr	r3, [pc, #196]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d208      	bcs.n	800dae6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dad4:	4b2e      	ldr	r3, [pc, #184]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	492b      	ldr	r1, [pc, #172]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dae6:	4b29      	ldr	r3, [pc, #164]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d210      	bcs.n	800db16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800daf4:	4b25      	ldr	r3, [pc, #148]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f023 0207 	bic.w	r2, r3, #7
 800dafc:	4923      	ldr	r1, [pc, #140]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	4313      	orrs	r3, r2
 800db02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db04:	4b21      	ldr	r3, [pc, #132]	; (800db8c <HAL_RCC_ClockConfig+0x1ec>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f003 0307 	and.w	r3, r3, #7
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d001      	beq.n	800db16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e036      	b.n	800db84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0304 	and.w	r3, r3, #4
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d008      	beq.n	800db34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db22:	4b1b      	ldr	r3, [pc, #108]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	4918      	ldr	r1, [pc, #96]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800db30:	4313      	orrs	r3, r2
 800db32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 0308 	and.w	r3, r3, #8
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800db40:	4b13      	ldr	r3, [pc, #76]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	4910      	ldr	r1, [pc, #64]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800db50:	4313      	orrs	r3, r2
 800db52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800db54:	f000 f824 	bl	800dba0 <HAL_RCC_GetSysClockFreq>
 800db58:	4602      	mov	r2, r0
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <HAL_RCC_ClockConfig+0x1f0>)
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	091b      	lsrs	r3, r3, #4
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	490b      	ldr	r1, [pc, #44]	; (800db94 <HAL_RCC_ClockConfig+0x1f4>)
 800db66:	5ccb      	ldrb	r3, [r1, r3]
 800db68:	f003 031f 	and.w	r3, r3, #31
 800db6c:	fa22 f303 	lsr.w	r3, r2, r3
 800db70:	4a09      	ldr	r2, [pc, #36]	; (800db98 <HAL_RCC_ClockConfig+0x1f8>)
 800db72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800db74:	4b09      	ldr	r3, [pc, #36]	; (800db9c <HAL_RCC_ClockConfig+0x1fc>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fc fc3b 	bl	800a3f4 <HAL_InitTick>
 800db7e:	4603      	mov	r3, r0
 800db80:	72fb      	strb	r3, [r7, #11]

  return status;
 800db82:	7afb      	ldrb	r3, [r7, #11]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	40022000 	.word	0x40022000
 800db90:	40021000 	.word	0x40021000
 800db94:	08015174 	.word	0x08015174
 800db98:	20000004 	.word	0x20000004
 800db9c:	20000194 	.word	0x20000194

0800dba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b089      	sub	sp, #36	; 0x24
 800dba4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800dba6:	2300      	movs	r3, #0
 800dba8:	61fb      	str	r3, [r7, #28]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbae:	4b3e      	ldr	r3, [pc, #248]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	f003 030c 	and.w	r3, r3, #12
 800dbb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dbb8:	4b3b      	ldr	r3, [pc, #236]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	f003 0303 	and.w	r3, r3, #3
 800dbc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <HAL_RCC_GetSysClockFreq+0x34>
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b0c      	cmp	r3, #12
 800dbcc:	d121      	bne.n	800dc12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d11e      	bne.n	800dc12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800dbd4:	4b34      	ldr	r3, [pc, #208]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0308 	and.w	r3, r3, #8
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d107      	bne.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800dbe0:	4b31      	ldr	r3, [pc, #196]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dbe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbe6:	0a1b      	lsrs	r3, r3, #8
 800dbe8:	f003 030f 	and.w	r3, r3, #15
 800dbec:	61fb      	str	r3, [r7, #28]
 800dbee:	e005      	b.n	800dbfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800dbf0:	4b2d      	ldr	r3, [pc, #180]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	091b      	lsrs	r3, r3, #4
 800dbf6:	f003 030f 	and.w	r3, r3, #15
 800dbfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800dbfc:	4a2b      	ldr	r2, [pc, #172]	; (800dcac <HAL_RCC_GetSysClockFreq+0x10c>)
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10d      	bne.n	800dc28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dc10:	e00a      	b.n	800dc28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d102      	bne.n	800dc1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dc18:	4b25      	ldr	r3, [pc, #148]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x110>)
 800dc1a:	61bb      	str	r3, [r7, #24]
 800dc1c:	e004      	b.n	800dc28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b08      	cmp	r3, #8
 800dc22:	d101      	bne.n	800dc28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800dc24:	4b23      	ldr	r3, [pc, #140]	; (800dcb4 <HAL_RCC_GetSysClockFreq+0x114>)
 800dc26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	2b0c      	cmp	r3, #12
 800dc2c:	d134      	bne.n	800dc98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dc2e:	4b1e      	ldr	r3, [pc, #120]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d003      	beq.n	800dc46 <HAL_RCC_GetSysClockFreq+0xa6>
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	d003      	beq.n	800dc4c <HAL_RCC_GetSysClockFreq+0xac>
 800dc44:	e005      	b.n	800dc52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800dc46:	4b1a      	ldr	r3, [pc, #104]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x110>)
 800dc48:	617b      	str	r3, [r7, #20]
      break;
 800dc4a:	e005      	b.n	800dc58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800dc4c:	4b19      	ldr	r3, [pc, #100]	; (800dcb4 <HAL_RCC_GetSysClockFreq+0x114>)
 800dc4e:	617b      	str	r3, [r7, #20]
      break;
 800dc50:	e002      	b.n	800dc58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	617b      	str	r3, [r7, #20]
      break;
 800dc56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dc58:	4b13      	ldr	r3, [pc, #76]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	091b      	lsrs	r3, r3, #4
 800dc5e:	f003 0307 	and.w	r3, r3, #7
 800dc62:	3301      	adds	r3, #1
 800dc64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800dc66:	4b10      	ldr	r3, [pc, #64]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	0a1b      	lsrs	r3, r3, #8
 800dc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	fb03 f202 	mul.w	r2, r3, r2
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	; (800dca8 <HAL_RCC_GetSysClockFreq+0x108>)
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	0e5b      	lsrs	r3, r3, #25
 800dc84:	f003 0303 	and.w	r3, r3, #3
 800dc88:	3301      	adds	r3, #1
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800dc98:	69bb      	ldr	r3, [r7, #24]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3724      	adds	r7, #36	; 0x24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	40021000 	.word	0x40021000
 800dcac:	08015184 	.word	0x08015184
 800dcb0:	00f42400 	.word	0x00f42400
 800dcb4:	007a1200 	.word	0x007a1200

0800dcb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dcc4:	4b2a      	ldr	r3, [pc, #168]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dcc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d003      	beq.n	800dcd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800dcd0:	f7ff fa26 	bl	800d120 <HAL_PWREx_GetVoltageRange>
 800dcd4:	6178      	str	r0, [r7, #20]
 800dcd6:	e014      	b.n	800dd02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800dcd8:	4b25      	ldr	r3, [pc, #148]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dcda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcdc:	4a24      	ldr	r2, [pc, #144]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dcde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dce2:	6593      	str	r3, [r2, #88]	; 0x58
 800dce4:	4b22      	ldr	r3, [pc, #136]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800dcf0:	f7ff fa16 	bl	800d120 <HAL_PWREx_GetVoltageRange>
 800dcf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800dcf6:	4b1e      	ldr	r3, [pc, #120]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dcf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcfa:	4a1d      	ldr	r2, [pc, #116]	; (800dd70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dcfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd08:	d10b      	bne.n	800dd22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b80      	cmp	r3, #128	; 0x80
 800dd0e:	d919      	bls.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2ba0      	cmp	r3, #160	; 0xa0
 800dd14:	d902      	bls.n	800dd1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800dd16:	2302      	movs	r3, #2
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	e013      	b.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	613b      	str	r3, [r7, #16]
 800dd20:	e010      	b.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b80      	cmp	r3, #128	; 0x80
 800dd26:	d902      	bls.n	800dd2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800dd28:	2303      	movs	r3, #3
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	e00a      	b.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b80      	cmp	r3, #128	; 0x80
 800dd32:	d102      	bne.n	800dd3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800dd34:	2302      	movs	r3, #2
 800dd36:	613b      	str	r3, [r7, #16]
 800dd38:	e004      	b.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b70      	cmp	r3, #112	; 0x70
 800dd3e:	d101      	bne.n	800dd44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800dd40:	2301      	movs	r3, #1
 800dd42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dd44:	4b0b      	ldr	r3, [pc, #44]	; (800dd74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f023 0207 	bic.w	r2, r3, #7
 800dd4c:	4909      	ldr	r1, [pc, #36]	; (800dd74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800dd54:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 0307 	and.w	r3, r3, #7
 800dd5c:	693a      	ldr	r2, [r7, #16]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d001      	beq.n	800dd66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	e000      	b.n	800dd68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	40021000 	.word	0x40021000
 800dd74:	40022000 	.word	0x40022000

0800dd78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dd80:	2300      	movs	r3, #0
 800dd82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dd84:	2300      	movs	r3, #0
 800dd86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d041      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dd9c:	d02a      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dd9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dda2:	d824      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dda4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dda8:	d008      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ddaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddae:	d81e      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00a      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ddb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddb8:	d010      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ddba:	e018      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ddbc:	4b86      	ldr	r3, [pc, #536]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	4a85      	ldr	r2, [pc, #532]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ddc8:	e015      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3304      	adds	r3, #4
 800ddce:	2100      	movs	r1, #0
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 fabb 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ddda:	e00c      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3320      	adds	r3, #32
 800dde0:	2100      	movs	r1, #0
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fba6 	bl	800e534 <RCCEx_PLLSAI2_Config>
 800dde8:	4603      	mov	r3, r0
 800ddea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ddec:	e003      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	74fb      	strb	r3, [r7, #19]
      break;
 800ddf2:	e000      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ddf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ddf6:	7cfb      	ldrb	r3, [r7, #19]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10b      	bne.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ddfc:	4b76      	ldr	r3, [pc, #472]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de0a:	4973      	ldr	r1, [pc, #460]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de0c:	4313      	orrs	r3, r2
 800de0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800de12:	e001      	b.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de14:	7cfb      	ldrb	r3, [r7, #19]
 800de16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d041      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de2c:	d02a      	beq.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800de2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de32:	d824      	bhi.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800de34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de38:	d008      	beq.n	800de4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800de3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de3e:	d81e      	bhi.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00a      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800de44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de48:	d010      	beq.n	800de6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800de4a:	e018      	b.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800de4c:	4b62      	ldr	r3, [pc, #392]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	4a61      	ldr	r2, [pc, #388]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800de58:	e015      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3304      	adds	r3, #4
 800de5e:	2100      	movs	r1, #0
 800de60:	4618      	mov	r0, r3
 800de62:	f000 fa73 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800de66:	4603      	mov	r3, r0
 800de68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800de6a:	e00c      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3320      	adds	r3, #32
 800de70:	2100      	movs	r1, #0
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fb5e 	bl	800e534 <RCCEx_PLLSAI2_Config>
 800de78:	4603      	mov	r3, r0
 800de7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800de7c:	e003      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	74fb      	strb	r3, [r7, #19]
      break;
 800de82:	e000      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800de84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800de86:	7cfb      	ldrb	r3, [r7, #19]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10b      	bne.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de8c:	4b52      	ldr	r3, [pc, #328]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de9a:	494f      	ldr	r1, [pc, #316]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dea2:	e001      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dea4:	7cfb      	ldrb	r3, [r7, #19]
 800dea6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 80a0 	beq.w	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800deb6:	2300      	movs	r3, #0
 800deb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800deba:	4b47      	ldr	r3, [pc, #284]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800debc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800debe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d101      	bne.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x152>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e000      	b.n	800decc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800deca:	2300      	movs	r3, #0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00d      	beq.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ded0:	4b41      	ldr	r3, [pc, #260]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ded2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ded4:	4a40      	ldr	r2, [pc, #256]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ded6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800deda:	6593      	str	r3, [r2, #88]	; 0x58
 800dedc:	4b3e      	ldr	r3, [pc, #248]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dee4:	60bb      	str	r3, [r7, #8]
 800dee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dee8:	2301      	movs	r3, #1
 800deea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800deec:	4b3b      	ldr	r3, [pc, #236]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a3a      	ldr	r2, [pc, #232]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800def2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800def6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800def8:	f7fc facc 	bl	800a494 <HAL_GetTick>
 800defc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800defe:	e009      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df00:	f7fc fac8 	bl	800a494 <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d902      	bls.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	74fb      	strb	r3, [r7, #19]
        break;
 800df12:	e005      	b.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800df14:	4b31      	ldr	r3, [pc, #196]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d0ef      	beq.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800df20:	7cfb      	ldrb	r3, [r7, #19]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d15c      	bne.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800df26:	4b2c      	ldr	r3, [pc, #176]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d01f      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	429a      	cmp	r2, r3
 800df42:	d019      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800df44:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df50:	4b21      	ldr	r3, [pc, #132]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df56:	4a20      	ldr	r2, [pc, #128]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df60:	4b1d      	ldr	r3, [pc, #116]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df66:	4a1c      	ldr	r2, [pc, #112]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800df70:	4a19      	ldr	r2, [pc, #100]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d016      	beq.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df82:	f7fc fa87 	bl	800a494 <HAL_GetTick>
 800df86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df88:	e00b      	b.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df8a:	f7fc fa83 	bl	800a494 <HAL_GetTick>
 800df8e:	4602      	mov	r2, r0
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	f241 3288 	movw	r2, #5000	; 0x1388
 800df98:	4293      	cmp	r3, r2
 800df9a:	d902      	bls.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800df9c:	2303      	movs	r3, #3
 800df9e:	74fb      	strb	r3, [r7, #19]
            break;
 800dfa0:	e006      	b.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfa8:	f003 0302 	and.w	r3, r3, #2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d0ec      	beq.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800dfb0:	7cfb      	ldrb	r3, [r7, #19]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d10c      	bne.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dfb6:	4b08      	ldr	r3, [pc, #32]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfc6:	4904      	ldr	r1, [pc, #16]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dfce:	e009      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dfd0:	7cfb      	ldrb	r3, [r7, #19]
 800dfd2:	74bb      	strb	r3, [r7, #18]
 800dfd4:	e006      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800dfd6:	bf00      	nop
 800dfd8:	40021000 	.word	0x40021000
 800dfdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfe0:	7cfb      	ldrb	r3, [r7, #19]
 800dfe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dfe4:	7c7b      	ldrb	r3, [r7, #17]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d105      	bne.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dfea:	4b9e      	ldr	r3, [pc, #632]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfee:	4a9d      	ldr	r2, [pc, #628]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e002:	4b98      	ldr	r3, [pc, #608]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e008:	f023 0203 	bic.w	r2, r3, #3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e010:	4994      	ldr	r1, [pc, #592]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e012:	4313      	orrs	r3, r2
 800e014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f003 0302 	and.w	r3, r3, #2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00a      	beq.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e024:	4b8f      	ldr	r3, [pc, #572]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e02a:	f023 020c 	bic.w	r2, r3, #12
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e032:	498c      	ldr	r1, [pc, #560]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e034:	4313      	orrs	r3, r2
 800e036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f003 0304 	and.w	r3, r3, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e046:	4b87      	ldr	r3, [pc, #540]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e04c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e054:	4983      	ldr	r1, [pc, #524]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e056:	4313      	orrs	r3, r2
 800e058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f003 0308 	and.w	r3, r3, #8
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00a      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e068:	4b7e      	ldr	r3, [pc, #504]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e06e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e076:	497b      	ldr	r1, [pc, #492]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e078:	4313      	orrs	r3, r2
 800e07a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f003 0310 	and.w	r3, r3, #16
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e08a:	4b76      	ldr	r3, [pc, #472]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e098:	4972      	ldr	r1, [pc, #456]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f003 0320 	and.w	r3, r3, #32
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e0ac:	4b6d      	ldr	r3, [pc, #436]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ba:	496a      	ldr	r1, [pc, #424]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00a      	beq.n	800e0e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e0ce:	4b65      	ldr	r3, [pc, #404]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0dc:	4961      	ldr	r1, [pc, #388]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00a      	beq.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e0f0:	4b5c      	ldr	r3, [pc, #368]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0fe:	4959      	ldr	r1, [pc, #356]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e100:	4313      	orrs	r3, r2
 800e102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e112:	4b54      	ldr	r3, [pc, #336]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e120:	4950      	ldr	r1, [pc, #320]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e122:	4313      	orrs	r3, r2
 800e124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00a      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e134:	4b4b      	ldr	r3, [pc, #300]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e13a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e142:	4948      	ldr	r1, [pc, #288]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e144:	4313      	orrs	r3, r2
 800e146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e156:	4b43      	ldr	r3, [pc, #268]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e15c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e164:	493f      	ldr	r1, [pc, #252]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e166:	4313      	orrs	r3, r2
 800e168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d028      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e178:	4b3a      	ldr	r3, [pc, #232]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e17e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e186:	4937      	ldr	r1, [pc, #220]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e196:	d106      	bne.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e198:	4b32      	ldr	r3, [pc, #200]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	4a31      	ldr	r2, [pc, #196]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e19e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1a2:	60d3      	str	r3, [r2, #12]
 800e1a4:	e011      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1ae:	d10c      	bne.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f8c8 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800e1c0:	7cfb      	ldrb	r3, [r7, #19]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800e1c6:	7cfb      	ldrb	r3, [r7, #19]
 800e1c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d028      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e1d6:	4b23      	ldr	r3, [pc, #140]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e4:	491f      	ldr	r1, [pc, #124]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1f4:	d106      	bne.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e1f6:	4b1b      	ldr	r3, [pc, #108]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	4a1a      	ldr	r2, [pc, #104]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e200:	60d3      	str	r3, [r2, #12]
 800e202:	e011      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e20c:	d10c      	bne.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3304      	adds	r3, #4
 800e212:	2101      	movs	r1, #1
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f899 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800e21a:	4603      	mov	r3, r0
 800e21c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e21e:	7cfb      	ldrb	r3, [r7, #19]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800e224:	7cfb      	ldrb	r3, [r7, #19]
 800e226:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d02b      	beq.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e234:	4b0b      	ldr	r3, [pc, #44]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e23a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e242:	4908      	ldr	r1, [pc, #32]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e244:	4313      	orrs	r3, r2
 800e246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e24e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e252:	d109      	bne.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e254:	4b03      	ldr	r3, [pc, #12]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	4a02      	ldr	r2, [pc, #8]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e25e:	60d3      	str	r3, [r2, #12]
 800e260:	e014      	b.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800e262:	bf00      	nop
 800e264:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e26c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e270:	d10c      	bne.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3304      	adds	r3, #4
 800e276:	2101      	movs	r1, #1
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 f867 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800e27e:	4603      	mov	r3, r0
 800e280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e282:	7cfb      	ldrb	r3, [r7, #19]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800e288:	7cfb      	ldrb	r3, [r7, #19]
 800e28a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d02f      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e298:	4b2b      	ldr	r3, [pc, #172]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e29e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2a6:	4928      	ldr	r1, [pc, #160]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2b6:	d10d      	bne.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	2102      	movs	r1, #2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 f844 	bl	800e34c <RCCEx_PLLSAI1_Config>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e2c8:	7cfb      	ldrb	r3, [r7, #19]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d014      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e2ce:	7cfb      	ldrb	r3, [r7, #19]
 800e2d0:	74bb      	strb	r3, [r7, #18]
 800e2d2:	e011      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2dc:	d10c      	bne.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3320      	adds	r3, #32
 800e2e2:	2102      	movs	r1, #2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 f925 	bl	800e534 <RCCEx_PLLSAI2_Config>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e2ee:	7cfb      	ldrb	r3, [r7, #19]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e2f4:	7cfb      	ldrb	r3, [r7, #19]
 800e2f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e304:	4b10      	ldr	r3, [pc, #64]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e30a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e312:	490d      	ldr	r1, [pc, #52]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00b      	beq.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e326:	4b08      	ldr	r3, [pc, #32]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e32c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e336:	4904      	ldr	r1, [pc, #16]	; (800e348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e338:	4313      	orrs	r3, r2
 800e33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e33e:	7cbb      	ldrb	r3, [r7, #18]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	40021000 	.word	0x40021000

0800e34c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e35a:	4b75      	ldr	r3, [pc, #468]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	f003 0303 	and.w	r3, r3, #3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d018      	beq.n	800e398 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e366:	4b72      	ldr	r3, [pc, #456]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	f003 0203 	and.w	r2, r3, #3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d10d      	bne.n	800e392 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
       ||
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d009      	beq.n	800e392 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e37e:	4b6c      	ldr	r3, [pc, #432]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	091b      	lsrs	r3, r3, #4
 800e384:	f003 0307 	and.w	r3, r3, #7
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
       ||
 800e38e:	429a      	cmp	r2, r3
 800e390:	d047      	beq.n	800e422 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]
 800e396:	e044      	b.n	800e422 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d018      	beq.n	800e3d2 <RCCEx_PLLSAI1_Config+0x86>
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d825      	bhi.n	800e3f0 <RCCEx_PLLSAI1_Config+0xa4>
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d002      	beq.n	800e3ae <RCCEx_PLLSAI1_Config+0x62>
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d009      	beq.n	800e3c0 <RCCEx_PLLSAI1_Config+0x74>
 800e3ac:	e020      	b.n	800e3f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e3ae:	4b60      	ldr	r3, [pc, #384]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 0302 	and.w	r3, r3, #2
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d11d      	bne.n	800e3f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e3be:	e01a      	b.n	800e3f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e3c0:	4b5b      	ldr	r3, [pc, #364]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d116      	bne.n	800e3fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e3d0:	e013      	b.n	800e3fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e3d2:	4b57      	ldr	r3, [pc, #348]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10f      	bne.n	800e3fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e3de:	4b54      	ldr	r3, [pc, #336]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d109      	bne.n	800e3fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e3ee:	e006      	b.n	800e3fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3f4:	e004      	b.n	800e400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e3f6:	bf00      	nop
 800e3f8:	e002      	b.n	800e400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e3fa:	bf00      	nop
 800e3fc:	e000      	b.n	800e400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e3fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10d      	bne.n	800e422 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e406:	4b4a      	ldr	r3, [pc, #296]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6819      	ldr	r1, [r3, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	3b01      	subs	r3, #1
 800e418:	011b      	lsls	r3, r3, #4
 800e41a:	430b      	orrs	r3, r1
 800e41c:	4944      	ldr	r1, [pc, #272]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e41e:	4313      	orrs	r3, r2
 800e420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d17d      	bne.n	800e524 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e428:	4b41      	ldr	r3, [pc, #260]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a40      	ldr	r2, [pc, #256]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e42e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e434:	f7fc f82e 	bl	800a494 <HAL_GetTick>
 800e438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e43a:	e009      	b.n	800e450 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e43c:	f7fc f82a 	bl	800a494 <HAL_GetTick>
 800e440:	4602      	mov	r2, r0
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	2b02      	cmp	r3, #2
 800e448:	d902      	bls.n	800e450 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	73fb      	strb	r3, [r7, #15]
        break;
 800e44e:	e005      	b.n	800e45c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e450:	4b37      	ldr	r3, [pc, #220]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1ef      	bne.n	800e43c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d160      	bne.n	800e524 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d111      	bne.n	800e48c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e468:	4b31      	ldr	r3, [pc, #196]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800e470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	6892      	ldr	r2, [r2, #8]
 800e478:	0211      	lsls	r1, r2, #8
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	68d2      	ldr	r2, [r2, #12]
 800e47e:	0912      	lsrs	r2, r2, #4
 800e480:	0452      	lsls	r2, r2, #17
 800e482:	430a      	orrs	r2, r1
 800e484:	492a      	ldr	r1, [pc, #168]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e486:	4313      	orrs	r3, r2
 800e488:	610b      	str	r3, [r1, #16]
 800e48a:	e027      	b.n	800e4dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d112      	bne.n	800e4b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e492:	4b27      	ldr	r3, [pc, #156]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800e49a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	6892      	ldr	r2, [r2, #8]
 800e4a2:	0211      	lsls	r1, r2, #8
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	6912      	ldr	r2, [r2, #16]
 800e4a8:	0852      	lsrs	r2, r2, #1
 800e4aa:	3a01      	subs	r2, #1
 800e4ac:	0552      	lsls	r2, r2, #21
 800e4ae:	430a      	orrs	r2, r1
 800e4b0:	491f      	ldr	r1, [pc, #124]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	610b      	str	r3, [r1, #16]
 800e4b6:	e011      	b.n	800e4dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e4b8:	4b1d      	ldr	r3, [pc, #116]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e4c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	6892      	ldr	r2, [r2, #8]
 800e4c8:	0211      	lsls	r1, r2, #8
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	6952      	ldr	r2, [r2, #20]
 800e4ce:	0852      	lsrs	r2, r2, #1
 800e4d0:	3a01      	subs	r2, #1
 800e4d2:	0652      	lsls	r2, r2, #25
 800e4d4:	430a      	orrs	r2, r1
 800e4d6:	4916      	ldr	r1, [pc, #88]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e4dc:	4b14      	ldr	r3, [pc, #80]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a13      	ldr	r2, [pc, #76]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4e8:	f7fb ffd4 	bl	800a494 <HAL_GetTick>
 800e4ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e4ee:	e009      	b.n	800e504 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e4f0:	f7fb ffd0 	bl	800a494 <HAL_GetTick>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	d902      	bls.n	800e504 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	73fb      	strb	r3, [r7, #15]
          break;
 800e502:	e005      	b.n	800e510 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e504:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d0ef      	beq.n	800e4f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800e510:	7bfb      	ldrb	r3, [r7, #15]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d106      	bne.n	800e524 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e516:	4b06      	ldr	r3, [pc, #24]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e518:	691a      	ldr	r2, [r3, #16]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	4904      	ldr	r1, [pc, #16]	; (800e530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e520:	4313      	orrs	r3, r2
 800e522:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e524:	7bfb      	ldrb	r3, [r7, #15]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	40021000 	.word	0x40021000

0800e534 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e53e:	2300      	movs	r3, #0
 800e540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e542:	4b6a      	ldr	r3, [pc, #424]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	f003 0303 	and.w	r3, r3, #3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d018      	beq.n	800e580 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800e54e:	4b67      	ldr	r3, [pc, #412]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	f003 0203 	and.w	r2, r3, #3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d10d      	bne.n	800e57a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
       ||
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800e566:	4b61      	ldr	r3, [pc, #388]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	091b      	lsrs	r3, r3, #4
 800e56c:	f003 0307 	and.w	r3, r3, #7
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	685b      	ldr	r3, [r3, #4]
       ||
 800e576:	429a      	cmp	r2, r3
 800e578:	d047      	beq.n	800e60a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	73fb      	strb	r3, [r7, #15]
 800e57e:	e044      	b.n	800e60a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b03      	cmp	r3, #3
 800e586:	d018      	beq.n	800e5ba <RCCEx_PLLSAI2_Config+0x86>
 800e588:	2b03      	cmp	r3, #3
 800e58a:	d825      	bhi.n	800e5d8 <RCCEx_PLLSAI2_Config+0xa4>
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d002      	beq.n	800e596 <RCCEx_PLLSAI2_Config+0x62>
 800e590:	2b02      	cmp	r3, #2
 800e592:	d009      	beq.n	800e5a8 <RCCEx_PLLSAI2_Config+0x74>
 800e594:	e020      	b.n	800e5d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e596:	4b55      	ldr	r3, [pc, #340]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d11d      	bne.n	800e5de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e5a6:	e01a      	b.n	800e5de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e5a8:	4b50      	ldr	r3, [pc, #320]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d116      	bne.n	800e5e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e5b8:	e013      	b.n	800e5e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e5ba:	4b4c      	ldr	r3, [pc, #304]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10f      	bne.n	800e5e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e5c6:	4b49      	ldr	r3, [pc, #292]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d109      	bne.n	800e5e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e5d6:	e006      	b.n	800e5e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	73fb      	strb	r3, [r7, #15]
      break;
 800e5dc:	e004      	b.n	800e5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e5de:	bf00      	nop
 800e5e0:	e002      	b.n	800e5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e5e2:	bf00      	nop
 800e5e4:	e000      	b.n	800e5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e5e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10d      	bne.n	800e60a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e5ee:	4b3f      	ldr	r3, [pc, #252]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	011b      	lsls	r3, r3, #4
 800e602:	430b      	orrs	r3, r1
 800e604:	4939      	ldr	r1, [pc, #228]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e606:	4313      	orrs	r3, r2
 800e608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d167      	bne.n	800e6e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e610:	4b36      	ldr	r3, [pc, #216]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a35      	ldr	r2, [pc, #212]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e61a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e61c:	f7fb ff3a 	bl	800a494 <HAL_GetTick>
 800e620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e622:	e009      	b.n	800e638 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e624:	f7fb ff36 	bl	800a494 <HAL_GetTick>
 800e628:	4602      	mov	r2, r0
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d902      	bls.n	800e638 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e632:	2303      	movs	r3, #3
 800e634:	73fb      	strb	r3, [r7, #15]
        break;
 800e636:	e005      	b.n	800e644 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e638:	4b2c      	ldr	r3, [pc, #176]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1ef      	bne.n	800e624 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d14a      	bne.n	800e6e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d111      	bne.n	800e674 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e650:	4b26      	ldr	r3, [pc, #152]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800e658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	6892      	ldr	r2, [r2, #8]
 800e660:	0211      	lsls	r1, r2, #8
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	68d2      	ldr	r2, [r2, #12]
 800e666:	0912      	lsrs	r2, r2, #4
 800e668:	0452      	lsls	r2, r2, #17
 800e66a:	430a      	orrs	r2, r1
 800e66c:	491f      	ldr	r1, [pc, #124]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e66e:	4313      	orrs	r3, r2
 800e670:	614b      	str	r3, [r1, #20]
 800e672:	e011      	b.n	800e698 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e674:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e67c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	6892      	ldr	r2, [r2, #8]
 800e684:	0211      	lsls	r1, r2, #8
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	6912      	ldr	r2, [r2, #16]
 800e68a:	0852      	lsrs	r2, r2, #1
 800e68c:	3a01      	subs	r2, #1
 800e68e:	0652      	lsls	r2, r2, #25
 800e690:	430a      	orrs	r2, r1
 800e692:	4916      	ldr	r1, [pc, #88]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e694:	4313      	orrs	r3, r2
 800e696:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e698:	4b14      	ldr	r3, [pc, #80]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a13      	ldr	r2, [pc, #76]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6a4:	f7fb fef6 	bl	800a494 <HAL_GetTick>
 800e6a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e6aa:	e009      	b.n	800e6c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e6ac:	f7fb fef2 	bl	800a494 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d902      	bls.n	800e6c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	73fb      	strb	r3, [r7, #15]
          break;
 800e6be:	e005      	b.n	800e6cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0ef      	beq.n	800e6ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800e6cc:	7bfb      	ldrb	r3, [r7, #15]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800e6d2:	4b06      	ldr	r3, [pc, #24]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6d4:	695a      	ldr	r2, [r3, #20]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	4904      	ldr	r1, [pc, #16]	; (800e6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	40021000 	.word	0x40021000

0800e6f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d079      	beq.n	800e7f6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d106      	bne.n	800e71c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7f4 f9d4 	bl	8002ac4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	f003 0310 	and.w	r3, r3, #16
 800e72e:	2b10      	cmp	r3, #16
 800e730:	d058      	beq.n	800e7e4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	22ca      	movs	r2, #202	; 0xca
 800e738:	625a      	str	r2, [r3, #36]	; 0x24
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2253      	movs	r2, #83	; 0x53
 800e740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fa4e 	bl	800ebe4 <RTC_EnterInitMode>
 800e748:	4603      	mov	r3, r0
 800e74a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d127      	bne.n	800e7a2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	6812      	ldr	r2, [r2, #0]
 800e75c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e764:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6899      	ldr	r1, [r3, #8]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	431a      	orrs	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	431a      	orrs	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	68d2      	ldr	r2, [r2, #12]
 800e78c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	6919      	ldr	r1, [r3, #16]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	041a      	lsls	r2, r3, #16
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fa52 	bl	800ec4c <RTC_ExitInitMode>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e7ac:	7bfb      	ldrb	r3, [r7, #15]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d113      	bne.n	800e7da <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f022 0203 	bic.w	r2, r2, #3
 800e7c0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	69da      	ldr	r2, [r3, #28]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	431a      	orrs	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	22ff      	movs	r2, #255	; 0xff
 800e7e0:	625a      	str	r2, [r3, #36]	; 0x24
 800e7e2:	e001      	b.n	800e7e8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d103      	bne.n	800e7f6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e800:	b590      	push	{r4, r7, lr}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d101      	bne.n	800e81a <HAL_RTC_SetTime+0x1a>
 800e816:	2302      	movs	r3, #2
 800e818:	e08b      	b.n	800e932 <HAL_RTC_SetTime+0x132>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2202      	movs	r2, #2
 800e826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	22ca      	movs	r2, #202	; 0xca
 800e830:	625a      	str	r2, [r3, #36]	; 0x24
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2253      	movs	r2, #83	; 0x53
 800e838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f000 f9d2 	bl	800ebe4 <RTC_EnterInitMode>
 800e840:	4603      	mov	r3, r0
 800e842:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e844:	7cfb      	ldrb	r3, [r7, #19]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d163      	bne.n	800e912 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d126      	bne.n	800e89e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d102      	bne.n	800e864 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2200      	movs	r2, #0
 800e862:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 fa2d 	bl	800ecc8 <RTC_ByteToBcd2>
 800e86e:	4603      	mov	r3, r0
 800e870:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	785b      	ldrb	r3, [r3, #1]
 800e876:	4618      	mov	r0, r3
 800e878:	f000 fa26 	bl	800ecc8 <RTC_ByteToBcd2>
 800e87c:	4603      	mov	r3, r0
 800e87e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e880:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	789b      	ldrb	r3, [r3, #2]
 800e886:	4618      	mov	r0, r3
 800e888:	f000 fa1e 	bl	800ecc8 <RTC_ByteToBcd2>
 800e88c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e88e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	78db      	ldrb	r3, [r3, #3]
 800e896:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e898:	4313      	orrs	r3, r2
 800e89a:	617b      	str	r3, [r7, #20]
 800e89c:	e018      	b.n	800e8d0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d102      	bne.n	800e8b2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	785b      	ldrb	r3, [r3, #1]
 800e8bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e8be:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e8c4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	78db      	ldrb	r3, [r3, #3]
 800e8ca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800e8da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e8de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	689a      	ldr	r2, [r3, #8]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e8ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	6899      	ldr	r1, [r3, #8]
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	68da      	ldr	r2, [r3, #12]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	431a      	orrs	r2, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	430a      	orrs	r2, r1
 800e906:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f99f 	bl	800ec4c <RTC_ExitInitMode>
 800e90e:	4603      	mov	r3, r0
 800e910:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	22ff      	movs	r2, #255	; 0xff
 800e918:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e91a:	7cfb      	ldrb	r3, [r7, #19]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d103      	bne.n	800e928 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e930:	7cfb      	ldrb	r3, [r7, #19]
}
 800e932:	4618      	mov	r0, r3
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	bd90      	pop	{r4, r7, pc}

0800e93a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b086      	sub	sp, #24
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	60b9      	str	r1, [r7, #8]
 800e944:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800e968:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e96c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	0c1b      	lsrs	r3, r3, #16
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	0a1b      	lsrs	r3, r3, #8
 800e982:	b2db      	uxtb	r3, r3
 800e984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e988:	b2da      	uxtb	r2, r3
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	b2db      	uxtb	r3, r3
 800e992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e996:	b2da      	uxtb	r2, r3
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	0d9b      	lsrs	r3, r3, #22
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d11a      	bne.n	800e9e8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 f9a6 	bl	800ed08 <RTC_Bcd2ToByte>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	461a      	mov	r2, r3
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	785b      	ldrb	r3, [r3, #1]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 f99d 	bl	800ed08 <RTC_Bcd2ToByte>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	789b      	ldrb	r3, [r3, #2]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 f994 	bl	800ed08 <RTC_Bcd2ToByte>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e9f2:	b590      	push	{r4, r7, lr}
 800e9f4:	b087      	sub	sp, #28
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	60f8      	str	r0, [r7, #12]
 800e9fa:	60b9      	str	r1, [r7, #8]
 800e9fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d101      	bne.n	800ea0c <HAL_RTC_SetDate+0x1a>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	e075      	b.n	800eaf8 <HAL_RTC_SetDate+0x106>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2202      	movs	r2, #2
 800ea18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10e      	bne.n	800ea40 <HAL_RTC_SetDate+0x4e>
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	785b      	ldrb	r3, [r3, #1]
 800ea26:	f003 0310 	and.w	r3, r3, #16
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d008      	beq.n	800ea40 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	785b      	ldrb	r3, [r3, #1]
 800ea32:	f023 0310 	bic.w	r3, r3, #16
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	330a      	adds	r3, #10
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d11c      	bne.n	800ea80 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	78db      	ldrb	r3, [r3, #3]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 f93c 	bl	800ecc8 <RTC_ByteToBcd2>
 800ea50:	4603      	mov	r3, r0
 800ea52:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	785b      	ldrb	r3, [r3, #1]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 f935 	bl	800ecc8 <RTC_ByteToBcd2>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ea62:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	789b      	ldrb	r3, [r3, #2]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f92d 	bl	800ecc8 <RTC_ByteToBcd2>
 800ea6e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ea70:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	617b      	str	r3, [r7, #20]
 800ea7e:	e00e      	b.n	800ea9e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	78db      	ldrb	r3, [r3, #3]
 800ea84:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	785b      	ldrb	r3, [r3, #1]
 800ea8a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ea8c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ea92:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	22ca      	movs	r2, #202	; 0xca
 800eaa4:	625a      	str	r2, [r3, #36]	; 0x24
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2253      	movs	r2, #83	; 0x53
 800eaac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f000 f898 	bl	800ebe4 <RTC_EnterInitMode>
 800eab4:	4603      	mov	r3, r0
 800eab6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800eab8:	7cfb      	ldrb	r3, [r7, #19]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10c      	bne.n	800ead8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eac8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eacc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 f8bc 	bl	800ec4c <RTC_ExitInitMode>
 800ead4:	4603      	mov	r3, r0
 800ead6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	22ff      	movs	r2, #255	; 0xff
 800eade:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800eae0:	7cfb      	ldrb	r3, [r7, #19]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d103      	bne.n	800eaee <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800eaf6:	7cfb      	ldrb	r3, [r7, #19]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	371c      	adds	r7, #28
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd90      	pop	{r4, r7, pc}

0800eb00 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	0c1b      	lsrs	r3, r3, #16
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	0a1b      	lsrs	r3, r3, #8
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	f003 031f 	and.w	r3, r3, #31
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	0b5b      	lsrs	r3, r3, #13
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 0307 	and.w	r3, r3, #7
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d11a      	bne.n	800eb90 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	78db      	ldrb	r3, [r3, #3]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f000 f8d2 	bl	800ed08 <RTC_Bcd2ToByte>
 800eb64:	4603      	mov	r3, r0
 800eb66:	461a      	mov	r2, r3
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	785b      	ldrb	r3, [r3, #1]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 f8c9 	bl	800ed08 <RTC_Bcd2ToByte>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	789b      	ldrb	r3, [r3, #2]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 f8c0 	bl	800ed08 <RTC_Bcd2ToByte>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a0d      	ldr	r2, [pc, #52]	; (800ebe0 <HAL_RTC_WaitForSynchro+0x44>)
 800ebaa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ebac:	f7fb fc72 	bl	800a494 <HAL_GetTick>
 800ebb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ebb2:	e009      	b.n	800ebc8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ebb4:	f7fb fc6e 	bl	800a494 <HAL_GetTick>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ebc2:	d901      	bls.n	800ebc8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	e007      	b.n	800ebd8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	f003 0320 	and.w	r3, r3, #32
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d0ee      	beq.n	800ebb4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	0003ff5f 	.word	0x0003ff5f

0800ebe4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d120      	bne.n	800ec40 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f04f 32ff 	mov.w	r2, #4294967295
 800ec06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ec08:	f7fb fc44 	bl	800a494 <HAL_GetTick>
 800ec0c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ec0e:	e00d      	b.n	800ec2c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ec10:	f7fb fc40 	bl	800a494 <HAL_GetTick>
 800ec14:	4602      	mov	r2, r0
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec1e:	d905      	bls.n	800ec2c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ec20:	2303      	movs	r3, #3
 800ec22:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2203      	movs	r2, #3
 800ec28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d102      	bne.n	800ec40 <RTC_EnterInitMode+0x5c>
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d1e7      	bne.n	800ec10 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800ec58:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	4a19      	ldr	r2, [pc, #100]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ec5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec62:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ec64:	4b17      	ldr	r3, [pc, #92]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	f003 0320 	and.w	r3, r3, #32
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10c      	bne.n	800ec8a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff93 	bl	800eb9c <HAL_RTC_WaitForSynchro>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d01e      	beq.n	800ecba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2203      	movs	r2, #3
 800ec80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	73fb      	strb	r3, [r7, #15]
 800ec88:	e017      	b.n	800ecba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ec8a:	4b0e      	ldr	r3, [pc, #56]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	4a0d      	ldr	r2, [pc, #52]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ec90:	f023 0320 	bic.w	r3, r3, #32
 800ec94:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ff80 	bl	800eb9c <HAL_RTC_WaitForSynchro>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d005      	beq.n	800ecae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2203      	movs	r2, #3
 800eca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ecae:	4b05      	ldr	r3, [pc, #20]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	4a04      	ldr	r2, [pc, #16]	; (800ecc4 <RTC_ExitInitMode+0x78>)
 800ecb4:	f043 0320 	orr.w	r3, r3, #32
 800ecb8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	40002800 	.word	0x40002800

0800ecc8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ecda:	e005      	b.n	800ece8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3301      	adds	r3, #1
 800ece0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ece2:	7afb      	ldrb	r3, [r7, #11]
 800ece4:	3b0a      	subs	r3, #10
 800ece6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800ece8:	7afb      	ldrb	r3, [r7, #11]
 800ecea:	2b09      	cmp	r3, #9
 800ecec:	d8f6      	bhi.n	800ecdc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	011b      	lsls	r3, r3, #4
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	7afb      	ldrb	r3, [r7, #11]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	b2db      	uxtb	r3, r3
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	4603      	mov	r3, r0
 800ed10:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	091b      	lsrs	r3, r3, #4
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	461a      	mov	r2, r3
 800ed1a:	0092      	lsls	r2, r2, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	f003 030f 	and.w	r3, r3, #15
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	b2db      	uxtb	r3, r3
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <MX_MEMS_Init>:
void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800ed40:	f000 f802 	bl	800ed48 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800ed44:	bf00      	nop
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800ed48:	b5b0      	push	{r4, r5, r7, lr}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800ed4e:	2103      	movs	r1, #3
 800ed50:	2000      	movs	r0, #0
 800ed52:	f7fb f801 	bl	8009d58 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800ed56:	2102      	movs	r1, #2
 800ed58:	2001      	movs	r0, #1
 800ed5a:	f7fa fffd 	bl	8009d58 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800ed5e:	2104      	movs	r1, #4
 800ed60:	2002      	movs	r0, #2
 800ed62:	f7fa fff9 	bl	8009d58 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	e0c3      	b.n	800eef4 <MX_IKS01A3_DataLogTerminal_Init+0x1ac>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	4613      	mov	r3, r2
 800ed72:	00db      	lsls	r3, r3, #3
 800ed74:	1a9b      	subs	r3, r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4abe      	ldr	r2, [pc, #760]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ed7a:	4413      	add	r3, r2
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	f7fb f8e7 	bl	8009f50 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800ed82:	49bc      	ldr	r1, [pc, #752]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	4613      	mov	r3, r2
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	1a9b      	subs	r3, r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	440b      	add	r3, r1
 800ed90:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ed92:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800ed94:	49b7      	ldr	r1, [pc, #732]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	1a9b      	subs	r3, r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	440b      	add	r3, r1
 800eda2:	3301      	adds	r3, #1
 800eda4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800eda6:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800eda8:	49b2      	ldr	r1, [pc, #712]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	4613      	mov	r3, r2
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	1a9b      	subs	r3, r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	440b      	add	r3, r1
 800edb6:	3302      	adds	r3, #2
 800edb8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800edba:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800edbc:	49ad      	ldr	r1, [pc, #692]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	4613      	mov	r3, r2
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	1a9b      	subs	r3, r3, r2
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	440b      	add	r3, r1
 800edca:	3303      	adds	r3, #3
 800edcc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800edce:	9303      	str	r3, [sp, #12]
 800edd0:	9502      	str	r5, [sp, #8]
 800edd2:	9401      	str	r4, [sp, #4]
 800edd4:	9000      	str	r0, [sp, #0]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	4aa7      	ldr	r2, [pc, #668]	; (800f078 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800edda:	f44f 7180 	mov.w	r1, #256	; 0x100
 800edde:	48a7      	ldr	r0, [pc, #668]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ede0:	f001 fafe 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800ede4:	49a5      	ldr	r1, [pc, #660]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ede6:	48a6      	ldr	r0, [pc, #664]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800ede8:	f001 fae8 	bl	80103bc <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800edec:	49a1      	ldr	r1, [pc, #644]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	4613      	mov	r3, r2
 800edf2:	00db      	lsls	r3, r3, #3
 800edf4:	1a9b      	subs	r3, r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	440b      	add	r3, r1
 800edfa:	3314      	adds	r3, #20
 800edfc:	edd3 7a00 	vldr	s15, [r3]
 800ee00:	463b      	mov	r3, r7
 800ee02:	2103      	movs	r1, #3
 800ee04:	4618      	mov	r0, r3
 800ee06:	eeb0 0a67 	vmov.f32	s0, s15
 800ee0a:	f000 f94d 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ee12:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ee14:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ee16:	4997      	ldr	r1, [pc, #604]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	1a9b      	subs	r3, r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	440b      	add	r3, r1
 800ee24:	3308      	adds	r3, #8
 800ee26:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	9000      	str	r0, [sp, #0]
 800ee2c:	4623      	mov	r3, r4
 800ee2e:	4a95      	ldr	r2, [pc, #596]	; (800f084 <MX_IKS01A3_DataLogTerminal_Init+0x33c>)
 800ee30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee34:	4891      	ldr	r0, [pc, #580]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ee36:	f001 fad3 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800ee3a:	4990      	ldr	r1, [pc, #576]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ee3c:	4890      	ldr	r0, [pc, #576]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800ee3e:	f001 fabd 	bl	80103bc <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800ee42:	498c      	ldr	r1, [pc, #560]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	4613      	mov	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	1a9b      	subs	r3, r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	440b      	add	r3, r1
 800ee50:	3310      	adds	r3, #16
 800ee52:	edd3 7a00 	vldr	s15, [r3]
 800ee56:	463b      	mov	r3, r7
 800ee58:	2103      	movs	r1, #3
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee60:	f000 f922 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800ee68:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800ee6a:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800ee6c:	4981      	ldr	r1, [pc, #516]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	4613      	mov	r3, r2
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	1a9b      	subs	r3, r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	440b      	add	r3, r1
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	9000      	str	r0, [sp, #0]
 800ee82:	4623      	mov	r3, r4
 800ee84:	4a80      	ldr	r2, [pc, #512]	; (800f088 <MX_IKS01A3_DataLogTerminal_Init+0x340>)
 800ee86:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee8a:	487c      	ldr	r0, [pc, #496]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ee8c:	f001 faa8 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800ee90:	497a      	ldr	r1, [pc, #488]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ee92:	487b      	ldr	r0, [pc, #492]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800ee94:	f001 fa92 	bl	80103bc <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800ee98:	4976      	ldr	r1, [pc, #472]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	1a9b      	subs	r3, r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	440b      	add	r3, r1
 800eea6:	3318      	adds	r3, #24
 800eea8:	edd3 7a00 	vldr	s15, [r3]
 800eeac:	463b      	mov	r3, r7
 800eeae:	2103      	movs	r1, #3
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	eeb0 0a67 	vmov.f32	s0, s15
 800eeb6:	f000 f8f7 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800eebe:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800eec0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800eec2:	496c      	ldr	r1, [pc, #432]	; (800f074 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	4613      	mov	r3, r2
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	1a9b      	subs	r3, r3, r2
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	440b      	add	r3, r1
 800eed0:	330c      	adds	r3, #12
 800eed2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800eed4:	9301      	str	r3, [sp, #4]
 800eed6:	9000      	str	r0, [sp, #0]
 800eed8:	4623      	mov	r3, r4
 800eeda:	4a6c      	ldr	r2, [pc, #432]	; (800f08c <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800eedc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800eee0:	4866      	ldr	r0, [pc, #408]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800eee2:	f001 fa7d 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800eee6:	4965      	ldr	r1, [pc, #404]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800eee8:	4865      	ldr	r0, [pc, #404]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800eeea:	f001 fa67 	bl	80103bc <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3301      	adds	r3, #1
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	f67f af38 	bls.w	800ed6c <MX_IKS01A3_DataLogTerminal_Init+0x24>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800eefc:	2105      	movs	r1, #5
 800eefe:	2000      	movs	r0, #0
 800ef00:	f7fa fb68 	bl	80095d4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800ef04:	2103      	movs	r1, #3
 800ef06:	2001      	movs	r0, #1
 800ef08:	f7fa fb64 	bl	80095d4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	2002      	movs	r0, #2
 800ef10:	f7fa fb60 	bl	80095d4 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800ef14:	2300      	movs	r3, #0
 800ef16:	60fb      	str	r3, [r7, #12]
 800ef18:	e0a2      	b.n	800f060 <MX_IKS01A3_DataLogTerminal_Init+0x318>
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	005b      	lsls	r3, r3, #1
 800ef22:	4413      	add	r3, r2
 800ef24:	00db      	lsls	r3, r3, #3
 800ef26:	4a5a      	ldr	r2, [pc, #360]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef28:	4413      	add	r3, r2
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	f7fa fc60 	bl	80097f0 <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800ef30:	4957      	ldr	r1, [pc, #348]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	4613      	mov	r3, r2
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	4413      	add	r3, r2
 800ef3a:	00db      	lsls	r3, r3, #3
 800ef3c:	440b      	add	r3, r1
 800ef3e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ef40:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800ef42:	4953      	ldr	r1, [pc, #332]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	4613      	mov	r3, r2
 800ef48:	005b      	lsls	r3, r3, #1
 800ef4a:	4413      	add	r3, r2
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	440b      	add	r3, r1
 800ef50:	3301      	adds	r3, #1
 800ef52:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ef54:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800ef56:	494e      	ldr	r1, [pc, #312]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	005b      	lsls	r3, r3, #1
 800ef5e:	4413      	add	r3, r2
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	440b      	add	r3, r1
 800ef64:	3302      	adds	r3, #2
 800ef66:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ef68:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800ef6a:	4949      	ldr	r1, [pc, #292]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	4613      	mov	r3, r2
 800ef70:	005b      	lsls	r3, r3, #1
 800ef72:	4413      	add	r3, r2
 800ef74:	00db      	lsls	r3, r3, #3
 800ef76:	440b      	add	r3, r1
 800ef78:	3304      	adds	r3, #4
 800ef7a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ef7c:	9303      	str	r3, [sp, #12]
 800ef7e:	9502      	str	r5, [sp, #8]
 800ef80:	9401      	str	r4, [sp, #4]
 800ef82:	9000      	str	r0, [sp, #0]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4a43      	ldr	r2, [pc, #268]	; (800f094 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800ef88:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ef8c:	483b      	ldr	r0, [pc, #236]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ef8e:	f001 fa27 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800ef92:	493a      	ldr	r1, [pc, #232]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800ef94:	483a      	ldr	r0, [pc, #232]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800ef96:	f001 fa11 	bl	80103bc <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800ef9a:	493d      	ldr	r1, [pc, #244]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	4413      	add	r3, r2
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	440b      	add	r3, r1
 800efa8:	330c      	adds	r3, #12
 800efaa:	edd3 7a00 	vldr	s15, [r3]
 800efae:	463b      	mov	r3, r7
 800efb0:	2103      	movs	r1, #3
 800efb2:	4618      	mov	r0, r3
 800efb4:	eeb0 0a67 	vmov.f32	s0, s15
 800efb8:	f000 f876 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800efc0:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	4613      	mov	r3, r2
 800efc6:	4a34      	ldr	r2, [pc, #208]	; (800f098 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800efc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800efcc:	482b      	ldr	r0, [pc, #172]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800efce:	f001 fa07 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800efd2:	492a      	ldr	r1, [pc, #168]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800efd4:	482a      	ldr	r0, [pc, #168]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800efd6:	f001 f9f1 	bl	80103bc <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800efda:	492d      	ldr	r1, [pc, #180]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	4613      	mov	r3, r2
 800efe0:	005b      	lsls	r3, r3, #1
 800efe2:	4413      	add	r3, r2
 800efe4:	00db      	lsls	r3, r3, #3
 800efe6:	440b      	add	r3, r1
 800efe8:	3310      	adds	r3, #16
 800efea:	edd3 7a00 	vldr	s15, [r3]
 800efee:	463b      	mov	r3, r7
 800eff0:	2103      	movs	r1, #3
 800eff2:	4618      	mov	r0, r3
 800eff4:	eeb0 0a67 	vmov.f32	s0, s15
 800eff8:	f000 f856 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800f000:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	4613      	mov	r3, r2
 800f006:	4a25      	ldr	r2, [pc, #148]	; (800f09c <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800f008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f00c:	481b      	ldr	r0, [pc, #108]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800f00e:	f001 f9e7 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800f012:	491a      	ldr	r1, [pc, #104]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800f014:	481a      	ldr	r0, [pc, #104]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800f016:	f001 f9d1 	bl	80103bc <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800f01a:	491d      	ldr	r1, [pc, #116]	; (800f090 <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4613      	mov	r3, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	4413      	add	r3, r2
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	440b      	add	r3, r1
 800f028:	3308      	adds	r3, #8
 800f02a:	edd3 7a00 	vldr	s15, [r3]
 800f02e:	463b      	mov	r3, r7
 800f030:	2103      	movs	r1, #3
 800f032:	4618      	mov	r0, r3
 800f034:	eeb0 0a67 	vmov.f32	s0, s15
 800f038:	f000 f836 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	461a      	mov	r2, r3
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4613      	mov	r3, r2
 800f046:	4a16      	ldr	r2, [pc, #88]	; (800f0a0 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800f048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f04c:	480b      	ldr	r0, [pc, #44]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800f04e:	f001 f9c7 	bl	80103e0 <sniprintf>
    printf("%s", dataOut);
 800f052:	490a      	ldr	r1, [pc, #40]	; (800f07c <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800f054:	480a      	ldr	r0, [pc, #40]	; (800f080 <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800f056:	f001 f9b1 	bl	80103bc <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3301      	adds	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2b02      	cmp	r3, #2
 800f064:	f67f af59 	bls.w	800ef1a <MX_IKS01A3_DataLogTerminal_Init+0x1d2>
  }
}
 800f068:	bf00      	nop
 800f06a:	bf00      	nop
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bdb0      	pop	{r4, r5, r7, pc}
 800f072:	bf00      	nop
 800f074:	20000664 	.word	0x20000664
 800f078:	08014f04 	.word	0x08014f04
 800f07c:	20000700 	.word	0x20000700
 800f080:	08014f78 	.word	0x08014f78
 800f084:	08014f7c 	.word	0x08014f7c
 800f088:	08014fa8 	.word	0x08014fa8
 800f08c:	08014fd8 	.word	0x08014fd8
 800f090:	200006b8 	.word	0x200006b8
 800f094:	08015004 	.word	0x08015004
 800f098:	08015078 	.word	0x08015078
 800f09c:	08015094 	.word	0x08015094
 800f0a0:	080150b4 	.word	0x080150b4
 800f0a4:	00000000 	.word	0x00000000

0800f0a8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800f0a8:	b5b0      	push	{r4, r5, r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	ed87 0a03 	vstr	s0, [r7, #12]
 800f0b2:	60b8      	str	r0, [r7, #8]
 800f0b4:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800f0b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800f0ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c2:	db03      	blt.n	800f0cc <floatToInt+0x24>
  {
    out_value->sign = 0;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	701a      	strb	r2, [r3, #0]
 800f0ca:	e008      	b.n	800f0de <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	701a      	strb	r2, [r3, #0]
    in = -in;
 800f0d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800f0d6:	eef1 7a67 	vneg.f32	s15, s15
 800f0da:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f7f1 fa32 	bl	8000548 <__aeabi_f2d>
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	460d      	mov	r5, r1
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7f1 fa1b 	bl	8000524 <__aeabi_i2d>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	ec43 2b11 	vmov	d1, r2, r3
 800f0f6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800f1b0 <floatToInt+0x108>
 800f0fa:	f004 fe45 	bl	8013d88 <pow>
 800f0fe:	ec53 2b10 	vmov	r2, r3, d0
 800f102:	f04f 0000 	mov.w	r0, #0
 800f106:	492c      	ldr	r1, [pc, #176]	; (800f1b8 <floatToInt+0x110>)
 800f108:	f7f1 fba0 	bl	800084c <__aeabi_ddiv>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 f8ba 	bl	800028c <__adddf3>
 800f118:	4602      	mov	r2, r0
 800f11a:	460b      	mov	r3, r1
 800f11c:	4610      	mov	r0, r2
 800f11e:	4619      	mov	r1, r3
 800f120:	f7f1 fd62 	bl	8000be8 <__aeabi_d2f>
 800f124:	4603      	mov	r3, r0
 800f126:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800f128:	edd7 7a03 	vldr	s15, [r7, #12]
 800f12c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f130:	ee17 2a90 	vmov	r2, s15
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	ee07 3a90 	vmov	s15, r3
 800f140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f144:	ed97 7a03 	vldr	s14, [r7, #12]
 800f148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f14c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7f1 f9f9 	bl	8000548 <__aeabi_f2d>
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7f1 f9e2 	bl	8000524 <__aeabi_i2d>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	ec43 2b11 	vmov	d1, r2, r3
 800f168:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800f1b0 <floatToInt+0x108>
 800f16c:	f004 fe0c 	bl	8013d88 <pow>
 800f170:	ec53 2b10 	vmov	r2, r3, d0
 800f174:	4620      	mov	r0, r4
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 fa3e 	bl	80005f8 <__aeabi_dmul>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	ec43 2b17 	vmov	d7, r2, r3
 800f184:	eeb0 0a47 	vmov.f32	s0, s14
 800f188:	eef0 0a67 	vmov.f32	s1, s15
 800f18c:	f004 fe78 	bl	8013e80 <trunc>
 800f190:	ec53 2b10 	vmov	r2, r3, d0
 800f194:	4610      	mov	r0, r2
 800f196:	4619      	mov	r1, r3
 800f198:	f7f1 fcde 	bl	8000b58 <__aeabi_d2iz>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461a      	mov	r2, r3
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	609a      	str	r2, [r3, #8]
}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ac:	f3af 8000 	nop.w
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	40240000 	.word	0x40240000
 800f1b8:	3fe00000 	.word	0x3fe00000
 800f1bc:	00000000 	.word	0x00000000

0800f1c0 <Temp_Sensor_Handler>:




void Temp_Sensor_Handler(uint32_t Instance, uint8_t jednostka_temperatury)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b08a      	sub	sp, #40	; 0x28
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  float temperature;
  displayFloatToInt_t out_value;
  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800f1cc:	f107 0314 	add.w	r3, r7, #20
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7fa fb35 	bl	8009844 <IKS01A3_ENV_SENSOR_GetValue>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d006      	beq.n	800f1ee <Temp_Sensor_Handler+0x2e>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "T: Error");
 800f1e0:	4a5f      	ldr	r2, [pc, #380]	; (800f360 <Temp_Sensor_Handler+0x1a0>)
 800f1e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1e6:	485f      	ldr	r0, [pc, #380]	; (800f364 <Temp_Sensor_Handler+0x1a4>)
 800f1e8:	f001 f8fa 	bl	80103e0 <sniprintf>
 800f1ec:	e073      	b.n	800f2d6 <Temp_Sensor_Handler+0x116>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800f1ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800f1f2:	f107 0308 	add.w	r3, r7, #8
 800f1f6:	2102      	movs	r1, #2
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f1fe:	f7ff ff53 	bl	800f0a8 <floatToInt>
    switch(jednostka_temperatury)
 800f202:	78fb      	ldrb	r3, [r7, #3]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <Temp_Sensor_Handler+0x4e>
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d012      	beq.n	800f232 <Temp_Sensor_Handler+0x72>
 800f20c:	e063      	b.n	800f2d6 <Temp_Sensor_Handler+0x116>
    {
    case 0:
        snprintf(dataOut, MAX_BUF_SIZE, "T:%c%02d.%02dC",((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800f20e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <Temp_Sensor_Handler+0x5a>
 800f216:	232d      	movs	r3, #45	; 0x2d
 800f218:	e000      	b.n	800f21c <Temp_Sensor_Handler+0x5c>
 800f21a:	232b      	movs	r3, #43	; 0x2b
 800f21c:	68fa      	ldr	r2, [r7, #12]
                 (int)out_value.out_dec);
 800f21e:	6939      	ldr	r1, [r7, #16]
        snprintf(dataOut, MAX_BUF_SIZE, "T:%c%02d.%02dC",((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800f220:	9101      	str	r1, [sp, #4]
 800f222:	9200      	str	r2, [sp, #0]
 800f224:	4a50      	ldr	r2, [pc, #320]	; (800f368 <Temp_Sensor_Handler+0x1a8>)
 800f226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f22a:	484e      	ldr	r0, [pc, #312]	; (800f364 <Temp_Sensor_Handler+0x1a4>)
 800f22c:	f001 f8d8 	bl	80103e0 <sniprintf>
  	  break;
 800f230:	e051      	b.n	800f2d6 <Temp_Sensor_Handler+0x116>
    case 1:
    	int fahrenheit_decimal=(int)out_value.out_int*1.8+32;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4618      	mov	r0, r3
 800f236:	f7f1 f975 	bl	8000524 <__aeabi_i2d>
 800f23a:	a347      	add	r3, pc, #284	; (adr r3, 800f358 <Temp_Sensor_Handler+0x198>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 f9da 	bl	80005f8 <__aeabi_dmul>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4610      	mov	r0, r2
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 0200 	mov.w	r2, #0
 800f250:	4b46      	ldr	r3, [pc, #280]	; (800f36c <Temp_Sensor_Handler+0x1ac>)
 800f252:	f7f1 f81b 	bl	800028c <__adddf3>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	4610      	mov	r0, r2
 800f25c:	4619      	mov	r1, r3
 800f25e:	f7f1 fc7b 	bl	8000b58 <__aeabi_d2iz>
 800f262:	4603      	mov	r3, r0
 800f264:	61fb      	str	r3, [r7, #28]
    	uint8_t fahrenheit_float=(int)out_value.out_dec*1.8;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f1 f95b 	bl	8000524 <__aeabi_i2d>
 800f26e:	a33a      	add	r3, pc, #232	; (adr r3, 800f358 <Temp_Sensor_Handler+0x198>)
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4610      	mov	r0, r2
 800f27e:	4619      	mov	r1, r3
 800f280:	f7f1 fc92 	bl	8000ba8 <__aeabi_d2uiz>
 800f284:	4603      	mov	r3, r0
 800f286:	76fb      	strb	r3, [r7, #27]
    	fahrenheit_decimal+=fahrenheit_float/100;
 800f288:	7efb      	ldrb	r3, [r7, #27]
 800f28a:	4a39      	ldr	r2, [pc, #228]	; (800f370 <Temp_Sensor_Handler+0x1b0>)
 800f28c:	fba2 2303 	umull	r2, r3, r2, r3
 800f290:	095b      	lsrs	r3, r3, #5
 800f292:	b2db      	uxtb	r3, r3
 800f294:	461a      	mov	r2, r3
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	4413      	add	r3, r2
 800f29a:	61fb      	str	r3, [r7, #28]
    	fahrenheit_float%=100;
 800f29c:	7efb      	ldrb	r3, [r7, #27]
 800f29e:	4a34      	ldr	r2, [pc, #208]	; (800f370 <Temp_Sensor_Handler+0x1b0>)
 800f2a0:	fba2 1203 	umull	r1, r2, r2, r3
 800f2a4:	0952      	lsrs	r2, r2, #5
 800f2a6:	2164      	movs	r1, #100	; 0x64
 800f2a8:	fb01 f202 	mul.w	r2, r1, r2
 800f2ac:	1a9b      	subs	r3, r3, r2
 800f2ae:	76fb      	strb	r3, [r7, #27]
        snprintf(dataOut, MAX_BUF_SIZE, "T:%c%02d.%02dF",((out_value.sign) ? '-' : '+'), fahrenheit_decimal,fahrenheit_float);
 800f2b0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <Temp_Sensor_Handler+0xfc>
 800f2b8:	222d      	movs	r2, #45	; 0x2d
 800f2ba:	e000      	b.n	800f2be <Temp_Sensor_Handler+0xfe>
 800f2bc:	222b      	movs	r2, #43	; 0x2b
 800f2be:	7efb      	ldrb	r3, [r7, #27]
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	4a2a      	ldr	r2, [pc, #168]	; (800f374 <Temp_Sensor_Handler+0x1b4>)
 800f2ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f2ce:	4825      	ldr	r0, [pc, #148]	; (800f364 <Temp_Sensor_Handler+0x1a4>)
 800f2d0:	f001 f886 	bl	80103e0 <sniprintf>
  	  break;
 800f2d4:	bf00      	nop
    }
  }
  lcd_clear();
 800f2d6:	f7f2 fa71 	bl	80017bc <lcd_clear>
  if ((int)out_value.out_int>=30)
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b1d      	cmp	r3, #29
 800f2de:	dd0a      	ble.n	800f2f6 <Temp_Sensor_Handler+0x136>
  {
  	lcd_print(2,3,"Slonecznie");
 800f2e0:	4a25      	ldr	r2, [pc, #148]	; (800f378 <Temp_Sensor_Handler+0x1b8>)
 800f2e2:	2103      	movs	r1, #3
 800f2e4:	2002      	movs	r0, #2
 800f2e6:	f7f2 fa51 	bl	800178c <lcd_print>
  	lcd_char(2,1,3);
 800f2ea:	2203      	movs	r2, #3
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	2002      	movs	r0, #2
 800f2f0:	f7f2 fa35 	bl	800175e <lcd_char>
 800f2f4:	e01a      	b.n	800f32c <Temp_Sensor_Handler+0x16c>
  }
  else if((int)out_value.out_int<30 && ((int)out_value.out_int>=24))
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2b1d      	cmp	r3, #29
 800f2fa:	dc0d      	bgt.n	800f318 <Temp_Sensor_Handler+0x158>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2b17      	cmp	r3, #23
 800f300:	dd0a      	ble.n	800f318 <Temp_Sensor_Handler+0x158>
  {
  	lcd_print(2,3,"Za chmurami");
 800f302:	4a1e      	ldr	r2, [pc, #120]	; (800f37c <Temp_Sensor_Handler+0x1bc>)
 800f304:	2103      	movs	r1, #3
 800f306:	2002      	movs	r0, #2
 800f308:	f7f2 fa40 	bl	800178c <lcd_print>
  	lcd_char(2,1,4);
 800f30c:	2204      	movs	r2, #4
 800f30e:	2101      	movs	r1, #1
 800f310:	2002      	movs	r0, #2
 800f312:	f7f2 fa24 	bl	800175e <lcd_char>
 800f316:	e009      	b.n	800f32c <Temp_Sensor_Handler+0x16c>
  }
  else
  {
  	lcd_print(2,3,"Zachmurzenie");
 800f318:	4a19      	ldr	r2, [pc, #100]	; (800f380 <Temp_Sensor_Handler+0x1c0>)
 800f31a:	2103      	movs	r1, #3
 800f31c:	2002      	movs	r0, #2
 800f31e:	f7f2 fa35 	bl	800178c <lcd_print>
  	lcd_char(2,1,5);
 800f322:	2205      	movs	r2, #5
 800f324:	2101      	movs	r1, #1
 800f326:	2002      	movs	r0, #2
 800f328:	f7f2 fa19 	bl	800175e <lcd_char>
  }

  lcd_print(1,1, dataOut);
 800f32c:	4a0d      	ldr	r2, [pc, #52]	; (800f364 <Temp_Sensor_Handler+0x1a4>)
 800f32e:	2101      	movs	r1, #1
 800f330:	2001      	movs	r0, #1
 800f332:	f7f2 fa2b 	bl	800178c <lcd_print>
  lcd_char(1,16,2);
 800f336:	2202      	movs	r2, #2
 800f338:	2110      	movs	r1, #16
 800f33a:	2001      	movs	r0, #1
 800f33c:	f7f2 fa0f 	bl	800175e <lcd_char>
  HAL_Delay(1000);
 800f340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f344:	f7fb f8b2 	bl	800a4ac <HAL_Delay>
  lcd_clear();
 800f348:	f7f2 fa38 	bl	80017bc <lcd_clear>
}
 800f34c:	bf00      	nop
 800f34e:	3720      	adds	r7, #32
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	f3af 8000 	nop.w
 800f358:	cccccccd 	.word	0xcccccccd
 800f35c:	3ffccccc 	.word	0x3ffccccc
 800f360:	080150d0 	.word	0x080150d0
 800f364:	20000700 	.word	0x20000700
 800f368:	080150dc 	.word	0x080150dc
 800f36c:	40400000 	.word	0x40400000
 800f370:	51eb851f 	.word	0x51eb851f
 800f374:	080150ec 	.word	0x080150ec
 800f378:	080150fc 	.word	0x080150fc
 800f37c:	08015108 	.word	0x08015108
 800f380:	08015114 	.word	0x08015114

0800f384 <Press_Sensor_Handler>:

void Press_Sensor_Handler(uint32_t Instance)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08a      	sub	sp, #40	; 0x28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  float pressure;
  displayFloatToInt_t out_value;
  char buf[16]="";
 800f38c:	2300      	movs	r3, #0
 800f38e:	60bb      	str	r3, [r7, #8]
 800f390:	f107 030c 	add.w	r3, r7, #12
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]
 800f398:	605a      	str	r2, [r3, #4]
 800f39a:	609a      	str	r2, [r3, #8]

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800f39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	2102      	movs	r1, #2
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7fa fa4d 	bl	8009844 <IKS01A3_ENV_SENSOR_GetValue>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d006      	beq.n	800f3be <Press_Sensor_Handler+0x3a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "P: Error");
 800f3b0:	4a29      	ldr	r2, [pc, #164]	; (800f458 <Press_Sensor_Handler+0xd4>)
 800f3b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f3b6:	4829      	ldr	r0, [pc, #164]	; (800f45c <Press_Sensor_Handler+0xd8>)
 800f3b8:	f001 f812 	bl	80103e0 <sniprintf>
 800f3bc:	e02e      	b.n	800f41c <Press_Sensor_Handler+0x98>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800f3be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f3c2:	f107 0318 	add.w	r3, r7, #24
 800f3c6:	2102      	movs	r1, #2
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	eeb0 0a67 	vmov.f32	s0, s15
 800f3ce:	f7ff fe6b 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "P:%dhPa",(int)out_value.out_int);
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	4a22      	ldr	r2, [pc, #136]	; (800f460 <Press_Sensor_Handler+0xdc>)
 800f3d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f3da:	4820      	ldr	r0, [pc, #128]	; (800f45c <Press_Sensor_Handler+0xd8>)
 800f3dc:	f001 f800 	bl	80103e0 <sniprintf>
    if((int)out_value.out_int==1013)
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	f240 32f5 	movw	r2, #1013	; 0x3f5
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d105      	bne.n	800f3f6 <Press_Sensor_Handler+0x72>
    {
    	sprintf(buf,"W normie");
 800f3ea:	f107 0308 	add.w	r3, r7, #8
 800f3ee:	491d      	ldr	r1, [pc, #116]	; (800f464 <Press_Sensor_Handler+0xe0>)
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f001 f829 	bl	8010448 <siprintf>
    }
    if((int)out_value.out_int>1013)
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800f3fe:	429a      	cmp	r2, r3
 800f400:	dd06      	ble.n	800f410 <Press_Sensor_Handler+0x8c>
    {
    	sprintf(buf,"Za wysokie");
 800f402:	f107 0308 	add.w	r3, r7, #8
 800f406:	4918      	ldr	r1, [pc, #96]	; (800f468 <Press_Sensor_Handler+0xe4>)
 800f408:	4618      	mov	r0, r3
 800f40a:	f001 f81d 	bl	8010448 <siprintf>
 800f40e:	e005      	b.n	800f41c <Press_Sensor_Handler+0x98>
    }
    else
    {
    	sprintf(buf,"Za niskie");
 800f410:	f107 0308 	add.w	r3, r7, #8
 800f414:	4915      	ldr	r1, [pc, #84]	; (800f46c <Press_Sensor_Handler+0xe8>)
 800f416:	4618      	mov	r0, r3
 800f418:	f001 f816 	bl	8010448 <siprintf>
    }
  }
  lcd_clear();
 800f41c:	f7f2 f9ce 	bl	80017bc <lcd_clear>
  lcd_print(1,1, dataOut);
 800f420:	4a0e      	ldr	r2, [pc, #56]	; (800f45c <Press_Sensor_Handler+0xd8>)
 800f422:	2101      	movs	r1, #1
 800f424:	2001      	movs	r0, #1
 800f426:	f7f2 f9b1 	bl	800178c <lcd_print>
  lcd_char(1,16,1);
 800f42a:	2201      	movs	r2, #1
 800f42c:	2110      	movs	r1, #16
 800f42e:	2001      	movs	r0, #1
 800f430:	f7f2 f995 	bl	800175e <lcd_char>
  lcd_print(2,1,buf);
 800f434:	f107 0308 	add.w	r3, r7, #8
 800f438:	461a      	mov	r2, r3
 800f43a:	2101      	movs	r1, #1
 800f43c:	2002      	movs	r0, #2
 800f43e:	f7f2 f9a5 	bl	800178c <lcd_print>
  HAL_Delay(1000);
 800f442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f446:	f7fb f831 	bl	800a4ac <HAL_Delay>
  lcd_clear();
 800f44a:	f7f2 f9b7 	bl	80017bc <lcd_clear>
}
 800f44e:	bf00      	nop
 800f450:	3728      	adds	r7, #40	; 0x28
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	08015124 	.word	0x08015124
 800f45c:	20000700 	.word	0x20000700
 800f460:	08015130 	.word	0x08015130
 800f464:	08015138 	.word	0x08015138
 800f468:	08015144 	.word	0x08015144
 800f46c:	08015150 	.word	0x08015150

0800f470 <Hum_Sensor_Handler>:
void Hum_Sensor_Handler(uint32_t Instance)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08a      	sub	sp, #40	; 0x28
 800f474:	af02      	add	r7, sp, #8
 800f476:	6078      	str	r0, [r7, #4]
  float humidity;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800f478:	f107 0314 	add.w	r3, r7, #20
 800f47c:	461a      	mov	r2, r3
 800f47e:	2104      	movs	r1, #4
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7fa f9df 	bl	8009844 <IKS01A3_ENV_SENSOR_GetValue>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <Hum_Sensor_Handler+0x2a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "H: Error");
 800f48c:	4a2b      	ldr	r2, [pc, #172]	; (800f53c <Hum_Sensor_Handler+0xcc>)
 800f48e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f492:	482b      	ldr	r0, [pc, #172]	; (800f540 <Hum_Sensor_Handler+0xd0>)
 800f494:	f000 ffa4 	bl	80103e0 <sniprintf>
 800f498:	e014      	b.n	800f4c4 <Hum_Sensor_Handler+0x54>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 800f49a:	edd7 7a05 	vldr	s15, [r7, #20]
 800f49e:	f107 0308 	add.w	r3, r7, #8
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f4aa:	f7ff fdfd 	bl	800f0a8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "H:%d.%02d%%", (int)out_value.out_int,
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	461a      	mov	r2, r3
             (int)out_value.out_dec);
 800f4b2:	693b      	ldr	r3, [r7, #16]
    snprintf(dataOut, MAX_BUF_SIZE, "H:%d.%02d%%", (int)out_value.out_int,
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	4a22      	ldr	r2, [pc, #136]	; (800f544 <Hum_Sensor_Handler+0xd4>)
 800f4ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f4be:	4820      	ldr	r0, [pc, #128]	; (800f540 <Hum_Sensor_Handler+0xd0>)
 800f4c0:	f000 ff8e 	bl	80103e0 <sniprintf>
  }
  lcd_clear();
 800f4c4:	f7f2 f97a 	bl	80017bc <lcd_clear>
  lcd_print(1,1, dataOut);
 800f4c8:	4a1d      	ldr	r2, [pc, #116]	; (800f540 <Hum_Sensor_Handler+0xd0>)
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	f7f2 f95d 	bl	800178c <lcd_print>
  lcd_char(1,16,0);
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2110      	movs	r1, #16
 800f4d6:	2001      	movs	r0, #1
 800f4d8:	f7f2 f941 	bl	800175e <lcd_char>
  lcd_char(2,3,'[');
 800f4dc:	225b      	movs	r2, #91	; 0x5b
 800f4de:	2103      	movs	r1, #3
 800f4e0:	2002      	movs	r0, #2
 800f4e2:	f7f2 f93c 	bl	800175e <lcd_char>
  int wartosc=(int)out_value.out_int/10;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	4a17      	ldr	r2, [pc, #92]	; (800f548 <Hum_Sensor_Handler+0xd8>)
 800f4ea:	fb82 1203 	smull	r1, r2, r2, r3
 800f4ee:	1092      	asrs	r2, r2, #2
 800f4f0:	17db      	asrs	r3, r3, #31
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	61bb      	str	r3, [r7, #24]
  for(int i=1;i<wartosc+1;i++)
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e00b      	b.n	800f514 <Hum_Sensor_Handler+0xa4>
  {
	  lcd_char(2,i+3,0);
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	3303      	adds	r3, #3
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2200      	movs	r2, #0
 800f506:	4619      	mov	r1, r3
 800f508:	2002      	movs	r0, #2
 800f50a:	f7f2 f928 	bl	800175e <lcd_char>
  for(int i=1;i<wartosc+1;i++)
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	3301      	adds	r3, #1
 800f512:	61fb      	str	r3, [r7, #28]
 800f514:	69ba      	ldr	r2, [r7, #24]
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	429a      	cmp	r2, r3
 800f51a:	daef      	bge.n	800f4fc <Hum_Sensor_Handler+0x8c>
  }
  lcd_char(2,14,']');
 800f51c:	225d      	movs	r2, #93	; 0x5d
 800f51e:	210e      	movs	r1, #14
 800f520:	2002      	movs	r0, #2
 800f522:	f7f2 f91c 	bl	800175e <lcd_char>
  HAL_Delay(1000);
 800f526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f52a:	f7fa ffbf 	bl	800a4ac <HAL_Delay>
  lcd_clear();
 800f52e:	f7f2 f945 	bl	80017bc <lcd_clear>
}
 800f532:	bf00      	nop
 800f534:	3720      	adds	r7, #32
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	0801515c 	.word	0x0801515c
 800f540:	20000700 	.word	0x20000700
 800f544:	08015168 	.word	0x08015168
 800f548:	66666667 	.word	0x66666667

0800f54c <__cvt>:
 800f54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f550:	ec55 4b10 	vmov	r4, r5, d0
 800f554:	2d00      	cmp	r5, #0
 800f556:	460e      	mov	r6, r1
 800f558:	4619      	mov	r1, r3
 800f55a:	462b      	mov	r3, r5
 800f55c:	bfbb      	ittet	lt
 800f55e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f562:	461d      	movlt	r5, r3
 800f564:	2300      	movge	r3, #0
 800f566:	232d      	movlt	r3, #45	; 0x2d
 800f568:	700b      	strb	r3, [r1, #0]
 800f56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f56c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f570:	4691      	mov	r9, r2
 800f572:	f023 0820 	bic.w	r8, r3, #32
 800f576:	bfbc      	itt	lt
 800f578:	4622      	movlt	r2, r4
 800f57a:	4614      	movlt	r4, r2
 800f57c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f580:	d005      	beq.n	800f58e <__cvt+0x42>
 800f582:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f586:	d100      	bne.n	800f58a <__cvt+0x3e>
 800f588:	3601      	adds	r6, #1
 800f58a:	2102      	movs	r1, #2
 800f58c:	e000      	b.n	800f590 <__cvt+0x44>
 800f58e:	2103      	movs	r1, #3
 800f590:	ab03      	add	r3, sp, #12
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	ab02      	add	r3, sp, #8
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	ec45 4b10 	vmov	d0, r4, r5
 800f59c:	4653      	mov	r3, sl
 800f59e:	4632      	mov	r2, r6
 800f5a0:	f001 f8c6 	bl	8010730 <_dtoa_r>
 800f5a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	d102      	bne.n	800f5b2 <__cvt+0x66>
 800f5ac:	f019 0f01 	tst.w	r9, #1
 800f5b0:	d022      	beq.n	800f5f8 <__cvt+0xac>
 800f5b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5b6:	eb07 0906 	add.w	r9, r7, r6
 800f5ba:	d110      	bne.n	800f5de <__cvt+0x92>
 800f5bc:	783b      	ldrb	r3, [r7, #0]
 800f5be:	2b30      	cmp	r3, #48	; 0x30
 800f5c0:	d10a      	bne.n	800f5d8 <__cvt+0x8c>
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	f7f1 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ce:	b918      	cbnz	r0, 800f5d8 <__cvt+0x8c>
 800f5d0:	f1c6 0601 	rsb	r6, r6, #1
 800f5d4:	f8ca 6000 	str.w	r6, [sl]
 800f5d8:	f8da 3000 	ldr.w	r3, [sl]
 800f5dc:	4499      	add	r9, r3
 800f5de:	2200      	movs	r2, #0
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f1 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ea:	b108      	cbz	r0, 800f5f0 <__cvt+0xa4>
 800f5ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5f0:	2230      	movs	r2, #48	; 0x30
 800f5f2:	9b03      	ldr	r3, [sp, #12]
 800f5f4:	454b      	cmp	r3, r9
 800f5f6:	d307      	bcc.n	800f608 <__cvt+0xbc>
 800f5f8:	9b03      	ldr	r3, [sp, #12]
 800f5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5fc:	1bdb      	subs	r3, r3, r7
 800f5fe:	4638      	mov	r0, r7
 800f600:	6013      	str	r3, [r2, #0]
 800f602:	b004      	add	sp, #16
 800f604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f608:	1c59      	adds	r1, r3, #1
 800f60a:	9103      	str	r1, [sp, #12]
 800f60c:	701a      	strb	r2, [r3, #0]
 800f60e:	e7f0      	b.n	800f5f2 <__cvt+0xa6>

0800f610 <__exponent>:
 800f610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f612:	4603      	mov	r3, r0
 800f614:	2900      	cmp	r1, #0
 800f616:	bfb8      	it	lt
 800f618:	4249      	neglt	r1, r1
 800f61a:	f803 2b02 	strb.w	r2, [r3], #2
 800f61e:	bfb4      	ite	lt
 800f620:	222d      	movlt	r2, #45	; 0x2d
 800f622:	222b      	movge	r2, #43	; 0x2b
 800f624:	2909      	cmp	r1, #9
 800f626:	7042      	strb	r2, [r0, #1]
 800f628:	dd2a      	ble.n	800f680 <__exponent+0x70>
 800f62a:	f10d 0207 	add.w	r2, sp, #7
 800f62e:	4617      	mov	r7, r2
 800f630:	260a      	movs	r6, #10
 800f632:	4694      	mov	ip, r2
 800f634:	fb91 f5f6 	sdiv	r5, r1, r6
 800f638:	fb06 1415 	mls	r4, r6, r5, r1
 800f63c:	3430      	adds	r4, #48	; 0x30
 800f63e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f642:	460c      	mov	r4, r1
 800f644:	2c63      	cmp	r4, #99	; 0x63
 800f646:	f102 32ff 	add.w	r2, r2, #4294967295
 800f64a:	4629      	mov	r1, r5
 800f64c:	dcf1      	bgt.n	800f632 <__exponent+0x22>
 800f64e:	3130      	adds	r1, #48	; 0x30
 800f650:	f1ac 0402 	sub.w	r4, ip, #2
 800f654:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f658:	1c41      	adds	r1, r0, #1
 800f65a:	4622      	mov	r2, r4
 800f65c:	42ba      	cmp	r2, r7
 800f65e:	d30a      	bcc.n	800f676 <__exponent+0x66>
 800f660:	f10d 0209 	add.w	r2, sp, #9
 800f664:	eba2 020c 	sub.w	r2, r2, ip
 800f668:	42bc      	cmp	r4, r7
 800f66a:	bf88      	it	hi
 800f66c:	2200      	movhi	r2, #0
 800f66e:	4413      	add	r3, r2
 800f670:	1a18      	subs	r0, r3, r0
 800f672:	b003      	add	sp, #12
 800f674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f676:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f67a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f67e:	e7ed      	b.n	800f65c <__exponent+0x4c>
 800f680:	2330      	movs	r3, #48	; 0x30
 800f682:	3130      	adds	r1, #48	; 0x30
 800f684:	7083      	strb	r3, [r0, #2]
 800f686:	70c1      	strb	r1, [r0, #3]
 800f688:	1d03      	adds	r3, r0, #4
 800f68a:	e7f1      	b.n	800f670 <__exponent+0x60>

0800f68c <_printf_float>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	ed2d 8b02 	vpush	{d8}
 800f694:	b08d      	sub	sp, #52	; 0x34
 800f696:	460c      	mov	r4, r1
 800f698:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f69c:	4616      	mov	r6, r2
 800f69e:	461f      	mov	r7, r3
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	f000 ff3d 	bl	8010520 <_localeconv_r>
 800f6a6:	f8d0 a000 	ldr.w	sl, [r0]
 800f6aa:	4650      	mov	r0, sl
 800f6ac:	f7f0 fde0 	bl	8000270 <strlen>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	9305      	str	r3, [sp, #20]
 800f6b8:	f8d8 3000 	ldr.w	r3, [r8]
 800f6bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f6c0:	3307      	adds	r3, #7
 800f6c2:	f023 0307 	bic.w	r3, r3, #7
 800f6c6:	f103 0208 	add.w	r2, r3, #8
 800f6ca:	f8c8 2000 	str.w	r2, [r8]
 800f6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6d6:	9307      	str	r3, [sp, #28]
 800f6d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6dc:	ee08 0a10 	vmov	s16, r0
 800f6e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6e8:	4b9e      	ldr	r3, [pc, #632]	; (800f964 <_printf_float+0x2d8>)
 800f6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ee:	f7f1 fa1d 	bl	8000b2c <__aeabi_dcmpun>
 800f6f2:	bb88      	cbnz	r0, 800f758 <_printf_float+0xcc>
 800f6f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6f8:	4b9a      	ldr	r3, [pc, #616]	; (800f964 <_printf_float+0x2d8>)
 800f6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fe:	f7f1 f9f7 	bl	8000af0 <__aeabi_dcmple>
 800f702:	bb48      	cbnz	r0, 800f758 <_printf_float+0xcc>
 800f704:	2200      	movs	r2, #0
 800f706:	2300      	movs	r3, #0
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	f7f1 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800f710:	b110      	cbz	r0, 800f718 <_printf_float+0x8c>
 800f712:	232d      	movs	r3, #45	; 0x2d
 800f714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f718:	4a93      	ldr	r2, [pc, #588]	; (800f968 <_printf_float+0x2dc>)
 800f71a:	4b94      	ldr	r3, [pc, #592]	; (800f96c <_printf_float+0x2e0>)
 800f71c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f720:	bf94      	ite	ls
 800f722:	4690      	movls	r8, r2
 800f724:	4698      	movhi	r8, r3
 800f726:	2303      	movs	r3, #3
 800f728:	6123      	str	r3, [r4, #16]
 800f72a:	9b05      	ldr	r3, [sp, #20]
 800f72c:	f023 0304 	bic.w	r3, r3, #4
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	f04f 0900 	mov.w	r9, #0
 800f736:	9700      	str	r7, [sp, #0]
 800f738:	4633      	mov	r3, r6
 800f73a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f73c:	4621      	mov	r1, r4
 800f73e:	4628      	mov	r0, r5
 800f740:	f000 f9da 	bl	800faf8 <_printf_common>
 800f744:	3001      	adds	r0, #1
 800f746:	f040 8090 	bne.w	800f86a <_printf_float+0x1de>
 800f74a:	f04f 30ff 	mov.w	r0, #4294967295
 800f74e:	b00d      	add	sp, #52	; 0x34
 800f750:	ecbd 8b02 	vpop	{d8}
 800f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f758:	4642      	mov	r2, r8
 800f75a:	464b      	mov	r3, r9
 800f75c:	4640      	mov	r0, r8
 800f75e:	4649      	mov	r1, r9
 800f760:	f7f1 f9e4 	bl	8000b2c <__aeabi_dcmpun>
 800f764:	b140      	cbz	r0, 800f778 <_printf_float+0xec>
 800f766:	464b      	mov	r3, r9
 800f768:	2b00      	cmp	r3, #0
 800f76a:	bfbc      	itt	lt
 800f76c:	232d      	movlt	r3, #45	; 0x2d
 800f76e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f772:	4a7f      	ldr	r2, [pc, #508]	; (800f970 <_printf_float+0x2e4>)
 800f774:	4b7f      	ldr	r3, [pc, #508]	; (800f974 <_printf_float+0x2e8>)
 800f776:	e7d1      	b.n	800f71c <_printf_float+0x90>
 800f778:	6863      	ldr	r3, [r4, #4]
 800f77a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f77e:	9206      	str	r2, [sp, #24]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	d13f      	bne.n	800f804 <_printf_float+0x178>
 800f784:	2306      	movs	r3, #6
 800f786:	6063      	str	r3, [r4, #4]
 800f788:	9b05      	ldr	r3, [sp, #20]
 800f78a:	6861      	ldr	r1, [r4, #4]
 800f78c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f790:	2300      	movs	r3, #0
 800f792:	9303      	str	r3, [sp, #12]
 800f794:	ab0a      	add	r3, sp, #40	; 0x28
 800f796:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f79a:	ab09      	add	r3, sp, #36	; 0x24
 800f79c:	ec49 8b10 	vmov	d0, r8, r9
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	6022      	str	r2, [r4, #0]
 800f7a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	f7ff fecf 	bl	800f54c <__cvt>
 800f7ae:	9b06      	ldr	r3, [sp, #24]
 800f7b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7b2:	2b47      	cmp	r3, #71	; 0x47
 800f7b4:	4680      	mov	r8, r0
 800f7b6:	d108      	bne.n	800f7ca <_printf_float+0x13e>
 800f7b8:	1cc8      	adds	r0, r1, #3
 800f7ba:	db02      	blt.n	800f7c2 <_printf_float+0x136>
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	4299      	cmp	r1, r3
 800f7c0:	dd41      	ble.n	800f846 <_printf_float+0x1ba>
 800f7c2:	f1ab 0302 	sub.w	r3, fp, #2
 800f7c6:	fa5f fb83 	uxtb.w	fp, r3
 800f7ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7ce:	d820      	bhi.n	800f812 <_printf_float+0x186>
 800f7d0:	3901      	subs	r1, #1
 800f7d2:	465a      	mov	r2, fp
 800f7d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f7da:	f7ff ff19 	bl	800f610 <__exponent>
 800f7de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7e0:	1813      	adds	r3, r2, r0
 800f7e2:	2a01      	cmp	r2, #1
 800f7e4:	4681      	mov	r9, r0
 800f7e6:	6123      	str	r3, [r4, #16]
 800f7e8:	dc02      	bgt.n	800f7f0 <_printf_float+0x164>
 800f7ea:	6822      	ldr	r2, [r4, #0]
 800f7ec:	07d2      	lsls	r2, r2, #31
 800f7ee:	d501      	bpl.n	800f7f4 <_printf_float+0x168>
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	6123      	str	r3, [r4, #16]
 800f7f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d09c      	beq.n	800f736 <_printf_float+0xaa>
 800f7fc:	232d      	movs	r3, #45	; 0x2d
 800f7fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f802:	e798      	b.n	800f736 <_printf_float+0xaa>
 800f804:	9a06      	ldr	r2, [sp, #24]
 800f806:	2a47      	cmp	r2, #71	; 0x47
 800f808:	d1be      	bne.n	800f788 <_printf_float+0xfc>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1bc      	bne.n	800f788 <_printf_float+0xfc>
 800f80e:	2301      	movs	r3, #1
 800f810:	e7b9      	b.n	800f786 <_printf_float+0xfa>
 800f812:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f816:	d118      	bne.n	800f84a <_printf_float+0x1be>
 800f818:	2900      	cmp	r1, #0
 800f81a:	6863      	ldr	r3, [r4, #4]
 800f81c:	dd0b      	ble.n	800f836 <_printf_float+0x1aa>
 800f81e:	6121      	str	r1, [r4, #16]
 800f820:	b913      	cbnz	r3, 800f828 <_printf_float+0x19c>
 800f822:	6822      	ldr	r2, [r4, #0]
 800f824:	07d0      	lsls	r0, r2, #31
 800f826:	d502      	bpl.n	800f82e <_printf_float+0x1a2>
 800f828:	3301      	adds	r3, #1
 800f82a:	440b      	add	r3, r1
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f830:	f04f 0900 	mov.w	r9, #0
 800f834:	e7de      	b.n	800f7f4 <_printf_float+0x168>
 800f836:	b913      	cbnz	r3, 800f83e <_printf_float+0x1b2>
 800f838:	6822      	ldr	r2, [r4, #0]
 800f83a:	07d2      	lsls	r2, r2, #31
 800f83c:	d501      	bpl.n	800f842 <_printf_float+0x1b6>
 800f83e:	3302      	adds	r3, #2
 800f840:	e7f4      	b.n	800f82c <_printf_float+0x1a0>
 800f842:	2301      	movs	r3, #1
 800f844:	e7f2      	b.n	800f82c <_printf_float+0x1a0>
 800f846:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84c:	4299      	cmp	r1, r3
 800f84e:	db05      	blt.n	800f85c <_printf_float+0x1d0>
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	6121      	str	r1, [r4, #16]
 800f854:	07d8      	lsls	r0, r3, #31
 800f856:	d5ea      	bpl.n	800f82e <_printf_float+0x1a2>
 800f858:	1c4b      	adds	r3, r1, #1
 800f85a:	e7e7      	b.n	800f82c <_printf_float+0x1a0>
 800f85c:	2900      	cmp	r1, #0
 800f85e:	bfd4      	ite	le
 800f860:	f1c1 0202 	rsble	r2, r1, #2
 800f864:	2201      	movgt	r2, #1
 800f866:	4413      	add	r3, r2
 800f868:	e7e0      	b.n	800f82c <_printf_float+0x1a0>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	055a      	lsls	r2, r3, #21
 800f86e:	d407      	bmi.n	800f880 <_printf_float+0x1f4>
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	4642      	mov	r2, r8
 800f874:	4631      	mov	r1, r6
 800f876:	4628      	mov	r0, r5
 800f878:	47b8      	blx	r7
 800f87a:	3001      	adds	r0, #1
 800f87c:	d12c      	bne.n	800f8d8 <_printf_float+0x24c>
 800f87e:	e764      	b.n	800f74a <_printf_float+0xbe>
 800f880:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f884:	f240 80e0 	bls.w	800fa48 <_printf_float+0x3bc>
 800f888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f88c:	2200      	movs	r2, #0
 800f88e:	2300      	movs	r3, #0
 800f890:	f7f1 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f894:	2800      	cmp	r0, #0
 800f896:	d034      	beq.n	800f902 <_printf_float+0x276>
 800f898:	4a37      	ldr	r2, [pc, #220]	; (800f978 <_printf_float+0x2ec>)
 800f89a:	2301      	movs	r3, #1
 800f89c:	4631      	mov	r1, r6
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b8      	blx	r7
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	f43f af51 	beq.w	800f74a <_printf_float+0xbe>
 800f8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	db02      	blt.n	800f8b6 <_printf_float+0x22a>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	07d8      	lsls	r0, r3, #31
 800f8b4:	d510      	bpl.n	800f8d8 <_printf_float+0x24c>
 800f8b6:	ee18 3a10 	vmov	r3, s16
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4628      	mov	r0, r5
 800f8c0:	47b8      	blx	r7
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	f43f af41 	beq.w	800f74a <_printf_float+0xbe>
 800f8c8:	f04f 0800 	mov.w	r8, #0
 800f8cc:	f104 091a 	add.w	r9, r4, #26
 800f8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	4543      	cmp	r3, r8
 800f8d6:	dc09      	bgt.n	800f8ec <_printf_float+0x260>
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	079b      	lsls	r3, r3, #30
 800f8dc:	f100 8107 	bmi.w	800faee <_printf_float+0x462>
 800f8e0:	68e0      	ldr	r0, [r4, #12]
 800f8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e4:	4298      	cmp	r0, r3
 800f8e6:	bfb8      	it	lt
 800f8e8:	4618      	movlt	r0, r3
 800f8ea:	e730      	b.n	800f74e <_printf_float+0xc2>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	464a      	mov	r2, r9
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	f43f af27 	beq.w	800f74a <_printf_float+0xbe>
 800f8fc:	f108 0801 	add.w	r8, r8, #1
 800f900:	e7e6      	b.n	800f8d0 <_printf_float+0x244>
 800f902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f904:	2b00      	cmp	r3, #0
 800f906:	dc39      	bgt.n	800f97c <_printf_float+0x2f0>
 800f908:	4a1b      	ldr	r2, [pc, #108]	; (800f978 <_printf_float+0x2ec>)
 800f90a:	2301      	movs	r3, #1
 800f90c:	4631      	mov	r1, r6
 800f90e:	4628      	mov	r0, r5
 800f910:	47b8      	blx	r7
 800f912:	3001      	adds	r0, #1
 800f914:	f43f af19 	beq.w	800f74a <_printf_float+0xbe>
 800f918:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f91c:	4313      	orrs	r3, r2
 800f91e:	d102      	bne.n	800f926 <_printf_float+0x29a>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	07d9      	lsls	r1, r3, #31
 800f924:	d5d8      	bpl.n	800f8d8 <_printf_float+0x24c>
 800f926:	ee18 3a10 	vmov	r3, s16
 800f92a:	4652      	mov	r2, sl
 800f92c:	4631      	mov	r1, r6
 800f92e:	4628      	mov	r0, r5
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	f43f af09 	beq.w	800f74a <_printf_float+0xbe>
 800f938:	f04f 0900 	mov.w	r9, #0
 800f93c:	f104 0a1a 	add.w	sl, r4, #26
 800f940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f942:	425b      	negs	r3, r3
 800f944:	454b      	cmp	r3, r9
 800f946:	dc01      	bgt.n	800f94c <_printf_float+0x2c0>
 800f948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f94a:	e792      	b.n	800f872 <_printf_float+0x1e6>
 800f94c:	2301      	movs	r3, #1
 800f94e:	4652      	mov	r2, sl
 800f950:	4631      	mov	r1, r6
 800f952:	4628      	mov	r0, r5
 800f954:	47b8      	blx	r7
 800f956:	3001      	adds	r0, #1
 800f958:	f43f aef7 	beq.w	800f74a <_printf_float+0xbe>
 800f95c:	f109 0901 	add.w	r9, r9, #1
 800f960:	e7ee      	b.n	800f940 <_printf_float+0x2b4>
 800f962:	bf00      	nop
 800f964:	7fefffff 	.word	0x7fefffff
 800f968:	080151b4 	.word	0x080151b4
 800f96c:	080151b8 	.word	0x080151b8
 800f970:	080151bc 	.word	0x080151bc
 800f974:	080151c0 	.word	0x080151c0
 800f978:	080151c4 	.word	0x080151c4
 800f97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f97e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f980:	429a      	cmp	r2, r3
 800f982:	bfa8      	it	ge
 800f984:	461a      	movge	r2, r3
 800f986:	2a00      	cmp	r2, #0
 800f988:	4691      	mov	r9, r2
 800f98a:	dc37      	bgt.n	800f9fc <_printf_float+0x370>
 800f98c:	f04f 0b00 	mov.w	fp, #0
 800f990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f994:	f104 021a 	add.w	r2, r4, #26
 800f998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f99a:	9305      	str	r3, [sp, #20]
 800f99c:	eba3 0309 	sub.w	r3, r3, r9
 800f9a0:	455b      	cmp	r3, fp
 800f9a2:	dc33      	bgt.n	800fa0c <_printf_float+0x380>
 800f9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	db3b      	blt.n	800fa24 <_printf_float+0x398>
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	07da      	lsls	r2, r3, #31
 800f9b0:	d438      	bmi.n	800fa24 <_printf_float+0x398>
 800f9b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f9b6:	eba2 0903 	sub.w	r9, r2, r3
 800f9ba:	9b05      	ldr	r3, [sp, #20]
 800f9bc:	1ad2      	subs	r2, r2, r3
 800f9be:	4591      	cmp	r9, r2
 800f9c0:	bfa8      	it	ge
 800f9c2:	4691      	movge	r9, r2
 800f9c4:	f1b9 0f00 	cmp.w	r9, #0
 800f9c8:	dc35      	bgt.n	800fa36 <_printf_float+0x3aa>
 800f9ca:	f04f 0800 	mov.w	r8, #0
 800f9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9d2:	f104 0a1a 	add.w	sl, r4, #26
 800f9d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9da:	1a9b      	subs	r3, r3, r2
 800f9dc:	eba3 0309 	sub.w	r3, r3, r9
 800f9e0:	4543      	cmp	r3, r8
 800f9e2:	f77f af79 	ble.w	800f8d8 <_printf_float+0x24c>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	4652      	mov	r2, sl
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	47b8      	blx	r7
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	f43f aeaa 	beq.w	800f74a <_printf_float+0xbe>
 800f9f6:	f108 0801 	add.w	r8, r8, #1
 800f9fa:	e7ec      	b.n	800f9d6 <_printf_float+0x34a>
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4642      	mov	r2, r8
 800fa02:	4628      	mov	r0, r5
 800fa04:	47b8      	blx	r7
 800fa06:	3001      	adds	r0, #1
 800fa08:	d1c0      	bne.n	800f98c <_printf_float+0x300>
 800fa0a:	e69e      	b.n	800f74a <_printf_float+0xbe>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	4631      	mov	r1, r6
 800fa10:	4628      	mov	r0, r5
 800fa12:	9205      	str	r2, [sp, #20]
 800fa14:	47b8      	blx	r7
 800fa16:	3001      	adds	r0, #1
 800fa18:	f43f ae97 	beq.w	800f74a <_printf_float+0xbe>
 800fa1c:	9a05      	ldr	r2, [sp, #20]
 800fa1e:	f10b 0b01 	add.w	fp, fp, #1
 800fa22:	e7b9      	b.n	800f998 <_printf_float+0x30c>
 800fa24:	ee18 3a10 	vmov	r3, s16
 800fa28:	4652      	mov	r2, sl
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b8      	blx	r7
 800fa30:	3001      	adds	r0, #1
 800fa32:	d1be      	bne.n	800f9b2 <_printf_float+0x326>
 800fa34:	e689      	b.n	800f74a <_printf_float+0xbe>
 800fa36:	9a05      	ldr	r2, [sp, #20]
 800fa38:	464b      	mov	r3, r9
 800fa3a:	4442      	add	r2, r8
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4628      	mov	r0, r5
 800fa40:	47b8      	blx	r7
 800fa42:	3001      	adds	r0, #1
 800fa44:	d1c1      	bne.n	800f9ca <_printf_float+0x33e>
 800fa46:	e680      	b.n	800f74a <_printf_float+0xbe>
 800fa48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa4a:	2a01      	cmp	r2, #1
 800fa4c:	dc01      	bgt.n	800fa52 <_printf_float+0x3c6>
 800fa4e:	07db      	lsls	r3, r3, #31
 800fa50:	d53a      	bpl.n	800fac8 <_printf_float+0x43c>
 800fa52:	2301      	movs	r3, #1
 800fa54:	4642      	mov	r2, r8
 800fa56:	4631      	mov	r1, r6
 800fa58:	4628      	mov	r0, r5
 800fa5a:	47b8      	blx	r7
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	f43f ae74 	beq.w	800f74a <_printf_float+0xbe>
 800fa62:	ee18 3a10 	vmov	r3, s16
 800fa66:	4652      	mov	r2, sl
 800fa68:	4631      	mov	r1, r6
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	47b8      	blx	r7
 800fa6e:	3001      	adds	r0, #1
 800fa70:	f43f ae6b 	beq.w	800f74a <_printf_float+0xbe>
 800fa74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fa80:	f7f1 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa84:	b9d8      	cbnz	r0, 800fabe <_printf_float+0x432>
 800fa86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fa8a:	f108 0201 	add.w	r2, r8, #1
 800fa8e:	4631      	mov	r1, r6
 800fa90:	4628      	mov	r0, r5
 800fa92:	47b8      	blx	r7
 800fa94:	3001      	adds	r0, #1
 800fa96:	d10e      	bne.n	800fab6 <_printf_float+0x42a>
 800fa98:	e657      	b.n	800f74a <_printf_float+0xbe>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	4652      	mov	r2, sl
 800fa9e:	4631      	mov	r1, r6
 800faa0:	4628      	mov	r0, r5
 800faa2:	47b8      	blx	r7
 800faa4:	3001      	adds	r0, #1
 800faa6:	f43f ae50 	beq.w	800f74a <_printf_float+0xbe>
 800faaa:	f108 0801 	add.w	r8, r8, #1
 800faae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fab0:	3b01      	subs	r3, #1
 800fab2:	4543      	cmp	r3, r8
 800fab4:	dcf1      	bgt.n	800fa9a <_printf_float+0x40e>
 800fab6:	464b      	mov	r3, r9
 800fab8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fabc:	e6da      	b.n	800f874 <_printf_float+0x1e8>
 800fabe:	f04f 0800 	mov.w	r8, #0
 800fac2:	f104 0a1a 	add.w	sl, r4, #26
 800fac6:	e7f2      	b.n	800faae <_printf_float+0x422>
 800fac8:	2301      	movs	r3, #1
 800faca:	4642      	mov	r2, r8
 800facc:	e7df      	b.n	800fa8e <_printf_float+0x402>
 800face:	2301      	movs	r3, #1
 800fad0:	464a      	mov	r2, r9
 800fad2:	4631      	mov	r1, r6
 800fad4:	4628      	mov	r0, r5
 800fad6:	47b8      	blx	r7
 800fad8:	3001      	adds	r0, #1
 800fada:	f43f ae36 	beq.w	800f74a <_printf_float+0xbe>
 800fade:	f108 0801 	add.w	r8, r8, #1
 800fae2:	68e3      	ldr	r3, [r4, #12]
 800fae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fae6:	1a5b      	subs	r3, r3, r1
 800fae8:	4543      	cmp	r3, r8
 800faea:	dcf0      	bgt.n	800face <_printf_float+0x442>
 800faec:	e6f8      	b.n	800f8e0 <_printf_float+0x254>
 800faee:	f04f 0800 	mov.w	r8, #0
 800faf2:	f104 0919 	add.w	r9, r4, #25
 800faf6:	e7f4      	b.n	800fae2 <_printf_float+0x456>

0800faf8 <_printf_common>:
 800faf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fafc:	4616      	mov	r6, r2
 800fafe:	4699      	mov	r9, r3
 800fb00:	688a      	ldr	r2, [r1, #8]
 800fb02:	690b      	ldr	r3, [r1, #16]
 800fb04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	bfb8      	it	lt
 800fb0c:	4613      	movlt	r3, r2
 800fb0e:	6033      	str	r3, [r6, #0]
 800fb10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb14:	4607      	mov	r7, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	b10a      	cbz	r2, 800fb1e <_printf_common+0x26>
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	6033      	str	r3, [r6, #0]
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	0699      	lsls	r1, r3, #26
 800fb22:	bf42      	ittt	mi
 800fb24:	6833      	ldrmi	r3, [r6, #0]
 800fb26:	3302      	addmi	r3, #2
 800fb28:	6033      	strmi	r3, [r6, #0]
 800fb2a:	6825      	ldr	r5, [r4, #0]
 800fb2c:	f015 0506 	ands.w	r5, r5, #6
 800fb30:	d106      	bne.n	800fb40 <_printf_common+0x48>
 800fb32:	f104 0a19 	add.w	sl, r4, #25
 800fb36:	68e3      	ldr	r3, [r4, #12]
 800fb38:	6832      	ldr	r2, [r6, #0]
 800fb3a:	1a9b      	subs	r3, r3, r2
 800fb3c:	42ab      	cmp	r3, r5
 800fb3e:	dc26      	bgt.n	800fb8e <_printf_common+0x96>
 800fb40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb44:	1e13      	subs	r3, r2, #0
 800fb46:	6822      	ldr	r2, [r4, #0]
 800fb48:	bf18      	it	ne
 800fb4a:	2301      	movne	r3, #1
 800fb4c:	0692      	lsls	r2, r2, #26
 800fb4e:	d42b      	bmi.n	800fba8 <_printf_common+0xb0>
 800fb50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb54:	4649      	mov	r1, r9
 800fb56:	4638      	mov	r0, r7
 800fb58:	47c0      	blx	r8
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	d01e      	beq.n	800fb9c <_printf_common+0xa4>
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	6922      	ldr	r2, [r4, #16]
 800fb62:	f003 0306 	and.w	r3, r3, #6
 800fb66:	2b04      	cmp	r3, #4
 800fb68:	bf02      	ittt	eq
 800fb6a:	68e5      	ldreq	r5, [r4, #12]
 800fb6c:	6833      	ldreq	r3, [r6, #0]
 800fb6e:	1aed      	subeq	r5, r5, r3
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	bf0c      	ite	eq
 800fb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb78:	2500      	movne	r5, #0
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	bfc4      	itt	gt
 800fb7e:	1a9b      	subgt	r3, r3, r2
 800fb80:	18ed      	addgt	r5, r5, r3
 800fb82:	2600      	movs	r6, #0
 800fb84:	341a      	adds	r4, #26
 800fb86:	42b5      	cmp	r5, r6
 800fb88:	d11a      	bne.n	800fbc0 <_printf_common+0xc8>
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	e008      	b.n	800fba0 <_printf_common+0xa8>
 800fb8e:	2301      	movs	r3, #1
 800fb90:	4652      	mov	r2, sl
 800fb92:	4649      	mov	r1, r9
 800fb94:	4638      	mov	r0, r7
 800fb96:	47c0      	blx	r8
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d103      	bne.n	800fba4 <_printf_common+0xac>
 800fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba4:	3501      	adds	r5, #1
 800fba6:	e7c6      	b.n	800fb36 <_printf_common+0x3e>
 800fba8:	18e1      	adds	r1, r4, r3
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	2030      	movs	r0, #48	; 0x30
 800fbae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbb2:	4422      	add	r2, r4
 800fbb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbbc:	3302      	adds	r3, #2
 800fbbe:	e7c7      	b.n	800fb50 <_printf_common+0x58>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	4622      	mov	r2, r4
 800fbc4:	4649      	mov	r1, r9
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	47c0      	blx	r8
 800fbca:	3001      	adds	r0, #1
 800fbcc:	d0e6      	beq.n	800fb9c <_printf_common+0xa4>
 800fbce:	3601      	adds	r6, #1
 800fbd0:	e7d9      	b.n	800fb86 <_printf_common+0x8e>
	...

0800fbd4 <_printf_i>:
 800fbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd8:	7e0f      	ldrb	r7, [r1, #24]
 800fbda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbdc:	2f78      	cmp	r7, #120	; 0x78
 800fbde:	4691      	mov	r9, r2
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	469a      	mov	sl, r3
 800fbe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbea:	d807      	bhi.n	800fbfc <_printf_i+0x28>
 800fbec:	2f62      	cmp	r7, #98	; 0x62
 800fbee:	d80a      	bhi.n	800fc06 <_printf_i+0x32>
 800fbf0:	2f00      	cmp	r7, #0
 800fbf2:	f000 80d4 	beq.w	800fd9e <_printf_i+0x1ca>
 800fbf6:	2f58      	cmp	r7, #88	; 0x58
 800fbf8:	f000 80c0 	beq.w	800fd7c <_printf_i+0x1a8>
 800fbfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc04:	e03a      	b.n	800fc7c <_printf_i+0xa8>
 800fc06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc0a:	2b15      	cmp	r3, #21
 800fc0c:	d8f6      	bhi.n	800fbfc <_printf_i+0x28>
 800fc0e:	a101      	add	r1, pc, #4	; (adr r1, 800fc14 <_printf_i+0x40>)
 800fc10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc14:	0800fc6d 	.word	0x0800fc6d
 800fc18:	0800fc81 	.word	0x0800fc81
 800fc1c:	0800fbfd 	.word	0x0800fbfd
 800fc20:	0800fbfd 	.word	0x0800fbfd
 800fc24:	0800fbfd 	.word	0x0800fbfd
 800fc28:	0800fbfd 	.word	0x0800fbfd
 800fc2c:	0800fc81 	.word	0x0800fc81
 800fc30:	0800fbfd 	.word	0x0800fbfd
 800fc34:	0800fbfd 	.word	0x0800fbfd
 800fc38:	0800fbfd 	.word	0x0800fbfd
 800fc3c:	0800fbfd 	.word	0x0800fbfd
 800fc40:	0800fd85 	.word	0x0800fd85
 800fc44:	0800fcad 	.word	0x0800fcad
 800fc48:	0800fd3f 	.word	0x0800fd3f
 800fc4c:	0800fbfd 	.word	0x0800fbfd
 800fc50:	0800fbfd 	.word	0x0800fbfd
 800fc54:	0800fda7 	.word	0x0800fda7
 800fc58:	0800fbfd 	.word	0x0800fbfd
 800fc5c:	0800fcad 	.word	0x0800fcad
 800fc60:	0800fbfd 	.word	0x0800fbfd
 800fc64:	0800fbfd 	.word	0x0800fbfd
 800fc68:	0800fd47 	.word	0x0800fd47
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	1d1a      	adds	r2, r3, #4
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	602a      	str	r2, [r5, #0]
 800fc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e09f      	b.n	800fdc0 <_printf_i+0x1ec>
 800fc80:	6820      	ldr	r0, [r4, #0]
 800fc82:	682b      	ldr	r3, [r5, #0]
 800fc84:	0607      	lsls	r7, r0, #24
 800fc86:	f103 0104 	add.w	r1, r3, #4
 800fc8a:	6029      	str	r1, [r5, #0]
 800fc8c:	d501      	bpl.n	800fc92 <_printf_i+0xbe>
 800fc8e:	681e      	ldr	r6, [r3, #0]
 800fc90:	e003      	b.n	800fc9a <_printf_i+0xc6>
 800fc92:	0646      	lsls	r6, r0, #25
 800fc94:	d5fb      	bpl.n	800fc8e <_printf_i+0xba>
 800fc96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc9a:	2e00      	cmp	r6, #0
 800fc9c:	da03      	bge.n	800fca6 <_printf_i+0xd2>
 800fc9e:	232d      	movs	r3, #45	; 0x2d
 800fca0:	4276      	negs	r6, r6
 800fca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fca6:	485a      	ldr	r0, [pc, #360]	; (800fe10 <_printf_i+0x23c>)
 800fca8:	230a      	movs	r3, #10
 800fcaa:	e012      	b.n	800fcd2 <_printf_i+0xfe>
 800fcac:	682b      	ldr	r3, [r5, #0]
 800fcae:	6820      	ldr	r0, [r4, #0]
 800fcb0:	1d19      	adds	r1, r3, #4
 800fcb2:	6029      	str	r1, [r5, #0]
 800fcb4:	0605      	lsls	r5, r0, #24
 800fcb6:	d501      	bpl.n	800fcbc <_printf_i+0xe8>
 800fcb8:	681e      	ldr	r6, [r3, #0]
 800fcba:	e002      	b.n	800fcc2 <_printf_i+0xee>
 800fcbc:	0641      	lsls	r1, r0, #25
 800fcbe:	d5fb      	bpl.n	800fcb8 <_printf_i+0xe4>
 800fcc0:	881e      	ldrh	r6, [r3, #0]
 800fcc2:	4853      	ldr	r0, [pc, #332]	; (800fe10 <_printf_i+0x23c>)
 800fcc4:	2f6f      	cmp	r7, #111	; 0x6f
 800fcc6:	bf0c      	ite	eq
 800fcc8:	2308      	moveq	r3, #8
 800fcca:	230a      	movne	r3, #10
 800fccc:	2100      	movs	r1, #0
 800fcce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcd2:	6865      	ldr	r5, [r4, #4]
 800fcd4:	60a5      	str	r5, [r4, #8]
 800fcd6:	2d00      	cmp	r5, #0
 800fcd8:	bfa2      	ittt	ge
 800fcda:	6821      	ldrge	r1, [r4, #0]
 800fcdc:	f021 0104 	bicge.w	r1, r1, #4
 800fce0:	6021      	strge	r1, [r4, #0]
 800fce2:	b90e      	cbnz	r6, 800fce8 <_printf_i+0x114>
 800fce4:	2d00      	cmp	r5, #0
 800fce6:	d04b      	beq.n	800fd80 <_printf_i+0x1ac>
 800fce8:	4615      	mov	r5, r2
 800fcea:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcee:	fb03 6711 	mls	r7, r3, r1, r6
 800fcf2:	5dc7      	ldrb	r7, [r0, r7]
 800fcf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fcf8:	4637      	mov	r7, r6
 800fcfa:	42bb      	cmp	r3, r7
 800fcfc:	460e      	mov	r6, r1
 800fcfe:	d9f4      	bls.n	800fcea <_printf_i+0x116>
 800fd00:	2b08      	cmp	r3, #8
 800fd02:	d10b      	bne.n	800fd1c <_printf_i+0x148>
 800fd04:	6823      	ldr	r3, [r4, #0]
 800fd06:	07de      	lsls	r6, r3, #31
 800fd08:	d508      	bpl.n	800fd1c <_printf_i+0x148>
 800fd0a:	6923      	ldr	r3, [r4, #16]
 800fd0c:	6861      	ldr	r1, [r4, #4]
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	bfde      	ittt	le
 800fd12:	2330      	movle	r3, #48	; 0x30
 800fd14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd1c:	1b52      	subs	r2, r2, r5
 800fd1e:	6122      	str	r2, [r4, #16]
 800fd20:	f8cd a000 	str.w	sl, [sp]
 800fd24:	464b      	mov	r3, r9
 800fd26:	aa03      	add	r2, sp, #12
 800fd28:	4621      	mov	r1, r4
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	f7ff fee4 	bl	800faf8 <_printf_common>
 800fd30:	3001      	adds	r0, #1
 800fd32:	d14a      	bne.n	800fdca <_printf_i+0x1f6>
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295
 800fd38:	b004      	add	sp, #16
 800fd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	f043 0320 	orr.w	r3, r3, #32
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	4833      	ldr	r0, [pc, #204]	; (800fe14 <_printf_i+0x240>)
 800fd48:	2778      	movs	r7, #120	; 0x78
 800fd4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	6829      	ldr	r1, [r5, #0]
 800fd52:	061f      	lsls	r7, r3, #24
 800fd54:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd58:	d402      	bmi.n	800fd60 <_printf_i+0x18c>
 800fd5a:	065f      	lsls	r7, r3, #25
 800fd5c:	bf48      	it	mi
 800fd5e:	b2b6      	uxthmi	r6, r6
 800fd60:	07df      	lsls	r7, r3, #31
 800fd62:	bf48      	it	mi
 800fd64:	f043 0320 	orrmi.w	r3, r3, #32
 800fd68:	6029      	str	r1, [r5, #0]
 800fd6a:	bf48      	it	mi
 800fd6c:	6023      	strmi	r3, [r4, #0]
 800fd6e:	b91e      	cbnz	r6, 800fd78 <_printf_i+0x1a4>
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	f023 0320 	bic.w	r3, r3, #32
 800fd76:	6023      	str	r3, [r4, #0]
 800fd78:	2310      	movs	r3, #16
 800fd7a:	e7a7      	b.n	800fccc <_printf_i+0xf8>
 800fd7c:	4824      	ldr	r0, [pc, #144]	; (800fe10 <_printf_i+0x23c>)
 800fd7e:	e7e4      	b.n	800fd4a <_printf_i+0x176>
 800fd80:	4615      	mov	r5, r2
 800fd82:	e7bd      	b.n	800fd00 <_printf_i+0x12c>
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	6826      	ldr	r6, [r4, #0]
 800fd88:	6961      	ldr	r1, [r4, #20]
 800fd8a:	1d18      	adds	r0, r3, #4
 800fd8c:	6028      	str	r0, [r5, #0]
 800fd8e:	0635      	lsls	r5, r6, #24
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	d501      	bpl.n	800fd98 <_printf_i+0x1c4>
 800fd94:	6019      	str	r1, [r3, #0]
 800fd96:	e002      	b.n	800fd9e <_printf_i+0x1ca>
 800fd98:	0670      	lsls	r0, r6, #25
 800fd9a:	d5fb      	bpl.n	800fd94 <_printf_i+0x1c0>
 800fd9c:	8019      	strh	r1, [r3, #0]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	6123      	str	r3, [r4, #16]
 800fda2:	4615      	mov	r5, r2
 800fda4:	e7bc      	b.n	800fd20 <_printf_i+0x14c>
 800fda6:	682b      	ldr	r3, [r5, #0]
 800fda8:	1d1a      	adds	r2, r3, #4
 800fdaa:	602a      	str	r2, [r5, #0]
 800fdac:	681d      	ldr	r5, [r3, #0]
 800fdae:	6862      	ldr	r2, [r4, #4]
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f7f0 fa0c 	bl	80001d0 <memchr>
 800fdb8:	b108      	cbz	r0, 800fdbe <_printf_i+0x1ea>
 800fdba:	1b40      	subs	r0, r0, r5
 800fdbc:	6060      	str	r0, [r4, #4]
 800fdbe:	6863      	ldr	r3, [r4, #4]
 800fdc0:	6123      	str	r3, [r4, #16]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc8:	e7aa      	b.n	800fd20 <_printf_i+0x14c>
 800fdca:	6923      	ldr	r3, [r4, #16]
 800fdcc:	462a      	mov	r2, r5
 800fdce:	4649      	mov	r1, r9
 800fdd0:	4640      	mov	r0, r8
 800fdd2:	47d0      	blx	sl
 800fdd4:	3001      	adds	r0, #1
 800fdd6:	d0ad      	beq.n	800fd34 <_printf_i+0x160>
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	079b      	lsls	r3, r3, #30
 800fddc:	d413      	bmi.n	800fe06 <_printf_i+0x232>
 800fdde:	68e0      	ldr	r0, [r4, #12]
 800fde0:	9b03      	ldr	r3, [sp, #12]
 800fde2:	4298      	cmp	r0, r3
 800fde4:	bfb8      	it	lt
 800fde6:	4618      	movlt	r0, r3
 800fde8:	e7a6      	b.n	800fd38 <_printf_i+0x164>
 800fdea:	2301      	movs	r3, #1
 800fdec:	4632      	mov	r2, r6
 800fdee:	4649      	mov	r1, r9
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	47d0      	blx	sl
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	d09d      	beq.n	800fd34 <_printf_i+0x160>
 800fdf8:	3501      	adds	r5, #1
 800fdfa:	68e3      	ldr	r3, [r4, #12]
 800fdfc:	9903      	ldr	r1, [sp, #12]
 800fdfe:	1a5b      	subs	r3, r3, r1
 800fe00:	42ab      	cmp	r3, r5
 800fe02:	dcf2      	bgt.n	800fdea <_printf_i+0x216>
 800fe04:	e7eb      	b.n	800fdde <_printf_i+0x20a>
 800fe06:	2500      	movs	r5, #0
 800fe08:	f104 0619 	add.w	r6, r4, #25
 800fe0c:	e7f5      	b.n	800fdfa <_printf_i+0x226>
 800fe0e:	bf00      	nop
 800fe10:	080151c6 	.word	0x080151c6
 800fe14:	080151d7 	.word	0x080151d7

0800fe18 <_scanf_float>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	b087      	sub	sp, #28
 800fe1e:	4617      	mov	r7, r2
 800fe20:	9303      	str	r3, [sp, #12]
 800fe22:	688b      	ldr	r3, [r1, #8]
 800fe24:	1e5a      	subs	r2, r3, #1
 800fe26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe2a:	bf83      	ittte	hi
 800fe2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe30:	195b      	addhi	r3, r3, r5
 800fe32:	9302      	strhi	r3, [sp, #8]
 800fe34:	2300      	movls	r3, #0
 800fe36:	bf86      	itte	hi
 800fe38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe3c:	608b      	strhi	r3, [r1, #8]
 800fe3e:	9302      	strls	r3, [sp, #8]
 800fe40:	680b      	ldr	r3, [r1, #0]
 800fe42:	468b      	mov	fp, r1
 800fe44:	2500      	movs	r5, #0
 800fe46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fe4a:	f84b 3b1c 	str.w	r3, [fp], #28
 800fe4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fe52:	4680      	mov	r8, r0
 800fe54:	460c      	mov	r4, r1
 800fe56:	465e      	mov	r6, fp
 800fe58:	46aa      	mov	sl, r5
 800fe5a:	46a9      	mov	r9, r5
 800fe5c:	9501      	str	r5, [sp, #4]
 800fe5e:	68a2      	ldr	r2, [r4, #8]
 800fe60:	b152      	cbz	r2, 800fe78 <_scanf_float+0x60>
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	2b4e      	cmp	r3, #78	; 0x4e
 800fe68:	d864      	bhi.n	800ff34 <_scanf_float+0x11c>
 800fe6a:	2b40      	cmp	r3, #64	; 0x40
 800fe6c:	d83c      	bhi.n	800fee8 <_scanf_float+0xd0>
 800fe6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fe72:	b2c8      	uxtb	r0, r1
 800fe74:	280e      	cmp	r0, #14
 800fe76:	d93a      	bls.n	800feee <_scanf_float+0xd6>
 800fe78:	f1b9 0f00 	cmp.w	r9, #0
 800fe7c:	d003      	beq.n	800fe86 <_scanf_float+0x6e>
 800fe7e:	6823      	ldr	r3, [r4, #0]
 800fe80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe84:	6023      	str	r3, [r4, #0]
 800fe86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe8a:	f1ba 0f01 	cmp.w	sl, #1
 800fe8e:	f200 8113 	bhi.w	80100b8 <_scanf_float+0x2a0>
 800fe92:	455e      	cmp	r6, fp
 800fe94:	f200 8105 	bhi.w	80100a2 <_scanf_float+0x28a>
 800fe98:	2501      	movs	r5, #1
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	b007      	add	sp, #28
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fea6:	2a0d      	cmp	r2, #13
 800fea8:	d8e6      	bhi.n	800fe78 <_scanf_float+0x60>
 800feaa:	a101      	add	r1, pc, #4	; (adr r1, 800feb0 <_scanf_float+0x98>)
 800feac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800feb0:	0800ffef 	.word	0x0800ffef
 800feb4:	0800fe79 	.word	0x0800fe79
 800feb8:	0800fe79 	.word	0x0800fe79
 800febc:	0800fe79 	.word	0x0800fe79
 800fec0:	0801004f 	.word	0x0801004f
 800fec4:	08010027 	.word	0x08010027
 800fec8:	0800fe79 	.word	0x0800fe79
 800fecc:	0800fe79 	.word	0x0800fe79
 800fed0:	0800fffd 	.word	0x0800fffd
 800fed4:	0800fe79 	.word	0x0800fe79
 800fed8:	0800fe79 	.word	0x0800fe79
 800fedc:	0800fe79 	.word	0x0800fe79
 800fee0:	0800fe79 	.word	0x0800fe79
 800fee4:	0800ffb5 	.word	0x0800ffb5
 800fee8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800feec:	e7db      	b.n	800fea6 <_scanf_float+0x8e>
 800feee:	290e      	cmp	r1, #14
 800fef0:	d8c2      	bhi.n	800fe78 <_scanf_float+0x60>
 800fef2:	a001      	add	r0, pc, #4	; (adr r0, 800fef8 <_scanf_float+0xe0>)
 800fef4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fef8:	0800ffa7 	.word	0x0800ffa7
 800fefc:	0800fe79 	.word	0x0800fe79
 800ff00:	0800ffa7 	.word	0x0800ffa7
 800ff04:	0801003b 	.word	0x0801003b
 800ff08:	0800fe79 	.word	0x0800fe79
 800ff0c:	0800ff55 	.word	0x0800ff55
 800ff10:	0800ff91 	.word	0x0800ff91
 800ff14:	0800ff91 	.word	0x0800ff91
 800ff18:	0800ff91 	.word	0x0800ff91
 800ff1c:	0800ff91 	.word	0x0800ff91
 800ff20:	0800ff91 	.word	0x0800ff91
 800ff24:	0800ff91 	.word	0x0800ff91
 800ff28:	0800ff91 	.word	0x0800ff91
 800ff2c:	0800ff91 	.word	0x0800ff91
 800ff30:	0800ff91 	.word	0x0800ff91
 800ff34:	2b6e      	cmp	r3, #110	; 0x6e
 800ff36:	d809      	bhi.n	800ff4c <_scanf_float+0x134>
 800ff38:	2b60      	cmp	r3, #96	; 0x60
 800ff3a:	d8b2      	bhi.n	800fea2 <_scanf_float+0x8a>
 800ff3c:	2b54      	cmp	r3, #84	; 0x54
 800ff3e:	d077      	beq.n	8010030 <_scanf_float+0x218>
 800ff40:	2b59      	cmp	r3, #89	; 0x59
 800ff42:	d199      	bne.n	800fe78 <_scanf_float+0x60>
 800ff44:	2d07      	cmp	r5, #7
 800ff46:	d197      	bne.n	800fe78 <_scanf_float+0x60>
 800ff48:	2508      	movs	r5, #8
 800ff4a:	e029      	b.n	800ffa0 <_scanf_float+0x188>
 800ff4c:	2b74      	cmp	r3, #116	; 0x74
 800ff4e:	d06f      	beq.n	8010030 <_scanf_float+0x218>
 800ff50:	2b79      	cmp	r3, #121	; 0x79
 800ff52:	e7f6      	b.n	800ff42 <_scanf_float+0x12a>
 800ff54:	6821      	ldr	r1, [r4, #0]
 800ff56:	05c8      	lsls	r0, r1, #23
 800ff58:	d51a      	bpl.n	800ff90 <_scanf_float+0x178>
 800ff5a:	9b02      	ldr	r3, [sp, #8]
 800ff5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ff60:	6021      	str	r1, [r4, #0]
 800ff62:	f109 0901 	add.w	r9, r9, #1
 800ff66:	b11b      	cbz	r3, 800ff70 <_scanf_float+0x158>
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	3201      	adds	r2, #1
 800ff6c:	9302      	str	r3, [sp, #8]
 800ff6e:	60a2      	str	r2, [r4, #8]
 800ff70:	68a3      	ldr	r3, [r4, #8]
 800ff72:	3b01      	subs	r3, #1
 800ff74:	60a3      	str	r3, [r4, #8]
 800ff76:	6923      	ldr	r3, [r4, #16]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	6123      	str	r3, [r4, #16]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	607b      	str	r3, [r7, #4]
 800ff84:	f340 8084 	ble.w	8010090 <_scanf_float+0x278>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	603b      	str	r3, [r7, #0]
 800ff8e:	e766      	b.n	800fe5e <_scanf_float+0x46>
 800ff90:	eb1a 0f05 	cmn.w	sl, r5
 800ff94:	f47f af70 	bne.w	800fe78 <_scanf_float+0x60>
 800ff98:	6822      	ldr	r2, [r4, #0]
 800ff9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	f806 3b01 	strb.w	r3, [r6], #1
 800ffa4:	e7e4      	b.n	800ff70 <_scanf_float+0x158>
 800ffa6:	6822      	ldr	r2, [r4, #0]
 800ffa8:	0610      	lsls	r0, r2, #24
 800ffaa:	f57f af65 	bpl.w	800fe78 <_scanf_float+0x60>
 800ffae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ffb2:	e7f4      	b.n	800ff9e <_scanf_float+0x186>
 800ffb4:	f1ba 0f00 	cmp.w	sl, #0
 800ffb8:	d10e      	bne.n	800ffd8 <_scanf_float+0x1c0>
 800ffba:	f1b9 0f00 	cmp.w	r9, #0
 800ffbe:	d10e      	bne.n	800ffde <_scanf_float+0x1c6>
 800ffc0:	6822      	ldr	r2, [r4, #0]
 800ffc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ffc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ffca:	d108      	bne.n	800ffde <_scanf_float+0x1c6>
 800ffcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ffd0:	6022      	str	r2, [r4, #0]
 800ffd2:	f04f 0a01 	mov.w	sl, #1
 800ffd6:	e7e3      	b.n	800ffa0 <_scanf_float+0x188>
 800ffd8:	f1ba 0f02 	cmp.w	sl, #2
 800ffdc:	d055      	beq.n	801008a <_scanf_float+0x272>
 800ffde:	2d01      	cmp	r5, #1
 800ffe0:	d002      	beq.n	800ffe8 <_scanf_float+0x1d0>
 800ffe2:	2d04      	cmp	r5, #4
 800ffe4:	f47f af48 	bne.w	800fe78 <_scanf_float+0x60>
 800ffe8:	3501      	adds	r5, #1
 800ffea:	b2ed      	uxtb	r5, r5
 800ffec:	e7d8      	b.n	800ffa0 <_scanf_float+0x188>
 800ffee:	f1ba 0f01 	cmp.w	sl, #1
 800fff2:	f47f af41 	bne.w	800fe78 <_scanf_float+0x60>
 800fff6:	f04f 0a02 	mov.w	sl, #2
 800fffa:	e7d1      	b.n	800ffa0 <_scanf_float+0x188>
 800fffc:	b97d      	cbnz	r5, 801001e <_scanf_float+0x206>
 800fffe:	f1b9 0f00 	cmp.w	r9, #0
 8010002:	f47f af3c 	bne.w	800fe7e <_scanf_float+0x66>
 8010006:	6822      	ldr	r2, [r4, #0]
 8010008:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801000c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010010:	f47f af39 	bne.w	800fe86 <_scanf_float+0x6e>
 8010014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010018:	6022      	str	r2, [r4, #0]
 801001a:	2501      	movs	r5, #1
 801001c:	e7c0      	b.n	800ffa0 <_scanf_float+0x188>
 801001e:	2d03      	cmp	r5, #3
 8010020:	d0e2      	beq.n	800ffe8 <_scanf_float+0x1d0>
 8010022:	2d05      	cmp	r5, #5
 8010024:	e7de      	b.n	800ffe4 <_scanf_float+0x1cc>
 8010026:	2d02      	cmp	r5, #2
 8010028:	f47f af26 	bne.w	800fe78 <_scanf_float+0x60>
 801002c:	2503      	movs	r5, #3
 801002e:	e7b7      	b.n	800ffa0 <_scanf_float+0x188>
 8010030:	2d06      	cmp	r5, #6
 8010032:	f47f af21 	bne.w	800fe78 <_scanf_float+0x60>
 8010036:	2507      	movs	r5, #7
 8010038:	e7b2      	b.n	800ffa0 <_scanf_float+0x188>
 801003a:	6822      	ldr	r2, [r4, #0]
 801003c:	0591      	lsls	r1, r2, #22
 801003e:	f57f af1b 	bpl.w	800fe78 <_scanf_float+0x60>
 8010042:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010046:	6022      	str	r2, [r4, #0]
 8010048:	f8cd 9004 	str.w	r9, [sp, #4]
 801004c:	e7a8      	b.n	800ffa0 <_scanf_float+0x188>
 801004e:	6822      	ldr	r2, [r4, #0]
 8010050:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010054:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010058:	d006      	beq.n	8010068 <_scanf_float+0x250>
 801005a:	0550      	lsls	r0, r2, #21
 801005c:	f57f af0c 	bpl.w	800fe78 <_scanf_float+0x60>
 8010060:	f1b9 0f00 	cmp.w	r9, #0
 8010064:	f43f af0f 	beq.w	800fe86 <_scanf_float+0x6e>
 8010068:	0591      	lsls	r1, r2, #22
 801006a:	bf58      	it	pl
 801006c:	9901      	ldrpl	r1, [sp, #4]
 801006e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010072:	bf58      	it	pl
 8010074:	eba9 0101 	subpl.w	r1, r9, r1
 8010078:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801007c:	bf58      	it	pl
 801007e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010082:	6022      	str	r2, [r4, #0]
 8010084:	f04f 0900 	mov.w	r9, #0
 8010088:	e78a      	b.n	800ffa0 <_scanf_float+0x188>
 801008a:	f04f 0a03 	mov.w	sl, #3
 801008e:	e787      	b.n	800ffa0 <_scanf_float+0x188>
 8010090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010094:	4639      	mov	r1, r7
 8010096:	4640      	mov	r0, r8
 8010098:	4798      	blx	r3
 801009a:	2800      	cmp	r0, #0
 801009c:	f43f aedf 	beq.w	800fe5e <_scanf_float+0x46>
 80100a0:	e6ea      	b.n	800fe78 <_scanf_float+0x60>
 80100a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80100aa:	463a      	mov	r2, r7
 80100ac:	4640      	mov	r0, r8
 80100ae:	4798      	blx	r3
 80100b0:	6923      	ldr	r3, [r4, #16]
 80100b2:	3b01      	subs	r3, #1
 80100b4:	6123      	str	r3, [r4, #16]
 80100b6:	e6ec      	b.n	800fe92 <_scanf_float+0x7a>
 80100b8:	1e6b      	subs	r3, r5, #1
 80100ba:	2b06      	cmp	r3, #6
 80100bc:	d825      	bhi.n	801010a <_scanf_float+0x2f2>
 80100be:	2d02      	cmp	r5, #2
 80100c0:	d836      	bhi.n	8010130 <_scanf_float+0x318>
 80100c2:	455e      	cmp	r6, fp
 80100c4:	f67f aee8 	bls.w	800fe98 <_scanf_float+0x80>
 80100c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80100d0:	463a      	mov	r2, r7
 80100d2:	4640      	mov	r0, r8
 80100d4:	4798      	blx	r3
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	3b01      	subs	r3, #1
 80100da:	6123      	str	r3, [r4, #16]
 80100dc:	e7f1      	b.n	80100c2 <_scanf_float+0x2aa>
 80100de:	9802      	ldr	r0, [sp, #8]
 80100e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80100e8:	9002      	str	r0, [sp, #8]
 80100ea:	463a      	mov	r2, r7
 80100ec:	4640      	mov	r0, r8
 80100ee:	4798      	blx	r3
 80100f0:	6923      	ldr	r3, [r4, #16]
 80100f2:	3b01      	subs	r3, #1
 80100f4:	6123      	str	r3, [r4, #16]
 80100f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100fa:	fa5f fa8a 	uxtb.w	sl, sl
 80100fe:	f1ba 0f02 	cmp.w	sl, #2
 8010102:	d1ec      	bne.n	80100de <_scanf_float+0x2c6>
 8010104:	3d03      	subs	r5, #3
 8010106:	b2ed      	uxtb	r5, r5
 8010108:	1b76      	subs	r6, r6, r5
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	05da      	lsls	r2, r3, #23
 801010e:	d52f      	bpl.n	8010170 <_scanf_float+0x358>
 8010110:	055b      	lsls	r3, r3, #21
 8010112:	d510      	bpl.n	8010136 <_scanf_float+0x31e>
 8010114:	455e      	cmp	r6, fp
 8010116:	f67f aebf 	bls.w	800fe98 <_scanf_float+0x80>
 801011a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801011e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010122:	463a      	mov	r2, r7
 8010124:	4640      	mov	r0, r8
 8010126:	4798      	blx	r3
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	3b01      	subs	r3, #1
 801012c:	6123      	str	r3, [r4, #16]
 801012e:	e7f1      	b.n	8010114 <_scanf_float+0x2fc>
 8010130:	46aa      	mov	sl, r5
 8010132:	9602      	str	r6, [sp, #8]
 8010134:	e7df      	b.n	80100f6 <_scanf_float+0x2de>
 8010136:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801013a:	6923      	ldr	r3, [r4, #16]
 801013c:	2965      	cmp	r1, #101	; 0x65
 801013e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010142:	f106 35ff 	add.w	r5, r6, #4294967295
 8010146:	6123      	str	r3, [r4, #16]
 8010148:	d00c      	beq.n	8010164 <_scanf_float+0x34c>
 801014a:	2945      	cmp	r1, #69	; 0x45
 801014c:	d00a      	beq.n	8010164 <_scanf_float+0x34c>
 801014e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010152:	463a      	mov	r2, r7
 8010154:	4640      	mov	r0, r8
 8010156:	4798      	blx	r3
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801015e:	3b01      	subs	r3, #1
 8010160:	1eb5      	subs	r5, r6, #2
 8010162:	6123      	str	r3, [r4, #16]
 8010164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010168:	463a      	mov	r2, r7
 801016a:	4640      	mov	r0, r8
 801016c:	4798      	blx	r3
 801016e:	462e      	mov	r6, r5
 8010170:	6825      	ldr	r5, [r4, #0]
 8010172:	f015 0510 	ands.w	r5, r5, #16
 8010176:	d158      	bne.n	801022a <_scanf_float+0x412>
 8010178:	7035      	strb	r5, [r6, #0]
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010184:	d11c      	bne.n	80101c0 <_scanf_float+0x3a8>
 8010186:	9b01      	ldr	r3, [sp, #4]
 8010188:	454b      	cmp	r3, r9
 801018a:	eba3 0209 	sub.w	r2, r3, r9
 801018e:	d124      	bne.n	80101da <_scanf_float+0x3c2>
 8010190:	2200      	movs	r2, #0
 8010192:	4659      	mov	r1, fp
 8010194:	4640      	mov	r0, r8
 8010196:	f002 fc77 	bl	8012a88 <_strtod_r>
 801019a:	9b03      	ldr	r3, [sp, #12]
 801019c:	6821      	ldr	r1, [r4, #0]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f011 0f02 	tst.w	r1, #2
 80101a4:	ec57 6b10 	vmov	r6, r7, d0
 80101a8:	f103 0204 	add.w	r2, r3, #4
 80101ac:	d020      	beq.n	80101f0 <_scanf_float+0x3d8>
 80101ae:	9903      	ldr	r1, [sp, #12]
 80101b0:	600a      	str	r2, [r1, #0]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	e9c3 6700 	strd	r6, r7, [r3]
 80101b8:	68e3      	ldr	r3, [r4, #12]
 80101ba:	3301      	adds	r3, #1
 80101bc:	60e3      	str	r3, [r4, #12]
 80101be:	e66c      	b.n	800fe9a <_scanf_float+0x82>
 80101c0:	9b04      	ldr	r3, [sp, #16]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0e4      	beq.n	8010190 <_scanf_float+0x378>
 80101c6:	9905      	ldr	r1, [sp, #20]
 80101c8:	230a      	movs	r3, #10
 80101ca:	462a      	mov	r2, r5
 80101cc:	3101      	adds	r1, #1
 80101ce:	4640      	mov	r0, r8
 80101d0:	f002 fce2 	bl	8012b98 <_strtol_r>
 80101d4:	9b04      	ldr	r3, [sp, #16]
 80101d6:	9e05      	ldr	r6, [sp, #20]
 80101d8:	1ac2      	subs	r2, r0, r3
 80101da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80101de:	429e      	cmp	r6, r3
 80101e0:	bf28      	it	cs
 80101e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80101e6:	4912      	ldr	r1, [pc, #72]	; (8010230 <_scanf_float+0x418>)
 80101e8:	4630      	mov	r0, r6
 80101ea:	f000 f92d 	bl	8010448 <siprintf>
 80101ee:	e7cf      	b.n	8010190 <_scanf_float+0x378>
 80101f0:	f011 0f04 	tst.w	r1, #4
 80101f4:	9903      	ldr	r1, [sp, #12]
 80101f6:	600a      	str	r2, [r1, #0]
 80101f8:	d1db      	bne.n	80101b2 <_scanf_float+0x39a>
 80101fa:	f8d3 8000 	ldr.w	r8, [r3]
 80101fe:	ee10 2a10 	vmov	r2, s0
 8010202:	ee10 0a10 	vmov	r0, s0
 8010206:	463b      	mov	r3, r7
 8010208:	4639      	mov	r1, r7
 801020a:	f7f0 fc8f 	bl	8000b2c <__aeabi_dcmpun>
 801020e:	b128      	cbz	r0, 801021c <_scanf_float+0x404>
 8010210:	4808      	ldr	r0, [pc, #32]	; (8010234 <_scanf_float+0x41c>)
 8010212:	f000 f9fd 	bl	8010610 <nanf>
 8010216:	ed88 0a00 	vstr	s0, [r8]
 801021a:	e7cd      	b.n	80101b8 <_scanf_float+0x3a0>
 801021c:	4630      	mov	r0, r6
 801021e:	4639      	mov	r1, r7
 8010220:	f7f0 fce2 	bl	8000be8 <__aeabi_d2f>
 8010224:	f8c8 0000 	str.w	r0, [r8]
 8010228:	e7c6      	b.n	80101b8 <_scanf_float+0x3a0>
 801022a:	2500      	movs	r5, #0
 801022c:	e635      	b.n	800fe9a <_scanf_float+0x82>
 801022e:	bf00      	nop
 8010230:	080151e8 	.word	0x080151e8
 8010234:	0801557d 	.word	0x0801557d

08010238 <std>:
 8010238:	2300      	movs	r3, #0
 801023a:	b510      	push	{r4, lr}
 801023c:	4604      	mov	r4, r0
 801023e:	e9c0 3300 	strd	r3, r3, [r0]
 8010242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010246:	6083      	str	r3, [r0, #8]
 8010248:	8181      	strh	r1, [r0, #12]
 801024a:	6643      	str	r3, [r0, #100]	; 0x64
 801024c:	81c2      	strh	r2, [r0, #14]
 801024e:	6183      	str	r3, [r0, #24]
 8010250:	4619      	mov	r1, r3
 8010252:	2208      	movs	r2, #8
 8010254:	305c      	adds	r0, #92	; 0x5c
 8010256:	f000 f95a 	bl	801050e <memset>
 801025a:	4b0d      	ldr	r3, [pc, #52]	; (8010290 <std+0x58>)
 801025c:	6263      	str	r3, [r4, #36]	; 0x24
 801025e:	4b0d      	ldr	r3, [pc, #52]	; (8010294 <std+0x5c>)
 8010260:	62a3      	str	r3, [r4, #40]	; 0x28
 8010262:	4b0d      	ldr	r3, [pc, #52]	; (8010298 <std+0x60>)
 8010264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010266:	4b0d      	ldr	r3, [pc, #52]	; (801029c <std+0x64>)
 8010268:	6323      	str	r3, [r4, #48]	; 0x30
 801026a:	4b0d      	ldr	r3, [pc, #52]	; (80102a0 <std+0x68>)
 801026c:	6224      	str	r4, [r4, #32]
 801026e:	429c      	cmp	r4, r3
 8010270:	d006      	beq.n	8010280 <std+0x48>
 8010272:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010276:	4294      	cmp	r4, r2
 8010278:	d002      	beq.n	8010280 <std+0x48>
 801027a:	33d0      	adds	r3, #208	; 0xd0
 801027c:	429c      	cmp	r4, r3
 801027e:	d105      	bne.n	801028c <std+0x54>
 8010280:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010288:	f000 b9be 	b.w	8010608 <__retarget_lock_init_recursive>
 801028c:	bd10      	pop	{r4, pc}
 801028e:	bf00      	nop
 8010290:	08010489 	.word	0x08010489
 8010294:	080104ab 	.word	0x080104ab
 8010298:	080104e3 	.word	0x080104e3
 801029c:	08010507 	.word	0x08010507
 80102a0:	20000800 	.word	0x20000800

080102a4 <stdio_exit_handler>:
 80102a4:	4a02      	ldr	r2, [pc, #8]	; (80102b0 <stdio_exit_handler+0xc>)
 80102a6:	4903      	ldr	r1, [pc, #12]	; (80102b4 <stdio_exit_handler+0x10>)
 80102a8:	4803      	ldr	r0, [pc, #12]	; (80102b8 <stdio_exit_handler+0x14>)
 80102aa:	f000 b869 	b.w	8010380 <_fwalk_sglue>
 80102ae:	bf00      	nop
 80102b0:	2000019c 	.word	0x2000019c
 80102b4:	080131e1 	.word	0x080131e1
 80102b8:	200001a8 	.word	0x200001a8

080102bc <cleanup_stdio>:
 80102bc:	6841      	ldr	r1, [r0, #4]
 80102be:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <cleanup_stdio+0x34>)
 80102c0:	4299      	cmp	r1, r3
 80102c2:	b510      	push	{r4, lr}
 80102c4:	4604      	mov	r4, r0
 80102c6:	d001      	beq.n	80102cc <cleanup_stdio+0x10>
 80102c8:	f002 ff8a 	bl	80131e0 <_fflush_r>
 80102cc:	68a1      	ldr	r1, [r4, #8]
 80102ce:	4b09      	ldr	r3, [pc, #36]	; (80102f4 <cleanup_stdio+0x38>)
 80102d0:	4299      	cmp	r1, r3
 80102d2:	d002      	beq.n	80102da <cleanup_stdio+0x1e>
 80102d4:	4620      	mov	r0, r4
 80102d6:	f002 ff83 	bl	80131e0 <_fflush_r>
 80102da:	68e1      	ldr	r1, [r4, #12]
 80102dc:	4b06      	ldr	r3, [pc, #24]	; (80102f8 <cleanup_stdio+0x3c>)
 80102de:	4299      	cmp	r1, r3
 80102e0:	d004      	beq.n	80102ec <cleanup_stdio+0x30>
 80102e2:	4620      	mov	r0, r4
 80102e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102e8:	f002 bf7a 	b.w	80131e0 <_fflush_r>
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop
 80102f0:	20000800 	.word	0x20000800
 80102f4:	20000868 	.word	0x20000868
 80102f8:	200008d0 	.word	0x200008d0

080102fc <global_stdio_init.part.0>:
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4b0b      	ldr	r3, [pc, #44]	; (801032c <global_stdio_init.part.0+0x30>)
 8010300:	4c0b      	ldr	r4, [pc, #44]	; (8010330 <global_stdio_init.part.0+0x34>)
 8010302:	4a0c      	ldr	r2, [pc, #48]	; (8010334 <global_stdio_init.part.0+0x38>)
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	4620      	mov	r0, r4
 8010308:	2200      	movs	r2, #0
 801030a:	2104      	movs	r1, #4
 801030c:	f7ff ff94 	bl	8010238 <std>
 8010310:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010314:	2201      	movs	r2, #1
 8010316:	2109      	movs	r1, #9
 8010318:	f7ff ff8e 	bl	8010238 <std>
 801031c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010320:	2202      	movs	r2, #2
 8010322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010326:	2112      	movs	r1, #18
 8010328:	f7ff bf86 	b.w	8010238 <std>
 801032c:	20000938 	.word	0x20000938
 8010330:	20000800 	.word	0x20000800
 8010334:	080102a5 	.word	0x080102a5

08010338 <__sfp_lock_acquire>:
 8010338:	4801      	ldr	r0, [pc, #4]	; (8010340 <__sfp_lock_acquire+0x8>)
 801033a:	f000 b966 	b.w	801060a <__retarget_lock_acquire_recursive>
 801033e:	bf00      	nop
 8010340:	20000941 	.word	0x20000941

08010344 <__sfp_lock_release>:
 8010344:	4801      	ldr	r0, [pc, #4]	; (801034c <__sfp_lock_release+0x8>)
 8010346:	f000 b961 	b.w	801060c <__retarget_lock_release_recursive>
 801034a:	bf00      	nop
 801034c:	20000941 	.word	0x20000941

08010350 <__sinit>:
 8010350:	b510      	push	{r4, lr}
 8010352:	4604      	mov	r4, r0
 8010354:	f7ff fff0 	bl	8010338 <__sfp_lock_acquire>
 8010358:	6a23      	ldr	r3, [r4, #32]
 801035a:	b11b      	cbz	r3, 8010364 <__sinit+0x14>
 801035c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010360:	f7ff bff0 	b.w	8010344 <__sfp_lock_release>
 8010364:	4b04      	ldr	r3, [pc, #16]	; (8010378 <__sinit+0x28>)
 8010366:	6223      	str	r3, [r4, #32]
 8010368:	4b04      	ldr	r3, [pc, #16]	; (801037c <__sinit+0x2c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1f5      	bne.n	801035c <__sinit+0xc>
 8010370:	f7ff ffc4 	bl	80102fc <global_stdio_init.part.0>
 8010374:	e7f2      	b.n	801035c <__sinit+0xc>
 8010376:	bf00      	nop
 8010378:	080102bd 	.word	0x080102bd
 801037c:	20000938 	.word	0x20000938

08010380 <_fwalk_sglue>:
 8010380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010384:	4607      	mov	r7, r0
 8010386:	4688      	mov	r8, r1
 8010388:	4614      	mov	r4, r2
 801038a:	2600      	movs	r6, #0
 801038c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010390:	f1b9 0901 	subs.w	r9, r9, #1
 8010394:	d505      	bpl.n	80103a2 <_fwalk_sglue+0x22>
 8010396:	6824      	ldr	r4, [r4, #0]
 8010398:	2c00      	cmp	r4, #0
 801039a:	d1f7      	bne.n	801038c <_fwalk_sglue+0xc>
 801039c:	4630      	mov	r0, r6
 801039e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a2:	89ab      	ldrh	r3, [r5, #12]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d907      	bls.n	80103b8 <_fwalk_sglue+0x38>
 80103a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103ac:	3301      	adds	r3, #1
 80103ae:	d003      	beq.n	80103b8 <_fwalk_sglue+0x38>
 80103b0:	4629      	mov	r1, r5
 80103b2:	4638      	mov	r0, r7
 80103b4:	47c0      	blx	r8
 80103b6:	4306      	orrs	r6, r0
 80103b8:	3568      	adds	r5, #104	; 0x68
 80103ba:	e7e9      	b.n	8010390 <_fwalk_sglue+0x10>

080103bc <iprintf>:
 80103bc:	b40f      	push	{r0, r1, r2, r3}
 80103be:	b507      	push	{r0, r1, r2, lr}
 80103c0:	4906      	ldr	r1, [pc, #24]	; (80103dc <iprintf+0x20>)
 80103c2:	ab04      	add	r3, sp, #16
 80103c4:	6808      	ldr	r0, [r1, #0]
 80103c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80103ca:	6881      	ldr	r1, [r0, #8]
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	f002 fd67 	bl	8012ea0 <_vfiprintf_r>
 80103d2:	b003      	add	sp, #12
 80103d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80103d8:	b004      	add	sp, #16
 80103da:	4770      	bx	lr
 80103dc:	200001f4 	.word	0x200001f4

080103e0 <sniprintf>:
 80103e0:	b40c      	push	{r2, r3}
 80103e2:	b530      	push	{r4, r5, lr}
 80103e4:	4b17      	ldr	r3, [pc, #92]	; (8010444 <sniprintf+0x64>)
 80103e6:	1e0c      	subs	r4, r1, #0
 80103e8:	681d      	ldr	r5, [r3, #0]
 80103ea:	b09d      	sub	sp, #116	; 0x74
 80103ec:	da08      	bge.n	8010400 <sniprintf+0x20>
 80103ee:	238b      	movs	r3, #139	; 0x8b
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f04f 30ff 	mov.w	r0, #4294967295
 80103f6:	b01d      	add	sp, #116	; 0x74
 80103f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103fc:	b002      	add	sp, #8
 80103fe:	4770      	bx	lr
 8010400:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010404:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010408:	bf14      	ite	ne
 801040a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801040e:	4623      	moveq	r3, r4
 8010410:	9304      	str	r3, [sp, #16]
 8010412:	9307      	str	r3, [sp, #28]
 8010414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010418:	9002      	str	r0, [sp, #8]
 801041a:	9006      	str	r0, [sp, #24]
 801041c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010420:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010422:	ab21      	add	r3, sp, #132	; 0x84
 8010424:	a902      	add	r1, sp, #8
 8010426:	4628      	mov	r0, r5
 8010428:	9301      	str	r3, [sp, #4]
 801042a:	f002 fc11 	bl	8012c50 <_svfiprintf_r>
 801042e:	1c43      	adds	r3, r0, #1
 8010430:	bfbc      	itt	lt
 8010432:	238b      	movlt	r3, #139	; 0x8b
 8010434:	602b      	strlt	r3, [r5, #0]
 8010436:	2c00      	cmp	r4, #0
 8010438:	d0dd      	beq.n	80103f6 <sniprintf+0x16>
 801043a:	9b02      	ldr	r3, [sp, #8]
 801043c:	2200      	movs	r2, #0
 801043e:	701a      	strb	r2, [r3, #0]
 8010440:	e7d9      	b.n	80103f6 <sniprintf+0x16>
 8010442:	bf00      	nop
 8010444:	200001f4 	.word	0x200001f4

08010448 <siprintf>:
 8010448:	b40e      	push	{r1, r2, r3}
 801044a:	b500      	push	{lr}
 801044c:	b09c      	sub	sp, #112	; 0x70
 801044e:	ab1d      	add	r3, sp, #116	; 0x74
 8010450:	9002      	str	r0, [sp, #8]
 8010452:	9006      	str	r0, [sp, #24]
 8010454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010458:	4809      	ldr	r0, [pc, #36]	; (8010480 <siprintf+0x38>)
 801045a:	9107      	str	r1, [sp, #28]
 801045c:	9104      	str	r1, [sp, #16]
 801045e:	4909      	ldr	r1, [pc, #36]	; (8010484 <siprintf+0x3c>)
 8010460:	f853 2b04 	ldr.w	r2, [r3], #4
 8010464:	9105      	str	r1, [sp, #20]
 8010466:	6800      	ldr	r0, [r0, #0]
 8010468:	9301      	str	r3, [sp, #4]
 801046a:	a902      	add	r1, sp, #8
 801046c:	f002 fbf0 	bl	8012c50 <_svfiprintf_r>
 8010470:	9b02      	ldr	r3, [sp, #8]
 8010472:	2200      	movs	r2, #0
 8010474:	701a      	strb	r2, [r3, #0]
 8010476:	b01c      	add	sp, #112	; 0x70
 8010478:	f85d eb04 	ldr.w	lr, [sp], #4
 801047c:	b003      	add	sp, #12
 801047e:	4770      	bx	lr
 8010480:	200001f4 	.word	0x200001f4
 8010484:	ffff0208 	.word	0xffff0208

08010488 <__sread>:
 8010488:	b510      	push	{r4, lr}
 801048a:	460c      	mov	r4, r1
 801048c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010490:	f000 f86c 	bl	801056c <_read_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	bfab      	itete	ge
 8010498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801049a:	89a3      	ldrhlt	r3, [r4, #12]
 801049c:	181b      	addge	r3, r3, r0
 801049e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104a2:	bfac      	ite	ge
 80104a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80104a6:	81a3      	strhlt	r3, [r4, #12]
 80104a8:	bd10      	pop	{r4, pc}

080104aa <__swrite>:
 80104aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ae:	461f      	mov	r7, r3
 80104b0:	898b      	ldrh	r3, [r1, #12]
 80104b2:	05db      	lsls	r3, r3, #23
 80104b4:	4605      	mov	r5, r0
 80104b6:	460c      	mov	r4, r1
 80104b8:	4616      	mov	r6, r2
 80104ba:	d505      	bpl.n	80104c8 <__swrite+0x1e>
 80104bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104c0:	2302      	movs	r3, #2
 80104c2:	2200      	movs	r2, #0
 80104c4:	f000 f840 	bl	8010548 <_lseek_r>
 80104c8:	89a3      	ldrh	r3, [r4, #12]
 80104ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104d2:	81a3      	strh	r3, [r4, #12]
 80104d4:	4632      	mov	r2, r6
 80104d6:	463b      	mov	r3, r7
 80104d8:	4628      	mov	r0, r5
 80104da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104de:	f000 b857 	b.w	8010590 <_write_r>

080104e2 <__sseek>:
 80104e2:	b510      	push	{r4, lr}
 80104e4:	460c      	mov	r4, r1
 80104e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ea:	f000 f82d 	bl	8010548 <_lseek_r>
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	89a3      	ldrh	r3, [r4, #12]
 80104f2:	bf15      	itete	ne
 80104f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80104f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104fe:	81a3      	strheq	r3, [r4, #12]
 8010500:	bf18      	it	ne
 8010502:	81a3      	strhne	r3, [r4, #12]
 8010504:	bd10      	pop	{r4, pc}

08010506 <__sclose>:
 8010506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801050a:	f000 b80d 	b.w	8010528 <_close_r>

0801050e <memset>:
 801050e:	4402      	add	r2, r0
 8010510:	4603      	mov	r3, r0
 8010512:	4293      	cmp	r3, r2
 8010514:	d100      	bne.n	8010518 <memset+0xa>
 8010516:	4770      	bx	lr
 8010518:	f803 1b01 	strb.w	r1, [r3], #1
 801051c:	e7f9      	b.n	8010512 <memset+0x4>
	...

08010520 <_localeconv_r>:
 8010520:	4800      	ldr	r0, [pc, #0]	; (8010524 <_localeconv_r+0x4>)
 8010522:	4770      	bx	lr
 8010524:	200002e8 	.word	0x200002e8

08010528 <_close_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d06      	ldr	r5, [pc, #24]	; (8010544 <_close_r+0x1c>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	f7f2 fba9 	bl	8002c8a <_close>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_close_r+0x1a>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_close_r+0x1a>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	2000093c 	.word	0x2000093c

08010548 <_lseek_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d07      	ldr	r5, [pc, #28]	; (8010568 <_lseek_r+0x20>)
 801054c:	4604      	mov	r4, r0
 801054e:	4608      	mov	r0, r1
 8010550:	4611      	mov	r1, r2
 8010552:	2200      	movs	r2, #0
 8010554:	602a      	str	r2, [r5, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	f7f2 fbbe 	bl	8002cd8 <_lseek>
 801055c:	1c43      	adds	r3, r0, #1
 801055e:	d102      	bne.n	8010566 <_lseek_r+0x1e>
 8010560:	682b      	ldr	r3, [r5, #0]
 8010562:	b103      	cbz	r3, 8010566 <_lseek_r+0x1e>
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	bd38      	pop	{r3, r4, r5, pc}
 8010568:	2000093c 	.word	0x2000093c

0801056c <_read_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d07      	ldr	r5, [pc, #28]	; (801058c <_read_r+0x20>)
 8010570:	4604      	mov	r4, r0
 8010572:	4608      	mov	r0, r1
 8010574:	4611      	mov	r1, r2
 8010576:	2200      	movs	r2, #0
 8010578:	602a      	str	r2, [r5, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	f7f2 fb4c 	bl	8002c18 <_read>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_read_r+0x1e>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_read_r+0x1e>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	2000093c 	.word	0x2000093c

08010590 <_write_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	; (80105b0 <_write_r+0x20>)
 8010594:	4604      	mov	r4, r0
 8010596:	4608      	mov	r0, r1
 8010598:	4611      	mov	r1, r2
 801059a:	2200      	movs	r2, #0
 801059c:	602a      	str	r2, [r5, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f7f2 fb57 	bl	8002c52 <_write>
 80105a4:	1c43      	adds	r3, r0, #1
 80105a6:	d102      	bne.n	80105ae <_write_r+0x1e>
 80105a8:	682b      	ldr	r3, [r5, #0]
 80105aa:	b103      	cbz	r3, 80105ae <_write_r+0x1e>
 80105ac:	6023      	str	r3, [r4, #0]
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	2000093c 	.word	0x2000093c

080105b4 <__errno>:
 80105b4:	4b01      	ldr	r3, [pc, #4]	; (80105bc <__errno+0x8>)
 80105b6:	6818      	ldr	r0, [r3, #0]
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	200001f4 	.word	0x200001f4

080105c0 <__libc_init_array>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	4d0d      	ldr	r5, [pc, #52]	; (80105f8 <__libc_init_array+0x38>)
 80105c4:	4c0d      	ldr	r4, [pc, #52]	; (80105fc <__libc_init_array+0x3c>)
 80105c6:	1b64      	subs	r4, r4, r5
 80105c8:	10a4      	asrs	r4, r4, #2
 80105ca:	2600      	movs	r6, #0
 80105cc:	42a6      	cmp	r6, r4
 80105ce:	d109      	bne.n	80105e4 <__libc_init_array+0x24>
 80105d0:	4d0b      	ldr	r5, [pc, #44]	; (8010600 <__libc_init_array+0x40>)
 80105d2:	4c0c      	ldr	r4, [pc, #48]	; (8010604 <__libc_init_array+0x44>)
 80105d4:	f004 fb4c 	bl	8014c70 <_init>
 80105d8:	1b64      	subs	r4, r4, r5
 80105da:	10a4      	asrs	r4, r4, #2
 80105dc:	2600      	movs	r6, #0
 80105de:	42a6      	cmp	r6, r4
 80105e0:	d105      	bne.n	80105ee <__libc_init_array+0x2e>
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80105e8:	4798      	blx	r3
 80105ea:	3601      	adds	r6, #1
 80105ec:	e7ee      	b.n	80105cc <__libc_init_array+0xc>
 80105ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80105f2:	4798      	blx	r3
 80105f4:	3601      	adds	r6, #1
 80105f6:	e7f2      	b.n	80105de <__libc_init_array+0x1e>
 80105f8:	08015610 	.word	0x08015610
 80105fc:	08015610 	.word	0x08015610
 8010600:	08015610 	.word	0x08015610
 8010604:	08015614 	.word	0x08015614

08010608 <__retarget_lock_init_recursive>:
 8010608:	4770      	bx	lr

0801060a <__retarget_lock_acquire_recursive>:
 801060a:	4770      	bx	lr

0801060c <__retarget_lock_release_recursive>:
 801060c:	4770      	bx	lr
	...

08010610 <nanf>:
 8010610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010618 <nanf+0x8>
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	7fc00000 	.word	0x7fc00000

0801061c <quorem>:
 801061c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010620:	6903      	ldr	r3, [r0, #16]
 8010622:	690c      	ldr	r4, [r1, #16]
 8010624:	42a3      	cmp	r3, r4
 8010626:	4607      	mov	r7, r0
 8010628:	db7e      	blt.n	8010728 <quorem+0x10c>
 801062a:	3c01      	subs	r4, #1
 801062c:	f101 0814 	add.w	r8, r1, #20
 8010630:	f100 0514 	add.w	r5, r0, #20
 8010634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801063e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010642:	3301      	adds	r3, #1
 8010644:	429a      	cmp	r2, r3
 8010646:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801064a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801064e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010652:	d331      	bcc.n	80106b8 <quorem+0x9c>
 8010654:	f04f 0e00 	mov.w	lr, #0
 8010658:	4640      	mov	r0, r8
 801065a:	46ac      	mov	ip, r5
 801065c:	46f2      	mov	sl, lr
 801065e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010662:	b293      	uxth	r3, r2
 8010664:	fb06 e303 	mla	r3, r6, r3, lr
 8010668:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801066c:	0c1a      	lsrs	r2, r3, #16
 801066e:	b29b      	uxth	r3, r3
 8010670:	ebaa 0303 	sub.w	r3, sl, r3
 8010674:	f8dc a000 	ldr.w	sl, [ip]
 8010678:	fa13 f38a 	uxtah	r3, r3, sl
 801067c:	fb06 220e 	mla	r2, r6, lr, r2
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	9b00      	ldr	r3, [sp, #0]
 8010684:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010688:	b292      	uxth	r2, r2
 801068a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801068e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010692:	f8bd 3000 	ldrh.w	r3, [sp]
 8010696:	4581      	cmp	r9, r0
 8010698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801069c:	f84c 3b04 	str.w	r3, [ip], #4
 80106a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80106a4:	d2db      	bcs.n	801065e <quorem+0x42>
 80106a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80106aa:	b92b      	cbnz	r3, 80106b8 <quorem+0x9c>
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	3b04      	subs	r3, #4
 80106b0:	429d      	cmp	r5, r3
 80106b2:	461a      	mov	r2, r3
 80106b4:	d32c      	bcc.n	8010710 <quorem+0xf4>
 80106b6:	613c      	str	r4, [r7, #16]
 80106b8:	4638      	mov	r0, r7
 80106ba:	f001 f9f1 	bl	8011aa0 <__mcmp>
 80106be:	2800      	cmp	r0, #0
 80106c0:	db22      	blt.n	8010708 <quorem+0xec>
 80106c2:	3601      	adds	r6, #1
 80106c4:	4629      	mov	r1, r5
 80106c6:	2000      	movs	r0, #0
 80106c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80106cc:	f8d1 c000 	ldr.w	ip, [r1]
 80106d0:	b293      	uxth	r3, r2
 80106d2:	1ac3      	subs	r3, r0, r3
 80106d4:	0c12      	lsrs	r2, r2, #16
 80106d6:	fa13 f38c 	uxtah	r3, r3, ip
 80106da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80106de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106e8:	45c1      	cmp	r9, r8
 80106ea:	f841 3b04 	str.w	r3, [r1], #4
 80106ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106f2:	d2e9      	bcs.n	80106c8 <quorem+0xac>
 80106f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106fc:	b922      	cbnz	r2, 8010708 <quorem+0xec>
 80106fe:	3b04      	subs	r3, #4
 8010700:	429d      	cmp	r5, r3
 8010702:	461a      	mov	r2, r3
 8010704:	d30a      	bcc.n	801071c <quorem+0x100>
 8010706:	613c      	str	r4, [r7, #16]
 8010708:	4630      	mov	r0, r6
 801070a:	b003      	add	sp, #12
 801070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010710:	6812      	ldr	r2, [r2, #0]
 8010712:	3b04      	subs	r3, #4
 8010714:	2a00      	cmp	r2, #0
 8010716:	d1ce      	bne.n	80106b6 <quorem+0x9a>
 8010718:	3c01      	subs	r4, #1
 801071a:	e7c9      	b.n	80106b0 <quorem+0x94>
 801071c:	6812      	ldr	r2, [r2, #0]
 801071e:	3b04      	subs	r3, #4
 8010720:	2a00      	cmp	r2, #0
 8010722:	d1f0      	bne.n	8010706 <quorem+0xea>
 8010724:	3c01      	subs	r4, #1
 8010726:	e7eb      	b.n	8010700 <quorem+0xe4>
 8010728:	2000      	movs	r0, #0
 801072a:	e7ee      	b.n	801070a <quorem+0xee>
 801072c:	0000      	movs	r0, r0
	...

08010730 <_dtoa_r>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	ed2d 8b04 	vpush	{d8-d9}
 8010738:	69c5      	ldr	r5, [r0, #28]
 801073a:	b093      	sub	sp, #76	; 0x4c
 801073c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010740:	ec57 6b10 	vmov	r6, r7, d0
 8010744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010748:	9107      	str	r1, [sp, #28]
 801074a:	4604      	mov	r4, r0
 801074c:	920a      	str	r2, [sp, #40]	; 0x28
 801074e:	930d      	str	r3, [sp, #52]	; 0x34
 8010750:	b975      	cbnz	r5, 8010770 <_dtoa_r+0x40>
 8010752:	2010      	movs	r0, #16
 8010754:	f000 fe2a 	bl	80113ac <malloc>
 8010758:	4602      	mov	r2, r0
 801075a:	61e0      	str	r0, [r4, #28]
 801075c:	b920      	cbnz	r0, 8010768 <_dtoa_r+0x38>
 801075e:	4bae      	ldr	r3, [pc, #696]	; (8010a18 <_dtoa_r+0x2e8>)
 8010760:	21ef      	movs	r1, #239	; 0xef
 8010762:	48ae      	ldr	r0, [pc, #696]	; (8010a1c <_dtoa_r+0x2ec>)
 8010764:	f002 fe4c 	bl	8013400 <__assert_func>
 8010768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801076c:	6005      	str	r5, [r0, #0]
 801076e:	60c5      	str	r5, [r0, #12]
 8010770:	69e3      	ldr	r3, [r4, #28]
 8010772:	6819      	ldr	r1, [r3, #0]
 8010774:	b151      	cbz	r1, 801078c <_dtoa_r+0x5c>
 8010776:	685a      	ldr	r2, [r3, #4]
 8010778:	604a      	str	r2, [r1, #4]
 801077a:	2301      	movs	r3, #1
 801077c:	4093      	lsls	r3, r2
 801077e:	608b      	str	r3, [r1, #8]
 8010780:	4620      	mov	r0, r4
 8010782:	f000 ff07 	bl	8011594 <_Bfree>
 8010786:	69e3      	ldr	r3, [r4, #28]
 8010788:	2200      	movs	r2, #0
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	1e3b      	subs	r3, r7, #0
 801078e:	bfbb      	ittet	lt
 8010790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010794:	9303      	strlt	r3, [sp, #12]
 8010796:	2300      	movge	r3, #0
 8010798:	2201      	movlt	r2, #1
 801079a:	bfac      	ite	ge
 801079c:	f8c8 3000 	strge.w	r3, [r8]
 80107a0:	f8c8 2000 	strlt.w	r2, [r8]
 80107a4:	4b9e      	ldr	r3, [pc, #632]	; (8010a20 <_dtoa_r+0x2f0>)
 80107a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80107aa:	ea33 0308 	bics.w	r3, r3, r8
 80107ae:	d11b      	bne.n	80107e8 <_dtoa_r+0xb8>
 80107b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80107b6:	6013      	str	r3, [r2, #0]
 80107b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80107bc:	4333      	orrs	r3, r6
 80107be:	f000 8593 	beq.w	80112e8 <_dtoa_r+0xbb8>
 80107c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107c4:	b963      	cbnz	r3, 80107e0 <_dtoa_r+0xb0>
 80107c6:	4b97      	ldr	r3, [pc, #604]	; (8010a24 <_dtoa_r+0x2f4>)
 80107c8:	e027      	b.n	801081a <_dtoa_r+0xea>
 80107ca:	4b97      	ldr	r3, [pc, #604]	; (8010a28 <_dtoa_r+0x2f8>)
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	3308      	adds	r3, #8
 80107d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	9800      	ldr	r0, [sp, #0]
 80107d6:	b013      	add	sp, #76	; 0x4c
 80107d8:	ecbd 8b04 	vpop	{d8-d9}
 80107dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e0:	4b90      	ldr	r3, [pc, #576]	; (8010a24 <_dtoa_r+0x2f4>)
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	3303      	adds	r3, #3
 80107e6:	e7f3      	b.n	80107d0 <_dtoa_r+0xa0>
 80107e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107ec:	2200      	movs	r2, #0
 80107ee:	ec51 0b17 	vmov	r0, r1, d7
 80107f2:	eeb0 8a47 	vmov.f32	s16, s14
 80107f6:	eef0 8a67 	vmov.f32	s17, s15
 80107fa:	2300      	movs	r3, #0
 80107fc:	f7f0 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 8010800:	4681      	mov	r9, r0
 8010802:	b160      	cbz	r0, 801081e <_dtoa_r+0xee>
 8010804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010806:	2301      	movs	r3, #1
 8010808:	6013      	str	r3, [r2, #0]
 801080a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801080c:	2b00      	cmp	r3, #0
 801080e:	f000 8568 	beq.w	80112e2 <_dtoa_r+0xbb2>
 8010812:	4b86      	ldr	r3, [pc, #536]	; (8010a2c <_dtoa_r+0x2fc>)
 8010814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	3b01      	subs	r3, #1
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	e7da      	b.n	80107d4 <_dtoa_r+0xa4>
 801081e:	aa10      	add	r2, sp, #64	; 0x40
 8010820:	a911      	add	r1, sp, #68	; 0x44
 8010822:	4620      	mov	r0, r4
 8010824:	eeb0 0a48 	vmov.f32	s0, s16
 8010828:	eef0 0a68 	vmov.f32	s1, s17
 801082c:	f001 fa4e 	bl	8011ccc <__d2b>
 8010830:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010834:	4682      	mov	sl, r0
 8010836:	2d00      	cmp	r5, #0
 8010838:	d07f      	beq.n	801093a <_dtoa_r+0x20a>
 801083a:	ee18 3a90 	vmov	r3, s17
 801083e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010842:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010846:	ec51 0b18 	vmov	r0, r1, d8
 801084a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801084e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010852:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010856:	4619      	mov	r1, r3
 8010858:	2200      	movs	r2, #0
 801085a:	4b75      	ldr	r3, [pc, #468]	; (8010a30 <_dtoa_r+0x300>)
 801085c:	f7ef fd14 	bl	8000288 <__aeabi_dsub>
 8010860:	a367      	add	r3, pc, #412	; (adr r3, 8010a00 <_dtoa_r+0x2d0>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7ef fec7 	bl	80005f8 <__aeabi_dmul>
 801086a:	a367      	add	r3, pc, #412	; (adr r3, 8010a08 <_dtoa_r+0x2d8>)
 801086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010870:	f7ef fd0c 	bl	800028c <__adddf3>
 8010874:	4606      	mov	r6, r0
 8010876:	4628      	mov	r0, r5
 8010878:	460f      	mov	r7, r1
 801087a:	f7ef fe53 	bl	8000524 <__aeabi_i2d>
 801087e:	a364      	add	r3, pc, #400	; (adr r3, 8010a10 <_dtoa_r+0x2e0>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	f7ef feb8 	bl	80005f8 <__aeabi_dmul>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	4630      	mov	r0, r6
 801088e:	4639      	mov	r1, r7
 8010890:	f7ef fcfc 	bl	800028c <__adddf3>
 8010894:	4606      	mov	r6, r0
 8010896:	460f      	mov	r7, r1
 8010898:	f7f0 f95e 	bl	8000b58 <__aeabi_d2iz>
 801089c:	2200      	movs	r2, #0
 801089e:	4683      	mov	fp, r0
 80108a0:	2300      	movs	r3, #0
 80108a2:	4630      	mov	r0, r6
 80108a4:	4639      	mov	r1, r7
 80108a6:	f7f0 f919 	bl	8000adc <__aeabi_dcmplt>
 80108aa:	b148      	cbz	r0, 80108c0 <_dtoa_r+0x190>
 80108ac:	4658      	mov	r0, fp
 80108ae:	f7ef fe39 	bl	8000524 <__aeabi_i2d>
 80108b2:	4632      	mov	r2, r6
 80108b4:	463b      	mov	r3, r7
 80108b6:	f7f0 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80108ba:	b908      	cbnz	r0, 80108c0 <_dtoa_r+0x190>
 80108bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108c0:	f1bb 0f16 	cmp.w	fp, #22
 80108c4:	d857      	bhi.n	8010976 <_dtoa_r+0x246>
 80108c6:	4b5b      	ldr	r3, [pc, #364]	; (8010a34 <_dtoa_r+0x304>)
 80108c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80108cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d0:	ec51 0b18 	vmov	r0, r1, d8
 80108d4:	f7f0 f902 	bl	8000adc <__aeabi_dcmplt>
 80108d8:	2800      	cmp	r0, #0
 80108da:	d04e      	beq.n	801097a <_dtoa_r+0x24a>
 80108dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108e0:	2300      	movs	r3, #0
 80108e2:	930c      	str	r3, [sp, #48]	; 0x30
 80108e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108e6:	1b5b      	subs	r3, r3, r5
 80108e8:	1e5a      	subs	r2, r3, #1
 80108ea:	bf45      	ittet	mi
 80108ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80108f0:	9305      	strmi	r3, [sp, #20]
 80108f2:	2300      	movpl	r3, #0
 80108f4:	2300      	movmi	r3, #0
 80108f6:	9206      	str	r2, [sp, #24]
 80108f8:	bf54      	ite	pl
 80108fa:	9305      	strpl	r3, [sp, #20]
 80108fc:	9306      	strmi	r3, [sp, #24]
 80108fe:	f1bb 0f00 	cmp.w	fp, #0
 8010902:	db3c      	blt.n	801097e <_dtoa_r+0x24e>
 8010904:	9b06      	ldr	r3, [sp, #24]
 8010906:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801090a:	445b      	add	r3, fp
 801090c:	9306      	str	r3, [sp, #24]
 801090e:	2300      	movs	r3, #0
 8010910:	9308      	str	r3, [sp, #32]
 8010912:	9b07      	ldr	r3, [sp, #28]
 8010914:	2b09      	cmp	r3, #9
 8010916:	d868      	bhi.n	80109ea <_dtoa_r+0x2ba>
 8010918:	2b05      	cmp	r3, #5
 801091a:	bfc4      	itt	gt
 801091c:	3b04      	subgt	r3, #4
 801091e:	9307      	strgt	r3, [sp, #28]
 8010920:	9b07      	ldr	r3, [sp, #28]
 8010922:	f1a3 0302 	sub.w	r3, r3, #2
 8010926:	bfcc      	ite	gt
 8010928:	2500      	movgt	r5, #0
 801092a:	2501      	movle	r5, #1
 801092c:	2b03      	cmp	r3, #3
 801092e:	f200 8085 	bhi.w	8010a3c <_dtoa_r+0x30c>
 8010932:	e8df f003 	tbb	[pc, r3]
 8010936:	3b2e      	.short	0x3b2e
 8010938:	5839      	.short	0x5839
 801093a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801093e:	441d      	add	r5, r3
 8010940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010944:	2b20      	cmp	r3, #32
 8010946:	bfc1      	itttt	gt
 8010948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801094c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010950:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010954:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010958:	bfd6      	itet	le
 801095a:	f1c3 0320 	rsble	r3, r3, #32
 801095e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010962:	fa06 f003 	lslle.w	r0, r6, r3
 8010966:	f7ef fdcd 	bl	8000504 <__aeabi_ui2d>
 801096a:	2201      	movs	r2, #1
 801096c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010970:	3d01      	subs	r5, #1
 8010972:	920e      	str	r2, [sp, #56]	; 0x38
 8010974:	e76f      	b.n	8010856 <_dtoa_r+0x126>
 8010976:	2301      	movs	r3, #1
 8010978:	e7b3      	b.n	80108e2 <_dtoa_r+0x1b2>
 801097a:	900c      	str	r0, [sp, #48]	; 0x30
 801097c:	e7b2      	b.n	80108e4 <_dtoa_r+0x1b4>
 801097e:	9b05      	ldr	r3, [sp, #20]
 8010980:	eba3 030b 	sub.w	r3, r3, fp
 8010984:	9305      	str	r3, [sp, #20]
 8010986:	f1cb 0300 	rsb	r3, fp, #0
 801098a:	9308      	str	r3, [sp, #32]
 801098c:	2300      	movs	r3, #0
 801098e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010990:	e7bf      	b.n	8010912 <_dtoa_r+0x1e2>
 8010992:	2300      	movs	r3, #0
 8010994:	9309      	str	r3, [sp, #36]	; 0x24
 8010996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010998:	2b00      	cmp	r3, #0
 801099a:	dc52      	bgt.n	8010a42 <_dtoa_r+0x312>
 801099c:	2301      	movs	r3, #1
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	9304      	str	r3, [sp, #16]
 80109a2:	461a      	mov	r2, r3
 80109a4:	920a      	str	r2, [sp, #40]	; 0x28
 80109a6:	e00b      	b.n	80109c0 <_dtoa_r+0x290>
 80109a8:	2301      	movs	r3, #1
 80109aa:	e7f3      	b.n	8010994 <_dtoa_r+0x264>
 80109ac:	2300      	movs	r3, #0
 80109ae:	9309      	str	r3, [sp, #36]	; 0x24
 80109b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109b2:	445b      	add	r3, fp
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	3301      	adds	r3, #1
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	9304      	str	r3, [sp, #16]
 80109bc:	bfb8      	it	lt
 80109be:	2301      	movlt	r3, #1
 80109c0:	69e0      	ldr	r0, [r4, #28]
 80109c2:	2100      	movs	r1, #0
 80109c4:	2204      	movs	r2, #4
 80109c6:	f102 0614 	add.w	r6, r2, #20
 80109ca:	429e      	cmp	r6, r3
 80109cc:	d93d      	bls.n	8010a4a <_dtoa_r+0x31a>
 80109ce:	6041      	str	r1, [r0, #4]
 80109d0:	4620      	mov	r0, r4
 80109d2:	f000 fd9f 	bl	8011514 <_Balloc>
 80109d6:	9000      	str	r0, [sp, #0]
 80109d8:	2800      	cmp	r0, #0
 80109da:	d139      	bne.n	8010a50 <_dtoa_r+0x320>
 80109dc:	4b16      	ldr	r3, [pc, #88]	; (8010a38 <_dtoa_r+0x308>)
 80109de:	4602      	mov	r2, r0
 80109e0:	f240 11af 	movw	r1, #431	; 0x1af
 80109e4:	e6bd      	b.n	8010762 <_dtoa_r+0x32>
 80109e6:	2301      	movs	r3, #1
 80109e8:	e7e1      	b.n	80109ae <_dtoa_r+0x27e>
 80109ea:	2501      	movs	r5, #1
 80109ec:	2300      	movs	r3, #0
 80109ee:	9307      	str	r3, [sp, #28]
 80109f0:	9509      	str	r5, [sp, #36]	; 0x24
 80109f2:	f04f 33ff 	mov.w	r3, #4294967295
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	2200      	movs	r2, #0
 80109fc:	2312      	movs	r3, #18
 80109fe:	e7d1      	b.n	80109a4 <_dtoa_r+0x274>
 8010a00:	636f4361 	.word	0x636f4361
 8010a04:	3fd287a7 	.word	0x3fd287a7
 8010a08:	8b60c8b3 	.word	0x8b60c8b3
 8010a0c:	3fc68a28 	.word	0x3fc68a28
 8010a10:	509f79fb 	.word	0x509f79fb
 8010a14:	3fd34413 	.word	0x3fd34413
 8010a18:	080151fa 	.word	0x080151fa
 8010a1c:	08015211 	.word	0x08015211
 8010a20:	7ff00000 	.word	0x7ff00000
 8010a24:	080151f6 	.word	0x080151f6
 8010a28:	080151ed 	.word	0x080151ed
 8010a2c:	080151c5 	.word	0x080151c5
 8010a30:	3ff80000 	.word	0x3ff80000
 8010a34:	08015300 	.word	0x08015300
 8010a38:	08015269 	.word	0x08015269
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a40:	e7d7      	b.n	80109f2 <_dtoa_r+0x2c2>
 8010a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a44:	9301      	str	r3, [sp, #4]
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	e7ba      	b.n	80109c0 <_dtoa_r+0x290>
 8010a4a:	3101      	adds	r1, #1
 8010a4c:	0052      	lsls	r2, r2, #1
 8010a4e:	e7ba      	b.n	80109c6 <_dtoa_r+0x296>
 8010a50:	69e3      	ldr	r3, [r4, #28]
 8010a52:	9a00      	ldr	r2, [sp, #0]
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	9b04      	ldr	r3, [sp, #16]
 8010a58:	2b0e      	cmp	r3, #14
 8010a5a:	f200 80a8 	bhi.w	8010bae <_dtoa_r+0x47e>
 8010a5e:	2d00      	cmp	r5, #0
 8010a60:	f000 80a5 	beq.w	8010bae <_dtoa_r+0x47e>
 8010a64:	f1bb 0f00 	cmp.w	fp, #0
 8010a68:	dd38      	ble.n	8010adc <_dtoa_r+0x3ac>
 8010a6a:	4bc0      	ldr	r3, [pc, #768]	; (8010d6c <_dtoa_r+0x63c>)
 8010a6c:	f00b 020f 	and.w	r2, fp, #15
 8010a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010a7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010a80:	d019      	beq.n	8010ab6 <_dtoa_r+0x386>
 8010a82:	4bbb      	ldr	r3, [pc, #748]	; (8010d70 <_dtoa_r+0x640>)
 8010a84:	ec51 0b18 	vmov	r0, r1, d8
 8010a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a8c:	f7ef fede 	bl	800084c <__aeabi_ddiv>
 8010a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a94:	f008 080f 	and.w	r8, r8, #15
 8010a98:	2503      	movs	r5, #3
 8010a9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010d70 <_dtoa_r+0x640>
 8010a9e:	f1b8 0f00 	cmp.w	r8, #0
 8010aa2:	d10a      	bne.n	8010aba <_dtoa_r+0x38a>
 8010aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	463b      	mov	r3, r7
 8010aac:	f7ef fece 	bl	800084c <__aeabi_ddiv>
 8010ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ab4:	e02b      	b.n	8010b0e <_dtoa_r+0x3de>
 8010ab6:	2502      	movs	r5, #2
 8010ab8:	e7ef      	b.n	8010a9a <_dtoa_r+0x36a>
 8010aba:	f018 0f01 	tst.w	r8, #1
 8010abe:	d008      	beq.n	8010ad2 <_dtoa_r+0x3a2>
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010ac8:	f7ef fd96 	bl	80005f8 <__aeabi_dmul>
 8010acc:	3501      	adds	r5, #1
 8010ace:	4606      	mov	r6, r0
 8010ad0:	460f      	mov	r7, r1
 8010ad2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010ad6:	f109 0908 	add.w	r9, r9, #8
 8010ada:	e7e0      	b.n	8010a9e <_dtoa_r+0x36e>
 8010adc:	f000 809f 	beq.w	8010c1e <_dtoa_r+0x4ee>
 8010ae0:	f1cb 0600 	rsb	r6, fp, #0
 8010ae4:	4ba1      	ldr	r3, [pc, #644]	; (8010d6c <_dtoa_r+0x63c>)
 8010ae6:	4fa2      	ldr	r7, [pc, #648]	; (8010d70 <_dtoa_r+0x640>)
 8010ae8:	f006 020f 	and.w	r2, r6, #15
 8010aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af4:	ec51 0b18 	vmov	r0, r1, d8
 8010af8:	f7ef fd7e 	bl	80005f8 <__aeabi_dmul>
 8010afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b00:	1136      	asrs	r6, r6, #4
 8010b02:	2300      	movs	r3, #0
 8010b04:	2502      	movs	r5, #2
 8010b06:	2e00      	cmp	r6, #0
 8010b08:	d17e      	bne.n	8010c08 <_dtoa_r+0x4d8>
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d1d0      	bne.n	8010ab0 <_dtoa_r+0x380>
 8010b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 8084 	beq.w	8010c22 <_dtoa_r+0x4f2>
 8010b1a:	4b96      	ldr	r3, [pc, #600]	; (8010d74 <_dtoa_r+0x644>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	4640      	mov	r0, r8
 8010b20:	4649      	mov	r1, r9
 8010b22:	f7ef ffdb 	bl	8000adc <__aeabi_dcmplt>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d07b      	beq.n	8010c22 <_dtoa_r+0x4f2>
 8010b2a:	9b04      	ldr	r3, [sp, #16]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d078      	beq.n	8010c22 <_dtoa_r+0x4f2>
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	dd39      	ble.n	8010baa <_dtoa_r+0x47a>
 8010b36:	4b90      	ldr	r3, [pc, #576]	; (8010d78 <_dtoa_r+0x648>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	4640      	mov	r0, r8
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	f7ef fd5b 	bl	80005f8 <__aeabi_dmul>
 8010b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b46:	9e01      	ldr	r6, [sp, #4]
 8010b48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b4c:	3501      	adds	r5, #1
 8010b4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b52:	4628      	mov	r0, r5
 8010b54:	f7ef fce6 	bl	8000524 <__aeabi_i2d>
 8010b58:	4642      	mov	r2, r8
 8010b5a:	464b      	mov	r3, r9
 8010b5c:	f7ef fd4c 	bl	80005f8 <__aeabi_dmul>
 8010b60:	4b86      	ldr	r3, [pc, #536]	; (8010d7c <_dtoa_r+0x64c>)
 8010b62:	2200      	movs	r2, #0
 8010b64:	f7ef fb92 	bl	800028c <__adddf3>
 8010b68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b70:	9303      	str	r3, [sp, #12]
 8010b72:	2e00      	cmp	r6, #0
 8010b74:	d158      	bne.n	8010c28 <_dtoa_r+0x4f8>
 8010b76:	4b82      	ldr	r3, [pc, #520]	; (8010d80 <_dtoa_r+0x650>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	4640      	mov	r0, r8
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	f7ef fb83 	bl	8000288 <__aeabi_dsub>
 8010b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b86:	4680      	mov	r8, r0
 8010b88:	4689      	mov	r9, r1
 8010b8a:	f7ef ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f040 8296 	bne.w	80110c0 <_dtoa_r+0x990>
 8010b94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b98:	4640      	mov	r0, r8
 8010b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b9e:	4649      	mov	r1, r9
 8010ba0:	f7ef ff9c 	bl	8000adc <__aeabi_dcmplt>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f040 8289 	bne.w	80110bc <_dtoa_r+0x98c>
 8010baa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f2c0 814e 	blt.w	8010e52 <_dtoa_r+0x722>
 8010bb6:	f1bb 0f0e 	cmp.w	fp, #14
 8010bba:	f300 814a 	bgt.w	8010e52 <_dtoa_r+0x722>
 8010bbe:	4b6b      	ldr	r3, [pc, #428]	; (8010d6c <_dtoa_r+0x63c>)
 8010bc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f280 80dc 	bge.w	8010d88 <_dtoa_r+0x658>
 8010bd0:	9b04      	ldr	r3, [sp, #16]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f300 80d8 	bgt.w	8010d88 <_dtoa_r+0x658>
 8010bd8:	f040 826f 	bne.w	80110ba <_dtoa_r+0x98a>
 8010bdc:	4b68      	ldr	r3, [pc, #416]	; (8010d80 <_dtoa_r+0x650>)
 8010bde:	2200      	movs	r2, #0
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	f7ef fd08 	bl	80005f8 <__aeabi_dmul>
 8010be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bec:	f7ef ff8a 	bl	8000b04 <__aeabi_dcmpge>
 8010bf0:	9e04      	ldr	r6, [sp, #16]
 8010bf2:	4637      	mov	r7, r6
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	f040 8245 	bne.w	8011084 <_dtoa_r+0x954>
 8010bfa:	9d00      	ldr	r5, [sp, #0]
 8010bfc:	2331      	movs	r3, #49	; 0x31
 8010bfe:	f805 3b01 	strb.w	r3, [r5], #1
 8010c02:	f10b 0b01 	add.w	fp, fp, #1
 8010c06:	e241      	b.n	801108c <_dtoa_r+0x95c>
 8010c08:	07f2      	lsls	r2, r6, #31
 8010c0a:	d505      	bpl.n	8010c18 <_dtoa_r+0x4e8>
 8010c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	3501      	adds	r5, #1
 8010c16:	2301      	movs	r3, #1
 8010c18:	1076      	asrs	r6, r6, #1
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	e773      	b.n	8010b06 <_dtoa_r+0x3d6>
 8010c1e:	2502      	movs	r5, #2
 8010c20:	e775      	b.n	8010b0e <_dtoa_r+0x3de>
 8010c22:	9e04      	ldr	r6, [sp, #16]
 8010c24:	465f      	mov	r7, fp
 8010c26:	e792      	b.n	8010b4e <_dtoa_r+0x41e>
 8010c28:	9900      	ldr	r1, [sp, #0]
 8010c2a:	4b50      	ldr	r3, [pc, #320]	; (8010d6c <_dtoa_r+0x63c>)
 8010c2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c30:	4431      	add	r1, r6
 8010c32:	9102      	str	r1, [sp, #8]
 8010c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c36:	eeb0 9a47 	vmov.f32	s18, s14
 8010c3a:	eef0 9a67 	vmov.f32	s19, s15
 8010c3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c46:	2900      	cmp	r1, #0
 8010c48:	d044      	beq.n	8010cd4 <_dtoa_r+0x5a4>
 8010c4a:	494e      	ldr	r1, [pc, #312]	; (8010d84 <_dtoa_r+0x654>)
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f7ef fdfd 	bl	800084c <__aeabi_ddiv>
 8010c52:	ec53 2b19 	vmov	r2, r3, d9
 8010c56:	f7ef fb17 	bl	8000288 <__aeabi_dsub>
 8010c5a:	9d00      	ldr	r5, [sp, #0]
 8010c5c:	ec41 0b19 	vmov	d9, r0, r1
 8010c60:	4649      	mov	r1, r9
 8010c62:	4640      	mov	r0, r8
 8010c64:	f7ef ff78 	bl	8000b58 <__aeabi_d2iz>
 8010c68:	4606      	mov	r6, r0
 8010c6a:	f7ef fc5b 	bl	8000524 <__aeabi_i2d>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	460b      	mov	r3, r1
 8010c72:	4640      	mov	r0, r8
 8010c74:	4649      	mov	r1, r9
 8010c76:	f7ef fb07 	bl	8000288 <__aeabi_dsub>
 8010c7a:	3630      	adds	r6, #48	; 0x30
 8010c7c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c80:	ec53 2b19 	vmov	r2, r3, d9
 8010c84:	4680      	mov	r8, r0
 8010c86:	4689      	mov	r9, r1
 8010c88:	f7ef ff28 	bl	8000adc <__aeabi_dcmplt>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d164      	bne.n	8010d5a <_dtoa_r+0x62a>
 8010c90:	4642      	mov	r2, r8
 8010c92:	464b      	mov	r3, r9
 8010c94:	4937      	ldr	r1, [pc, #220]	; (8010d74 <_dtoa_r+0x644>)
 8010c96:	2000      	movs	r0, #0
 8010c98:	f7ef faf6 	bl	8000288 <__aeabi_dsub>
 8010c9c:	ec53 2b19 	vmov	r2, r3, d9
 8010ca0:	f7ef ff1c 	bl	8000adc <__aeabi_dcmplt>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	f040 80b6 	bne.w	8010e16 <_dtoa_r+0x6e6>
 8010caa:	9b02      	ldr	r3, [sp, #8]
 8010cac:	429d      	cmp	r5, r3
 8010cae:	f43f af7c 	beq.w	8010baa <_dtoa_r+0x47a>
 8010cb2:	4b31      	ldr	r3, [pc, #196]	; (8010d78 <_dtoa_r+0x648>)
 8010cb4:	ec51 0b19 	vmov	r0, r1, d9
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f7ef fc9d 	bl	80005f8 <__aeabi_dmul>
 8010cbe:	4b2e      	ldr	r3, [pc, #184]	; (8010d78 <_dtoa_r+0x648>)
 8010cc0:	ec41 0b19 	vmov	d9, r0, r1
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	4649      	mov	r1, r9
 8010cca:	f7ef fc95 	bl	80005f8 <__aeabi_dmul>
 8010cce:	4680      	mov	r8, r0
 8010cd0:	4689      	mov	r9, r1
 8010cd2:	e7c5      	b.n	8010c60 <_dtoa_r+0x530>
 8010cd4:	ec51 0b17 	vmov	r0, r1, d7
 8010cd8:	f7ef fc8e 	bl	80005f8 <__aeabi_dmul>
 8010cdc:	9b02      	ldr	r3, [sp, #8]
 8010cde:	9d00      	ldr	r5, [sp, #0]
 8010ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ce2:	ec41 0b19 	vmov	d9, r0, r1
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	4640      	mov	r0, r8
 8010cea:	f7ef ff35 	bl	8000b58 <__aeabi_d2iz>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	f7ef fc18 	bl	8000524 <__aeabi_i2d>
 8010cf4:	3630      	adds	r6, #48	; 0x30
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	4640      	mov	r0, r8
 8010cfc:	4649      	mov	r1, r9
 8010cfe:	f7ef fac3 	bl	8000288 <__aeabi_dsub>
 8010d02:	f805 6b01 	strb.w	r6, [r5], #1
 8010d06:	9b02      	ldr	r3, [sp, #8]
 8010d08:	429d      	cmp	r5, r3
 8010d0a:	4680      	mov	r8, r0
 8010d0c:	4689      	mov	r9, r1
 8010d0e:	f04f 0200 	mov.w	r2, #0
 8010d12:	d124      	bne.n	8010d5e <_dtoa_r+0x62e>
 8010d14:	4b1b      	ldr	r3, [pc, #108]	; (8010d84 <_dtoa_r+0x654>)
 8010d16:	ec51 0b19 	vmov	r0, r1, d9
 8010d1a:	f7ef fab7 	bl	800028c <__adddf3>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	460b      	mov	r3, r1
 8010d22:	4640      	mov	r0, r8
 8010d24:	4649      	mov	r1, r9
 8010d26:	f7ef fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d173      	bne.n	8010e16 <_dtoa_r+0x6e6>
 8010d2e:	ec53 2b19 	vmov	r2, r3, d9
 8010d32:	4914      	ldr	r1, [pc, #80]	; (8010d84 <_dtoa_r+0x654>)
 8010d34:	2000      	movs	r0, #0
 8010d36:	f7ef faa7 	bl	8000288 <__aeabi_dsub>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4640      	mov	r0, r8
 8010d40:	4649      	mov	r1, r9
 8010d42:	f7ef fecb 	bl	8000adc <__aeabi_dcmplt>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f43f af2f 	beq.w	8010baa <_dtoa_r+0x47a>
 8010d4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d4e:	1e6b      	subs	r3, r5, #1
 8010d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d56:	2b30      	cmp	r3, #48	; 0x30
 8010d58:	d0f8      	beq.n	8010d4c <_dtoa_r+0x61c>
 8010d5a:	46bb      	mov	fp, r7
 8010d5c:	e04a      	b.n	8010df4 <_dtoa_r+0x6c4>
 8010d5e:	4b06      	ldr	r3, [pc, #24]	; (8010d78 <_dtoa_r+0x648>)
 8010d60:	f7ef fc4a 	bl	80005f8 <__aeabi_dmul>
 8010d64:	4680      	mov	r8, r0
 8010d66:	4689      	mov	r9, r1
 8010d68:	e7bd      	b.n	8010ce6 <_dtoa_r+0x5b6>
 8010d6a:	bf00      	nop
 8010d6c:	08015300 	.word	0x08015300
 8010d70:	080152d8 	.word	0x080152d8
 8010d74:	3ff00000 	.word	0x3ff00000
 8010d78:	40240000 	.word	0x40240000
 8010d7c:	401c0000 	.word	0x401c0000
 8010d80:	40140000 	.word	0x40140000
 8010d84:	3fe00000 	.word	0x3fe00000
 8010d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d8c:	9d00      	ldr	r5, [sp, #0]
 8010d8e:	4642      	mov	r2, r8
 8010d90:	464b      	mov	r3, r9
 8010d92:	4630      	mov	r0, r6
 8010d94:	4639      	mov	r1, r7
 8010d96:	f7ef fd59 	bl	800084c <__aeabi_ddiv>
 8010d9a:	f7ef fedd 	bl	8000b58 <__aeabi_d2iz>
 8010d9e:	9001      	str	r0, [sp, #4]
 8010da0:	f7ef fbc0 	bl	8000524 <__aeabi_i2d>
 8010da4:	4642      	mov	r2, r8
 8010da6:	464b      	mov	r3, r9
 8010da8:	f7ef fc26 	bl	80005f8 <__aeabi_dmul>
 8010dac:	4602      	mov	r2, r0
 8010dae:	460b      	mov	r3, r1
 8010db0:	4630      	mov	r0, r6
 8010db2:	4639      	mov	r1, r7
 8010db4:	f7ef fa68 	bl	8000288 <__aeabi_dsub>
 8010db8:	9e01      	ldr	r6, [sp, #4]
 8010dba:	9f04      	ldr	r7, [sp, #16]
 8010dbc:	3630      	adds	r6, #48	; 0x30
 8010dbe:	f805 6b01 	strb.w	r6, [r5], #1
 8010dc2:	9e00      	ldr	r6, [sp, #0]
 8010dc4:	1bae      	subs	r6, r5, r6
 8010dc6:	42b7      	cmp	r7, r6
 8010dc8:	4602      	mov	r2, r0
 8010dca:	460b      	mov	r3, r1
 8010dcc:	d134      	bne.n	8010e38 <_dtoa_r+0x708>
 8010dce:	f7ef fa5d 	bl	800028c <__adddf3>
 8010dd2:	4642      	mov	r2, r8
 8010dd4:	464b      	mov	r3, r9
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	460f      	mov	r7, r1
 8010dda:	f7ef fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 8010dde:	b9c8      	cbnz	r0, 8010e14 <_dtoa_r+0x6e4>
 8010de0:	4642      	mov	r2, r8
 8010de2:	464b      	mov	r3, r9
 8010de4:	4630      	mov	r0, r6
 8010de6:	4639      	mov	r1, r7
 8010de8:	f7ef fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dec:	b110      	cbz	r0, 8010df4 <_dtoa_r+0x6c4>
 8010dee:	9b01      	ldr	r3, [sp, #4]
 8010df0:	07db      	lsls	r3, r3, #31
 8010df2:	d40f      	bmi.n	8010e14 <_dtoa_r+0x6e4>
 8010df4:	4651      	mov	r1, sl
 8010df6:	4620      	mov	r0, r4
 8010df8:	f000 fbcc 	bl	8011594 <_Bfree>
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e00:	702b      	strb	r3, [r5, #0]
 8010e02:	f10b 0301 	add.w	r3, fp, #1
 8010e06:	6013      	str	r3, [r2, #0]
 8010e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f43f ace2 	beq.w	80107d4 <_dtoa_r+0xa4>
 8010e10:	601d      	str	r5, [r3, #0]
 8010e12:	e4df      	b.n	80107d4 <_dtoa_r+0xa4>
 8010e14:	465f      	mov	r7, fp
 8010e16:	462b      	mov	r3, r5
 8010e18:	461d      	mov	r5, r3
 8010e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e1e:	2a39      	cmp	r2, #57	; 0x39
 8010e20:	d106      	bne.n	8010e30 <_dtoa_r+0x700>
 8010e22:	9a00      	ldr	r2, [sp, #0]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d1f7      	bne.n	8010e18 <_dtoa_r+0x6e8>
 8010e28:	9900      	ldr	r1, [sp, #0]
 8010e2a:	2230      	movs	r2, #48	; 0x30
 8010e2c:	3701      	adds	r7, #1
 8010e2e:	700a      	strb	r2, [r1, #0]
 8010e30:	781a      	ldrb	r2, [r3, #0]
 8010e32:	3201      	adds	r2, #1
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	e790      	b.n	8010d5a <_dtoa_r+0x62a>
 8010e38:	4ba3      	ldr	r3, [pc, #652]	; (80110c8 <_dtoa_r+0x998>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f7ef fbdc 	bl	80005f8 <__aeabi_dmul>
 8010e40:	2200      	movs	r2, #0
 8010e42:	2300      	movs	r3, #0
 8010e44:	4606      	mov	r6, r0
 8010e46:	460f      	mov	r7, r1
 8010e48:	f7ef fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d09e      	beq.n	8010d8e <_dtoa_r+0x65e>
 8010e50:	e7d0      	b.n	8010df4 <_dtoa_r+0x6c4>
 8010e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	f000 80ca 	beq.w	8010fee <_dtoa_r+0x8be>
 8010e5a:	9a07      	ldr	r2, [sp, #28]
 8010e5c:	2a01      	cmp	r2, #1
 8010e5e:	f300 80ad 	bgt.w	8010fbc <_dtoa_r+0x88c>
 8010e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	f000 80a5 	beq.w	8010fb4 <_dtoa_r+0x884>
 8010e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e6e:	9e08      	ldr	r6, [sp, #32]
 8010e70:	9d05      	ldr	r5, [sp, #20]
 8010e72:	9a05      	ldr	r2, [sp, #20]
 8010e74:	441a      	add	r2, r3
 8010e76:	9205      	str	r2, [sp, #20]
 8010e78:	9a06      	ldr	r2, [sp, #24]
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	441a      	add	r2, r3
 8010e7e:	4620      	mov	r0, r4
 8010e80:	9206      	str	r2, [sp, #24]
 8010e82:	f000 fc87 	bl	8011794 <__i2b>
 8010e86:	4607      	mov	r7, r0
 8010e88:	b165      	cbz	r5, 8010ea4 <_dtoa_r+0x774>
 8010e8a:	9b06      	ldr	r3, [sp, #24]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dd09      	ble.n	8010ea4 <_dtoa_r+0x774>
 8010e90:	42ab      	cmp	r3, r5
 8010e92:	9a05      	ldr	r2, [sp, #20]
 8010e94:	bfa8      	it	ge
 8010e96:	462b      	movge	r3, r5
 8010e98:	1ad2      	subs	r2, r2, r3
 8010e9a:	9205      	str	r2, [sp, #20]
 8010e9c:	9a06      	ldr	r2, [sp, #24]
 8010e9e:	1aed      	subs	r5, r5, r3
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	9306      	str	r3, [sp, #24]
 8010ea4:	9b08      	ldr	r3, [sp, #32]
 8010ea6:	b1f3      	cbz	r3, 8010ee6 <_dtoa_r+0x7b6>
 8010ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 80a3 	beq.w	8010ff6 <_dtoa_r+0x8c6>
 8010eb0:	2e00      	cmp	r6, #0
 8010eb2:	dd10      	ble.n	8010ed6 <_dtoa_r+0x7a6>
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	4632      	mov	r2, r6
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 fd2b 	bl	8011914 <__pow5mult>
 8010ebe:	4652      	mov	r2, sl
 8010ec0:	4601      	mov	r1, r0
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f000 fc7b 	bl	80117c0 <__multiply>
 8010eca:	4651      	mov	r1, sl
 8010ecc:	4680      	mov	r8, r0
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 fb60 	bl	8011594 <_Bfree>
 8010ed4:	46c2      	mov	sl, r8
 8010ed6:	9b08      	ldr	r3, [sp, #32]
 8010ed8:	1b9a      	subs	r2, r3, r6
 8010eda:	d004      	beq.n	8010ee6 <_dtoa_r+0x7b6>
 8010edc:	4651      	mov	r1, sl
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 fd18 	bl	8011914 <__pow5mult>
 8010ee4:	4682      	mov	sl, r0
 8010ee6:	2101      	movs	r1, #1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fc53 	bl	8011794 <__i2b>
 8010eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	f340 8081 	ble.w	8010ffa <_dtoa_r+0x8ca>
 8010ef8:	461a      	mov	r2, r3
 8010efa:	4601      	mov	r1, r0
 8010efc:	4620      	mov	r0, r4
 8010efe:	f000 fd09 	bl	8011914 <__pow5mult>
 8010f02:	9b07      	ldr	r3, [sp, #28]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	4606      	mov	r6, r0
 8010f08:	dd7a      	ble.n	8011000 <_dtoa_r+0x8d0>
 8010f0a:	f04f 0800 	mov.w	r8, #0
 8010f0e:	6933      	ldr	r3, [r6, #16]
 8010f10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f14:	6918      	ldr	r0, [r3, #16]
 8010f16:	f000 fbef 	bl	80116f8 <__hi0bits>
 8010f1a:	f1c0 0020 	rsb	r0, r0, #32
 8010f1e:	9b06      	ldr	r3, [sp, #24]
 8010f20:	4418      	add	r0, r3
 8010f22:	f010 001f 	ands.w	r0, r0, #31
 8010f26:	f000 8094 	beq.w	8011052 <_dtoa_r+0x922>
 8010f2a:	f1c0 0320 	rsb	r3, r0, #32
 8010f2e:	2b04      	cmp	r3, #4
 8010f30:	f340 8085 	ble.w	801103e <_dtoa_r+0x90e>
 8010f34:	9b05      	ldr	r3, [sp, #20]
 8010f36:	f1c0 001c 	rsb	r0, r0, #28
 8010f3a:	4403      	add	r3, r0
 8010f3c:	9305      	str	r3, [sp, #20]
 8010f3e:	9b06      	ldr	r3, [sp, #24]
 8010f40:	4403      	add	r3, r0
 8010f42:	4405      	add	r5, r0
 8010f44:	9306      	str	r3, [sp, #24]
 8010f46:	9b05      	ldr	r3, [sp, #20]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dd05      	ble.n	8010f58 <_dtoa_r+0x828>
 8010f4c:	4651      	mov	r1, sl
 8010f4e:	461a      	mov	r2, r3
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 fd39 	bl	80119c8 <__lshift>
 8010f56:	4682      	mov	sl, r0
 8010f58:	9b06      	ldr	r3, [sp, #24]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	dd05      	ble.n	8010f6a <_dtoa_r+0x83a>
 8010f5e:	4631      	mov	r1, r6
 8010f60:	461a      	mov	r2, r3
 8010f62:	4620      	mov	r0, r4
 8010f64:	f000 fd30 	bl	80119c8 <__lshift>
 8010f68:	4606      	mov	r6, r0
 8010f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d072      	beq.n	8011056 <_dtoa_r+0x926>
 8010f70:	4631      	mov	r1, r6
 8010f72:	4650      	mov	r0, sl
 8010f74:	f000 fd94 	bl	8011aa0 <__mcmp>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	da6c      	bge.n	8011056 <_dtoa_r+0x926>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4651      	mov	r1, sl
 8010f80:	220a      	movs	r2, #10
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 fb28 	bl	80115d8 <__multadd>
 8010f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f8e:	4682      	mov	sl, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 81b0 	beq.w	80112f6 <_dtoa_r+0xbc6>
 8010f96:	2300      	movs	r3, #0
 8010f98:	4639      	mov	r1, r7
 8010f9a:	220a      	movs	r2, #10
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f000 fb1b 	bl	80115d8 <__multadd>
 8010fa2:	9b01      	ldr	r3, [sp, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	4607      	mov	r7, r0
 8010fa8:	f300 8096 	bgt.w	80110d8 <_dtoa_r+0x9a8>
 8010fac:	9b07      	ldr	r3, [sp, #28]
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	dc59      	bgt.n	8011066 <_dtoa_r+0x936>
 8010fb2:	e091      	b.n	80110d8 <_dtoa_r+0x9a8>
 8010fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010fba:	e758      	b.n	8010e6e <_dtoa_r+0x73e>
 8010fbc:	9b04      	ldr	r3, [sp, #16]
 8010fbe:	1e5e      	subs	r6, r3, #1
 8010fc0:	9b08      	ldr	r3, [sp, #32]
 8010fc2:	42b3      	cmp	r3, r6
 8010fc4:	bfbf      	itttt	lt
 8010fc6:	9b08      	ldrlt	r3, [sp, #32]
 8010fc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010fca:	9608      	strlt	r6, [sp, #32]
 8010fcc:	1af3      	sublt	r3, r6, r3
 8010fce:	bfb4      	ite	lt
 8010fd0:	18d2      	addlt	r2, r2, r3
 8010fd2:	1b9e      	subge	r6, r3, r6
 8010fd4:	9b04      	ldr	r3, [sp, #16]
 8010fd6:	bfbc      	itt	lt
 8010fd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010fda:	2600      	movlt	r6, #0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	bfb7      	itett	lt
 8010fe0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010fe4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010fe8:	1a9d      	sublt	r5, r3, r2
 8010fea:	2300      	movlt	r3, #0
 8010fec:	e741      	b.n	8010e72 <_dtoa_r+0x742>
 8010fee:	9e08      	ldr	r6, [sp, #32]
 8010ff0:	9d05      	ldr	r5, [sp, #20]
 8010ff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010ff4:	e748      	b.n	8010e88 <_dtoa_r+0x758>
 8010ff6:	9a08      	ldr	r2, [sp, #32]
 8010ff8:	e770      	b.n	8010edc <_dtoa_r+0x7ac>
 8010ffa:	9b07      	ldr	r3, [sp, #28]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	dc19      	bgt.n	8011034 <_dtoa_r+0x904>
 8011000:	9b02      	ldr	r3, [sp, #8]
 8011002:	b9bb      	cbnz	r3, 8011034 <_dtoa_r+0x904>
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801100a:	b99b      	cbnz	r3, 8011034 <_dtoa_r+0x904>
 801100c:	9b03      	ldr	r3, [sp, #12]
 801100e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011012:	0d1b      	lsrs	r3, r3, #20
 8011014:	051b      	lsls	r3, r3, #20
 8011016:	b183      	cbz	r3, 801103a <_dtoa_r+0x90a>
 8011018:	9b05      	ldr	r3, [sp, #20]
 801101a:	3301      	adds	r3, #1
 801101c:	9305      	str	r3, [sp, #20]
 801101e:	9b06      	ldr	r3, [sp, #24]
 8011020:	3301      	adds	r3, #1
 8011022:	9306      	str	r3, [sp, #24]
 8011024:	f04f 0801 	mov.w	r8, #1
 8011028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801102a:	2b00      	cmp	r3, #0
 801102c:	f47f af6f 	bne.w	8010f0e <_dtoa_r+0x7de>
 8011030:	2001      	movs	r0, #1
 8011032:	e774      	b.n	8010f1e <_dtoa_r+0x7ee>
 8011034:	f04f 0800 	mov.w	r8, #0
 8011038:	e7f6      	b.n	8011028 <_dtoa_r+0x8f8>
 801103a:	4698      	mov	r8, r3
 801103c:	e7f4      	b.n	8011028 <_dtoa_r+0x8f8>
 801103e:	d082      	beq.n	8010f46 <_dtoa_r+0x816>
 8011040:	9a05      	ldr	r2, [sp, #20]
 8011042:	331c      	adds	r3, #28
 8011044:	441a      	add	r2, r3
 8011046:	9205      	str	r2, [sp, #20]
 8011048:	9a06      	ldr	r2, [sp, #24]
 801104a:	441a      	add	r2, r3
 801104c:	441d      	add	r5, r3
 801104e:	9206      	str	r2, [sp, #24]
 8011050:	e779      	b.n	8010f46 <_dtoa_r+0x816>
 8011052:	4603      	mov	r3, r0
 8011054:	e7f4      	b.n	8011040 <_dtoa_r+0x910>
 8011056:	9b04      	ldr	r3, [sp, #16]
 8011058:	2b00      	cmp	r3, #0
 801105a:	dc37      	bgt.n	80110cc <_dtoa_r+0x99c>
 801105c:	9b07      	ldr	r3, [sp, #28]
 801105e:	2b02      	cmp	r3, #2
 8011060:	dd34      	ble.n	80110cc <_dtoa_r+0x99c>
 8011062:	9b04      	ldr	r3, [sp, #16]
 8011064:	9301      	str	r3, [sp, #4]
 8011066:	9b01      	ldr	r3, [sp, #4]
 8011068:	b963      	cbnz	r3, 8011084 <_dtoa_r+0x954>
 801106a:	4631      	mov	r1, r6
 801106c:	2205      	movs	r2, #5
 801106e:	4620      	mov	r0, r4
 8011070:	f000 fab2 	bl	80115d8 <__multadd>
 8011074:	4601      	mov	r1, r0
 8011076:	4606      	mov	r6, r0
 8011078:	4650      	mov	r0, sl
 801107a:	f000 fd11 	bl	8011aa0 <__mcmp>
 801107e:	2800      	cmp	r0, #0
 8011080:	f73f adbb 	bgt.w	8010bfa <_dtoa_r+0x4ca>
 8011084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011086:	9d00      	ldr	r5, [sp, #0]
 8011088:	ea6f 0b03 	mvn.w	fp, r3
 801108c:	f04f 0800 	mov.w	r8, #0
 8011090:	4631      	mov	r1, r6
 8011092:	4620      	mov	r0, r4
 8011094:	f000 fa7e 	bl	8011594 <_Bfree>
 8011098:	2f00      	cmp	r7, #0
 801109a:	f43f aeab 	beq.w	8010df4 <_dtoa_r+0x6c4>
 801109e:	f1b8 0f00 	cmp.w	r8, #0
 80110a2:	d005      	beq.n	80110b0 <_dtoa_r+0x980>
 80110a4:	45b8      	cmp	r8, r7
 80110a6:	d003      	beq.n	80110b0 <_dtoa_r+0x980>
 80110a8:	4641      	mov	r1, r8
 80110aa:	4620      	mov	r0, r4
 80110ac:	f000 fa72 	bl	8011594 <_Bfree>
 80110b0:	4639      	mov	r1, r7
 80110b2:	4620      	mov	r0, r4
 80110b4:	f000 fa6e 	bl	8011594 <_Bfree>
 80110b8:	e69c      	b.n	8010df4 <_dtoa_r+0x6c4>
 80110ba:	2600      	movs	r6, #0
 80110bc:	4637      	mov	r7, r6
 80110be:	e7e1      	b.n	8011084 <_dtoa_r+0x954>
 80110c0:	46bb      	mov	fp, r7
 80110c2:	4637      	mov	r7, r6
 80110c4:	e599      	b.n	8010bfa <_dtoa_r+0x4ca>
 80110c6:	bf00      	nop
 80110c8:	40240000 	.word	0x40240000
 80110cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 80c8 	beq.w	8011264 <_dtoa_r+0xb34>
 80110d4:	9b04      	ldr	r3, [sp, #16]
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	2d00      	cmp	r5, #0
 80110da:	dd05      	ble.n	80110e8 <_dtoa_r+0x9b8>
 80110dc:	4639      	mov	r1, r7
 80110de:	462a      	mov	r2, r5
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 fc71 	bl	80119c8 <__lshift>
 80110e6:	4607      	mov	r7, r0
 80110e8:	f1b8 0f00 	cmp.w	r8, #0
 80110ec:	d05b      	beq.n	80111a6 <_dtoa_r+0xa76>
 80110ee:	6879      	ldr	r1, [r7, #4]
 80110f0:	4620      	mov	r0, r4
 80110f2:	f000 fa0f 	bl	8011514 <_Balloc>
 80110f6:	4605      	mov	r5, r0
 80110f8:	b928      	cbnz	r0, 8011106 <_dtoa_r+0x9d6>
 80110fa:	4b83      	ldr	r3, [pc, #524]	; (8011308 <_dtoa_r+0xbd8>)
 80110fc:	4602      	mov	r2, r0
 80110fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011102:	f7ff bb2e 	b.w	8010762 <_dtoa_r+0x32>
 8011106:	693a      	ldr	r2, [r7, #16]
 8011108:	3202      	adds	r2, #2
 801110a:	0092      	lsls	r2, r2, #2
 801110c:	f107 010c 	add.w	r1, r7, #12
 8011110:	300c      	adds	r0, #12
 8011112:	f002 f95f 	bl	80133d4 <memcpy>
 8011116:	2201      	movs	r2, #1
 8011118:	4629      	mov	r1, r5
 801111a:	4620      	mov	r0, r4
 801111c:	f000 fc54 	bl	80119c8 <__lshift>
 8011120:	9b00      	ldr	r3, [sp, #0]
 8011122:	3301      	adds	r3, #1
 8011124:	9304      	str	r3, [sp, #16]
 8011126:	e9dd 2300 	ldrd	r2, r3, [sp]
 801112a:	4413      	add	r3, r2
 801112c:	9308      	str	r3, [sp, #32]
 801112e:	9b02      	ldr	r3, [sp, #8]
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	46b8      	mov	r8, r7
 8011136:	9306      	str	r3, [sp, #24]
 8011138:	4607      	mov	r7, r0
 801113a:	9b04      	ldr	r3, [sp, #16]
 801113c:	4631      	mov	r1, r6
 801113e:	3b01      	subs	r3, #1
 8011140:	4650      	mov	r0, sl
 8011142:	9301      	str	r3, [sp, #4]
 8011144:	f7ff fa6a 	bl	801061c <quorem>
 8011148:	4641      	mov	r1, r8
 801114a:	9002      	str	r0, [sp, #8]
 801114c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011150:	4650      	mov	r0, sl
 8011152:	f000 fca5 	bl	8011aa0 <__mcmp>
 8011156:	463a      	mov	r2, r7
 8011158:	9005      	str	r0, [sp, #20]
 801115a:	4631      	mov	r1, r6
 801115c:	4620      	mov	r0, r4
 801115e:	f000 fcbb 	bl	8011ad8 <__mdiff>
 8011162:	68c2      	ldr	r2, [r0, #12]
 8011164:	4605      	mov	r5, r0
 8011166:	bb02      	cbnz	r2, 80111aa <_dtoa_r+0xa7a>
 8011168:	4601      	mov	r1, r0
 801116a:	4650      	mov	r0, sl
 801116c:	f000 fc98 	bl	8011aa0 <__mcmp>
 8011170:	4602      	mov	r2, r0
 8011172:	4629      	mov	r1, r5
 8011174:	4620      	mov	r0, r4
 8011176:	9209      	str	r2, [sp, #36]	; 0x24
 8011178:	f000 fa0c 	bl	8011594 <_Bfree>
 801117c:	9b07      	ldr	r3, [sp, #28]
 801117e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011180:	9d04      	ldr	r5, [sp, #16]
 8011182:	ea43 0102 	orr.w	r1, r3, r2
 8011186:	9b06      	ldr	r3, [sp, #24]
 8011188:	4319      	orrs	r1, r3
 801118a:	d110      	bne.n	80111ae <_dtoa_r+0xa7e>
 801118c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011190:	d029      	beq.n	80111e6 <_dtoa_r+0xab6>
 8011192:	9b05      	ldr	r3, [sp, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	dd02      	ble.n	801119e <_dtoa_r+0xa6e>
 8011198:	9b02      	ldr	r3, [sp, #8]
 801119a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801119e:	9b01      	ldr	r3, [sp, #4]
 80111a0:	f883 9000 	strb.w	r9, [r3]
 80111a4:	e774      	b.n	8011090 <_dtoa_r+0x960>
 80111a6:	4638      	mov	r0, r7
 80111a8:	e7ba      	b.n	8011120 <_dtoa_r+0x9f0>
 80111aa:	2201      	movs	r2, #1
 80111ac:	e7e1      	b.n	8011172 <_dtoa_r+0xa42>
 80111ae:	9b05      	ldr	r3, [sp, #20]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	db04      	blt.n	80111be <_dtoa_r+0xa8e>
 80111b4:	9907      	ldr	r1, [sp, #28]
 80111b6:	430b      	orrs	r3, r1
 80111b8:	9906      	ldr	r1, [sp, #24]
 80111ba:	430b      	orrs	r3, r1
 80111bc:	d120      	bne.n	8011200 <_dtoa_r+0xad0>
 80111be:	2a00      	cmp	r2, #0
 80111c0:	dded      	ble.n	801119e <_dtoa_r+0xa6e>
 80111c2:	4651      	mov	r1, sl
 80111c4:	2201      	movs	r2, #1
 80111c6:	4620      	mov	r0, r4
 80111c8:	f000 fbfe 	bl	80119c8 <__lshift>
 80111cc:	4631      	mov	r1, r6
 80111ce:	4682      	mov	sl, r0
 80111d0:	f000 fc66 	bl	8011aa0 <__mcmp>
 80111d4:	2800      	cmp	r0, #0
 80111d6:	dc03      	bgt.n	80111e0 <_dtoa_r+0xab0>
 80111d8:	d1e1      	bne.n	801119e <_dtoa_r+0xa6e>
 80111da:	f019 0f01 	tst.w	r9, #1
 80111de:	d0de      	beq.n	801119e <_dtoa_r+0xa6e>
 80111e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80111e4:	d1d8      	bne.n	8011198 <_dtoa_r+0xa68>
 80111e6:	9a01      	ldr	r2, [sp, #4]
 80111e8:	2339      	movs	r3, #57	; 0x39
 80111ea:	7013      	strb	r3, [r2, #0]
 80111ec:	462b      	mov	r3, r5
 80111ee:	461d      	mov	r5, r3
 80111f0:	3b01      	subs	r3, #1
 80111f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111f6:	2a39      	cmp	r2, #57	; 0x39
 80111f8:	d06c      	beq.n	80112d4 <_dtoa_r+0xba4>
 80111fa:	3201      	adds	r2, #1
 80111fc:	701a      	strb	r2, [r3, #0]
 80111fe:	e747      	b.n	8011090 <_dtoa_r+0x960>
 8011200:	2a00      	cmp	r2, #0
 8011202:	dd07      	ble.n	8011214 <_dtoa_r+0xae4>
 8011204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011208:	d0ed      	beq.n	80111e6 <_dtoa_r+0xab6>
 801120a:	9a01      	ldr	r2, [sp, #4]
 801120c:	f109 0301 	add.w	r3, r9, #1
 8011210:	7013      	strb	r3, [r2, #0]
 8011212:	e73d      	b.n	8011090 <_dtoa_r+0x960>
 8011214:	9b04      	ldr	r3, [sp, #16]
 8011216:	9a08      	ldr	r2, [sp, #32]
 8011218:	f803 9c01 	strb.w	r9, [r3, #-1]
 801121c:	4293      	cmp	r3, r2
 801121e:	d043      	beq.n	80112a8 <_dtoa_r+0xb78>
 8011220:	4651      	mov	r1, sl
 8011222:	2300      	movs	r3, #0
 8011224:	220a      	movs	r2, #10
 8011226:	4620      	mov	r0, r4
 8011228:	f000 f9d6 	bl	80115d8 <__multadd>
 801122c:	45b8      	cmp	r8, r7
 801122e:	4682      	mov	sl, r0
 8011230:	f04f 0300 	mov.w	r3, #0
 8011234:	f04f 020a 	mov.w	r2, #10
 8011238:	4641      	mov	r1, r8
 801123a:	4620      	mov	r0, r4
 801123c:	d107      	bne.n	801124e <_dtoa_r+0xb1e>
 801123e:	f000 f9cb 	bl	80115d8 <__multadd>
 8011242:	4680      	mov	r8, r0
 8011244:	4607      	mov	r7, r0
 8011246:	9b04      	ldr	r3, [sp, #16]
 8011248:	3301      	adds	r3, #1
 801124a:	9304      	str	r3, [sp, #16]
 801124c:	e775      	b.n	801113a <_dtoa_r+0xa0a>
 801124e:	f000 f9c3 	bl	80115d8 <__multadd>
 8011252:	4639      	mov	r1, r7
 8011254:	4680      	mov	r8, r0
 8011256:	2300      	movs	r3, #0
 8011258:	220a      	movs	r2, #10
 801125a:	4620      	mov	r0, r4
 801125c:	f000 f9bc 	bl	80115d8 <__multadd>
 8011260:	4607      	mov	r7, r0
 8011262:	e7f0      	b.n	8011246 <_dtoa_r+0xb16>
 8011264:	9b04      	ldr	r3, [sp, #16]
 8011266:	9301      	str	r3, [sp, #4]
 8011268:	9d00      	ldr	r5, [sp, #0]
 801126a:	4631      	mov	r1, r6
 801126c:	4650      	mov	r0, sl
 801126e:	f7ff f9d5 	bl	801061c <quorem>
 8011272:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	f805 9b01 	strb.w	r9, [r5], #1
 801127c:	1aea      	subs	r2, r5, r3
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	4293      	cmp	r3, r2
 8011282:	dd07      	ble.n	8011294 <_dtoa_r+0xb64>
 8011284:	4651      	mov	r1, sl
 8011286:	2300      	movs	r3, #0
 8011288:	220a      	movs	r2, #10
 801128a:	4620      	mov	r0, r4
 801128c:	f000 f9a4 	bl	80115d8 <__multadd>
 8011290:	4682      	mov	sl, r0
 8011292:	e7ea      	b.n	801126a <_dtoa_r+0xb3a>
 8011294:	9b01      	ldr	r3, [sp, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	bfc8      	it	gt
 801129a:	461d      	movgt	r5, r3
 801129c:	9b00      	ldr	r3, [sp, #0]
 801129e:	bfd8      	it	le
 80112a0:	2501      	movle	r5, #1
 80112a2:	441d      	add	r5, r3
 80112a4:	f04f 0800 	mov.w	r8, #0
 80112a8:	4651      	mov	r1, sl
 80112aa:	2201      	movs	r2, #1
 80112ac:	4620      	mov	r0, r4
 80112ae:	f000 fb8b 	bl	80119c8 <__lshift>
 80112b2:	4631      	mov	r1, r6
 80112b4:	4682      	mov	sl, r0
 80112b6:	f000 fbf3 	bl	8011aa0 <__mcmp>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	dc96      	bgt.n	80111ec <_dtoa_r+0xabc>
 80112be:	d102      	bne.n	80112c6 <_dtoa_r+0xb96>
 80112c0:	f019 0f01 	tst.w	r9, #1
 80112c4:	d192      	bne.n	80111ec <_dtoa_r+0xabc>
 80112c6:	462b      	mov	r3, r5
 80112c8:	461d      	mov	r5, r3
 80112ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112ce:	2a30      	cmp	r2, #48	; 0x30
 80112d0:	d0fa      	beq.n	80112c8 <_dtoa_r+0xb98>
 80112d2:	e6dd      	b.n	8011090 <_dtoa_r+0x960>
 80112d4:	9a00      	ldr	r2, [sp, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d189      	bne.n	80111ee <_dtoa_r+0xabe>
 80112da:	f10b 0b01 	add.w	fp, fp, #1
 80112de:	2331      	movs	r3, #49	; 0x31
 80112e0:	e796      	b.n	8011210 <_dtoa_r+0xae0>
 80112e2:	4b0a      	ldr	r3, [pc, #40]	; (801130c <_dtoa_r+0xbdc>)
 80112e4:	f7ff ba99 	b.w	801081a <_dtoa_r+0xea>
 80112e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f47f aa6d 	bne.w	80107ca <_dtoa_r+0x9a>
 80112f0:	4b07      	ldr	r3, [pc, #28]	; (8011310 <_dtoa_r+0xbe0>)
 80112f2:	f7ff ba92 	b.w	801081a <_dtoa_r+0xea>
 80112f6:	9b01      	ldr	r3, [sp, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dcb5      	bgt.n	8011268 <_dtoa_r+0xb38>
 80112fc:	9b07      	ldr	r3, [sp, #28]
 80112fe:	2b02      	cmp	r3, #2
 8011300:	f73f aeb1 	bgt.w	8011066 <_dtoa_r+0x936>
 8011304:	e7b0      	b.n	8011268 <_dtoa_r+0xb38>
 8011306:	bf00      	nop
 8011308:	08015269 	.word	0x08015269
 801130c:	080151c4 	.word	0x080151c4
 8011310:	080151ed 	.word	0x080151ed

08011314 <_free_r>:
 8011314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011316:	2900      	cmp	r1, #0
 8011318:	d044      	beq.n	80113a4 <_free_r+0x90>
 801131a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801131e:	9001      	str	r0, [sp, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	f1a1 0404 	sub.w	r4, r1, #4
 8011326:	bfb8      	it	lt
 8011328:	18e4      	addlt	r4, r4, r3
 801132a:	f000 f8e7 	bl	80114fc <__malloc_lock>
 801132e:	4a1e      	ldr	r2, [pc, #120]	; (80113a8 <_free_r+0x94>)
 8011330:	9801      	ldr	r0, [sp, #4]
 8011332:	6813      	ldr	r3, [r2, #0]
 8011334:	b933      	cbnz	r3, 8011344 <_free_r+0x30>
 8011336:	6063      	str	r3, [r4, #4]
 8011338:	6014      	str	r4, [r2, #0]
 801133a:	b003      	add	sp, #12
 801133c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011340:	f000 b8e2 	b.w	8011508 <__malloc_unlock>
 8011344:	42a3      	cmp	r3, r4
 8011346:	d908      	bls.n	801135a <_free_r+0x46>
 8011348:	6825      	ldr	r5, [r4, #0]
 801134a:	1961      	adds	r1, r4, r5
 801134c:	428b      	cmp	r3, r1
 801134e:	bf01      	itttt	eq
 8011350:	6819      	ldreq	r1, [r3, #0]
 8011352:	685b      	ldreq	r3, [r3, #4]
 8011354:	1949      	addeq	r1, r1, r5
 8011356:	6021      	streq	r1, [r4, #0]
 8011358:	e7ed      	b.n	8011336 <_free_r+0x22>
 801135a:	461a      	mov	r2, r3
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	b10b      	cbz	r3, 8011364 <_free_r+0x50>
 8011360:	42a3      	cmp	r3, r4
 8011362:	d9fa      	bls.n	801135a <_free_r+0x46>
 8011364:	6811      	ldr	r1, [r2, #0]
 8011366:	1855      	adds	r5, r2, r1
 8011368:	42a5      	cmp	r5, r4
 801136a:	d10b      	bne.n	8011384 <_free_r+0x70>
 801136c:	6824      	ldr	r4, [r4, #0]
 801136e:	4421      	add	r1, r4
 8011370:	1854      	adds	r4, r2, r1
 8011372:	42a3      	cmp	r3, r4
 8011374:	6011      	str	r1, [r2, #0]
 8011376:	d1e0      	bne.n	801133a <_free_r+0x26>
 8011378:	681c      	ldr	r4, [r3, #0]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	6053      	str	r3, [r2, #4]
 801137e:	440c      	add	r4, r1
 8011380:	6014      	str	r4, [r2, #0]
 8011382:	e7da      	b.n	801133a <_free_r+0x26>
 8011384:	d902      	bls.n	801138c <_free_r+0x78>
 8011386:	230c      	movs	r3, #12
 8011388:	6003      	str	r3, [r0, #0]
 801138a:	e7d6      	b.n	801133a <_free_r+0x26>
 801138c:	6825      	ldr	r5, [r4, #0]
 801138e:	1961      	adds	r1, r4, r5
 8011390:	428b      	cmp	r3, r1
 8011392:	bf04      	itt	eq
 8011394:	6819      	ldreq	r1, [r3, #0]
 8011396:	685b      	ldreq	r3, [r3, #4]
 8011398:	6063      	str	r3, [r4, #4]
 801139a:	bf04      	itt	eq
 801139c:	1949      	addeq	r1, r1, r5
 801139e:	6021      	streq	r1, [r4, #0]
 80113a0:	6054      	str	r4, [r2, #4]
 80113a2:	e7ca      	b.n	801133a <_free_r+0x26>
 80113a4:	b003      	add	sp, #12
 80113a6:	bd30      	pop	{r4, r5, pc}
 80113a8:	20000944 	.word	0x20000944

080113ac <malloc>:
 80113ac:	4b02      	ldr	r3, [pc, #8]	; (80113b8 <malloc+0xc>)
 80113ae:	4601      	mov	r1, r0
 80113b0:	6818      	ldr	r0, [r3, #0]
 80113b2:	f000 b823 	b.w	80113fc <_malloc_r>
 80113b6:	bf00      	nop
 80113b8:	200001f4 	.word	0x200001f4

080113bc <sbrk_aligned>:
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	4e0e      	ldr	r6, [pc, #56]	; (80113f8 <sbrk_aligned+0x3c>)
 80113c0:	460c      	mov	r4, r1
 80113c2:	6831      	ldr	r1, [r6, #0]
 80113c4:	4605      	mov	r5, r0
 80113c6:	b911      	cbnz	r1, 80113ce <sbrk_aligned+0x12>
 80113c8:	f001 fff4 	bl	80133b4 <_sbrk_r>
 80113cc:	6030      	str	r0, [r6, #0]
 80113ce:	4621      	mov	r1, r4
 80113d0:	4628      	mov	r0, r5
 80113d2:	f001 ffef 	bl	80133b4 <_sbrk_r>
 80113d6:	1c43      	adds	r3, r0, #1
 80113d8:	d00a      	beq.n	80113f0 <sbrk_aligned+0x34>
 80113da:	1cc4      	adds	r4, r0, #3
 80113dc:	f024 0403 	bic.w	r4, r4, #3
 80113e0:	42a0      	cmp	r0, r4
 80113e2:	d007      	beq.n	80113f4 <sbrk_aligned+0x38>
 80113e4:	1a21      	subs	r1, r4, r0
 80113e6:	4628      	mov	r0, r5
 80113e8:	f001 ffe4 	bl	80133b4 <_sbrk_r>
 80113ec:	3001      	adds	r0, #1
 80113ee:	d101      	bne.n	80113f4 <sbrk_aligned+0x38>
 80113f0:	f04f 34ff 	mov.w	r4, #4294967295
 80113f4:	4620      	mov	r0, r4
 80113f6:	bd70      	pop	{r4, r5, r6, pc}
 80113f8:	20000948 	.word	0x20000948

080113fc <_malloc_r>:
 80113fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011400:	1ccd      	adds	r5, r1, #3
 8011402:	f025 0503 	bic.w	r5, r5, #3
 8011406:	3508      	adds	r5, #8
 8011408:	2d0c      	cmp	r5, #12
 801140a:	bf38      	it	cc
 801140c:	250c      	movcc	r5, #12
 801140e:	2d00      	cmp	r5, #0
 8011410:	4607      	mov	r7, r0
 8011412:	db01      	blt.n	8011418 <_malloc_r+0x1c>
 8011414:	42a9      	cmp	r1, r5
 8011416:	d905      	bls.n	8011424 <_malloc_r+0x28>
 8011418:	230c      	movs	r3, #12
 801141a:	603b      	str	r3, [r7, #0]
 801141c:	2600      	movs	r6, #0
 801141e:	4630      	mov	r0, r6
 8011420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80114f8 <_malloc_r+0xfc>
 8011428:	f000 f868 	bl	80114fc <__malloc_lock>
 801142c:	f8d8 3000 	ldr.w	r3, [r8]
 8011430:	461c      	mov	r4, r3
 8011432:	bb5c      	cbnz	r4, 801148c <_malloc_r+0x90>
 8011434:	4629      	mov	r1, r5
 8011436:	4638      	mov	r0, r7
 8011438:	f7ff ffc0 	bl	80113bc <sbrk_aligned>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	4604      	mov	r4, r0
 8011440:	d155      	bne.n	80114ee <_malloc_r+0xf2>
 8011442:	f8d8 4000 	ldr.w	r4, [r8]
 8011446:	4626      	mov	r6, r4
 8011448:	2e00      	cmp	r6, #0
 801144a:	d145      	bne.n	80114d8 <_malloc_r+0xdc>
 801144c:	2c00      	cmp	r4, #0
 801144e:	d048      	beq.n	80114e2 <_malloc_r+0xe6>
 8011450:	6823      	ldr	r3, [r4, #0]
 8011452:	4631      	mov	r1, r6
 8011454:	4638      	mov	r0, r7
 8011456:	eb04 0903 	add.w	r9, r4, r3
 801145a:	f001 ffab 	bl	80133b4 <_sbrk_r>
 801145e:	4581      	cmp	r9, r0
 8011460:	d13f      	bne.n	80114e2 <_malloc_r+0xe6>
 8011462:	6821      	ldr	r1, [r4, #0]
 8011464:	1a6d      	subs	r5, r5, r1
 8011466:	4629      	mov	r1, r5
 8011468:	4638      	mov	r0, r7
 801146a:	f7ff ffa7 	bl	80113bc <sbrk_aligned>
 801146e:	3001      	adds	r0, #1
 8011470:	d037      	beq.n	80114e2 <_malloc_r+0xe6>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	442b      	add	r3, r5
 8011476:	6023      	str	r3, [r4, #0]
 8011478:	f8d8 3000 	ldr.w	r3, [r8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d038      	beq.n	80114f2 <_malloc_r+0xf6>
 8011480:	685a      	ldr	r2, [r3, #4]
 8011482:	42a2      	cmp	r2, r4
 8011484:	d12b      	bne.n	80114de <_malloc_r+0xe2>
 8011486:	2200      	movs	r2, #0
 8011488:	605a      	str	r2, [r3, #4]
 801148a:	e00f      	b.n	80114ac <_malloc_r+0xb0>
 801148c:	6822      	ldr	r2, [r4, #0]
 801148e:	1b52      	subs	r2, r2, r5
 8011490:	d41f      	bmi.n	80114d2 <_malloc_r+0xd6>
 8011492:	2a0b      	cmp	r2, #11
 8011494:	d917      	bls.n	80114c6 <_malloc_r+0xca>
 8011496:	1961      	adds	r1, r4, r5
 8011498:	42a3      	cmp	r3, r4
 801149a:	6025      	str	r5, [r4, #0]
 801149c:	bf18      	it	ne
 801149e:	6059      	strne	r1, [r3, #4]
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	bf08      	it	eq
 80114a4:	f8c8 1000 	streq.w	r1, [r8]
 80114a8:	5162      	str	r2, [r4, r5]
 80114aa:	604b      	str	r3, [r1, #4]
 80114ac:	4638      	mov	r0, r7
 80114ae:	f104 060b 	add.w	r6, r4, #11
 80114b2:	f000 f829 	bl	8011508 <__malloc_unlock>
 80114b6:	f026 0607 	bic.w	r6, r6, #7
 80114ba:	1d23      	adds	r3, r4, #4
 80114bc:	1af2      	subs	r2, r6, r3
 80114be:	d0ae      	beq.n	801141e <_malloc_r+0x22>
 80114c0:	1b9b      	subs	r3, r3, r6
 80114c2:	50a3      	str	r3, [r4, r2]
 80114c4:	e7ab      	b.n	801141e <_malloc_r+0x22>
 80114c6:	42a3      	cmp	r3, r4
 80114c8:	6862      	ldr	r2, [r4, #4]
 80114ca:	d1dd      	bne.n	8011488 <_malloc_r+0x8c>
 80114cc:	f8c8 2000 	str.w	r2, [r8]
 80114d0:	e7ec      	b.n	80114ac <_malloc_r+0xb0>
 80114d2:	4623      	mov	r3, r4
 80114d4:	6864      	ldr	r4, [r4, #4]
 80114d6:	e7ac      	b.n	8011432 <_malloc_r+0x36>
 80114d8:	4634      	mov	r4, r6
 80114da:	6876      	ldr	r6, [r6, #4]
 80114dc:	e7b4      	b.n	8011448 <_malloc_r+0x4c>
 80114de:	4613      	mov	r3, r2
 80114e0:	e7cc      	b.n	801147c <_malloc_r+0x80>
 80114e2:	230c      	movs	r3, #12
 80114e4:	603b      	str	r3, [r7, #0]
 80114e6:	4638      	mov	r0, r7
 80114e8:	f000 f80e 	bl	8011508 <__malloc_unlock>
 80114ec:	e797      	b.n	801141e <_malloc_r+0x22>
 80114ee:	6025      	str	r5, [r4, #0]
 80114f0:	e7dc      	b.n	80114ac <_malloc_r+0xb0>
 80114f2:	605b      	str	r3, [r3, #4]
 80114f4:	deff      	udf	#255	; 0xff
 80114f6:	bf00      	nop
 80114f8:	20000944 	.word	0x20000944

080114fc <__malloc_lock>:
 80114fc:	4801      	ldr	r0, [pc, #4]	; (8011504 <__malloc_lock+0x8>)
 80114fe:	f7ff b884 	b.w	801060a <__retarget_lock_acquire_recursive>
 8011502:	bf00      	nop
 8011504:	20000940 	.word	0x20000940

08011508 <__malloc_unlock>:
 8011508:	4801      	ldr	r0, [pc, #4]	; (8011510 <__malloc_unlock+0x8>)
 801150a:	f7ff b87f 	b.w	801060c <__retarget_lock_release_recursive>
 801150e:	bf00      	nop
 8011510:	20000940 	.word	0x20000940

08011514 <_Balloc>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	69c6      	ldr	r6, [r0, #28]
 8011518:	4604      	mov	r4, r0
 801151a:	460d      	mov	r5, r1
 801151c:	b976      	cbnz	r6, 801153c <_Balloc+0x28>
 801151e:	2010      	movs	r0, #16
 8011520:	f7ff ff44 	bl	80113ac <malloc>
 8011524:	4602      	mov	r2, r0
 8011526:	61e0      	str	r0, [r4, #28]
 8011528:	b920      	cbnz	r0, 8011534 <_Balloc+0x20>
 801152a:	4b18      	ldr	r3, [pc, #96]	; (801158c <_Balloc+0x78>)
 801152c:	4818      	ldr	r0, [pc, #96]	; (8011590 <_Balloc+0x7c>)
 801152e:	216b      	movs	r1, #107	; 0x6b
 8011530:	f001 ff66 	bl	8013400 <__assert_func>
 8011534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011538:	6006      	str	r6, [r0, #0]
 801153a:	60c6      	str	r6, [r0, #12]
 801153c:	69e6      	ldr	r6, [r4, #28]
 801153e:	68f3      	ldr	r3, [r6, #12]
 8011540:	b183      	cbz	r3, 8011564 <_Balloc+0x50>
 8011542:	69e3      	ldr	r3, [r4, #28]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801154a:	b9b8      	cbnz	r0, 801157c <_Balloc+0x68>
 801154c:	2101      	movs	r1, #1
 801154e:	fa01 f605 	lsl.w	r6, r1, r5
 8011552:	1d72      	adds	r2, r6, #5
 8011554:	0092      	lsls	r2, r2, #2
 8011556:	4620      	mov	r0, r4
 8011558:	f001 ff70 	bl	801343c <_calloc_r>
 801155c:	b160      	cbz	r0, 8011578 <_Balloc+0x64>
 801155e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011562:	e00e      	b.n	8011582 <_Balloc+0x6e>
 8011564:	2221      	movs	r2, #33	; 0x21
 8011566:	2104      	movs	r1, #4
 8011568:	4620      	mov	r0, r4
 801156a:	f001 ff67 	bl	801343c <_calloc_r>
 801156e:	69e3      	ldr	r3, [r4, #28]
 8011570:	60f0      	str	r0, [r6, #12]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e4      	bne.n	8011542 <_Balloc+0x2e>
 8011578:	2000      	movs	r0, #0
 801157a:	bd70      	pop	{r4, r5, r6, pc}
 801157c:	6802      	ldr	r2, [r0, #0]
 801157e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011582:	2300      	movs	r3, #0
 8011584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011588:	e7f7      	b.n	801157a <_Balloc+0x66>
 801158a:	bf00      	nop
 801158c:	080151fa 	.word	0x080151fa
 8011590:	0801527a 	.word	0x0801527a

08011594 <_Bfree>:
 8011594:	b570      	push	{r4, r5, r6, lr}
 8011596:	69c6      	ldr	r6, [r0, #28]
 8011598:	4605      	mov	r5, r0
 801159a:	460c      	mov	r4, r1
 801159c:	b976      	cbnz	r6, 80115bc <_Bfree+0x28>
 801159e:	2010      	movs	r0, #16
 80115a0:	f7ff ff04 	bl	80113ac <malloc>
 80115a4:	4602      	mov	r2, r0
 80115a6:	61e8      	str	r0, [r5, #28]
 80115a8:	b920      	cbnz	r0, 80115b4 <_Bfree+0x20>
 80115aa:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <_Bfree+0x3c>)
 80115ac:	4809      	ldr	r0, [pc, #36]	; (80115d4 <_Bfree+0x40>)
 80115ae:	218f      	movs	r1, #143	; 0x8f
 80115b0:	f001 ff26 	bl	8013400 <__assert_func>
 80115b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115b8:	6006      	str	r6, [r0, #0]
 80115ba:	60c6      	str	r6, [r0, #12]
 80115bc:	b13c      	cbz	r4, 80115ce <_Bfree+0x3a>
 80115be:	69eb      	ldr	r3, [r5, #28]
 80115c0:	6862      	ldr	r2, [r4, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115c8:	6021      	str	r1, [r4, #0]
 80115ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115ce:	bd70      	pop	{r4, r5, r6, pc}
 80115d0:	080151fa 	.word	0x080151fa
 80115d4:	0801527a 	.word	0x0801527a

080115d8 <__multadd>:
 80115d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115dc:	690d      	ldr	r5, [r1, #16]
 80115de:	4607      	mov	r7, r0
 80115e0:	460c      	mov	r4, r1
 80115e2:	461e      	mov	r6, r3
 80115e4:	f101 0c14 	add.w	ip, r1, #20
 80115e8:	2000      	movs	r0, #0
 80115ea:	f8dc 3000 	ldr.w	r3, [ip]
 80115ee:	b299      	uxth	r1, r3
 80115f0:	fb02 6101 	mla	r1, r2, r1, r6
 80115f4:	0c1e      	lsrs	r6, r3, #16
 80115f6:	0c0b      	lsrs	r3, r1, #16
 80115f8:	fb02 3306 	mla	r3, r2, r6, r3
 80115fc:	b289      	uxth	r1, r1
 80115fe:	3001      	adds	r0, #1
 8011600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011604:	4285      	cmp	r5, r0
 8011606:	f84c 1b04 	str.w	r1, [ip], #4
 801160a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801160e:	dcec      	bgt.n	80115ea <__multadd+0x12>
 8011610:	b30e      	cbz	r6, 8011656 <__multadd+0x7e>
 8011612:	68a3      	ldr	r3, [r4, #8]
 8011614:	42ab      	cmp	r3, r5
 8011616:	dc19      	bgt.n	801164c <__multadd+0x74>
 8011618:	6861      	ldr	r1, [r4, #4]
 801161a:	4638      	mov	r0, r7
 801161c:	3101      	adds	r1, #1
 801161e:	f7ff ff79 	bl	8011514 <_Balloc>
 8011622:	4680      	mov	r8, r0
 8011624:	b928      	cbnz	r0, 8011632 <__multadd+0x5a>
 8011626:	4602      	mov	r2, r0
 8011628:	4b0c      	ldr	r3, [pc, #48]	; (801165c <__multadd+0x84>)
 801162a:	480d      	ldr	r0, [pc, #52]	; (8011660 <__multadd+0x88>)
 801162c:	21ba      	movs	r1, #186	; 0xba
 801162e:	f001 fee7 	bl	8013400 <__assert_func>
 8011632:	6922      	ldr	r2, [r4, #16]
 8011634:	3202      	adds	r2, #2
 8011636:	f104 010c 	add.w	r1, r4, #12
 801163a:	0092      	lsls	r2, r2, #2
 801163c:	300c      	adds	r0, #12
 801163e:	f001 fec9 	bl	80133d4 <memcpy>
 8011642:	4621      	mov	r1, r4
 8011644:	4638      	mov	r0, r7
 8011646:	f7ff ffa5 	bl	8011594 <_Bfree>
 801164a:	4644      	mov	r4, r8
 801164c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011650:	3501      	adds	r5, #1
 8011652:	615e      	str	r6, [r3, #20]
 8011654:	6125      	str	r5, [r4, #16]
 8011656:	4620      	mov	r0, r4
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	08015269 	.word	0x08015269
 8011660:	0801527a 	.word	0x0801527a

08011664 <__s2b>:
 8011664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	4615      	mov	r5, r2
 801166c:	461f      	mov	r7, r3
 801166e:	2209      	movs	r2, #9
 8011670:	3308      	adds	r3, #8
 8011672:	4606      	mov	r6, r0
 8011674:	fb93 f3f2 	sdiv	r3, r3, r2
 8011678:	2100      	movs	r1, #0
 801167a:	2201      	movs	r2, #1
 801167c:	429a      	cmp	r2, r3
 801167e:	db09      	blt.n	8011694 <__s2b+0x30>
 8011680:	4630      	mov	r0, r6
 8011682:	f7ff ff47 	bl	8011514 <_Balloc>
 8011686:	b940      	cbnz	r0, 801169a <__s2b+0x36>
 8011688:	4602      	mov	r2, r0
 801168a:	4b19      	ldr	r3, [pc, #100]	; (80116f0 <__s2b+0x8c>)
 801168c:	4819      	ldr	r0, [pc, #100]	; (80116f4 <__s2b+0x90>)
 801168e:	21d3      	movs	r1, #211	; 0xd3
 8011690:	f001 feb6 	bl	8013400 <__assert_func>
 8011694:	0052      	lsls	r2, r2, #1
 8011696:	3101      	adds	r1, #1
 8011698:	e7f0      	b.n	801167c <__s2b+0x18>
 801169a:	9b08      	ldr	r3, [sp, #32]
 801169c:	6143      	str	r3, [r0, #20]
 801169e:	2d09      	cmp	r5, #9
 80116a0:	f04f 0301 	mov.w	r3, #1
 80116a4:	6103      	str	r3, [r0, #16]
 80116a6:	dd16      	ble.n	80116d6 <__s2b+0x72>
 80116a8:	f104 0909 	add.w	r9, r4, #9
 80116ac:	46c8      	mov	r8, r9
 80116ae:	442c      	add	r4, r5
 80116b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116b4:	4601      	mov	r1, r0
 80116b6:	3b30      	subs	r3, #48	; 0x30
 80116b8:	220a      	movs	r2, #10
 80116ba:	4630      	mov	r0, r6
 80116bc:	f7ff ff8c 	bl	80115d8 <__multadd>
 80116c0:	45a0      	cmp	r8, r4
 80116c2:	d1f5      	bne.n	80116b0 <__s2b+0x4c>
 80116c4:	f1a5 0408 	sub.w	r4, r5, #8
 80116c8:	444c      	add	r4, r9
 80116ca:	1b2d      	subs	r5, r5, r4
 80116cc:	1963      	adds	r3, r4, r5
 80116ce:	42bb      	cmp	r3, r7
 80116d0:	db04      	blt.n	80116dc <__s2b+0x78>
 80116d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116d6:	340a      	adds	r4, #10
 80116d8:	2509      	movs	r5, #9
 80116da:	e7f6      	b.n	80116ca <__s2b+0x66>
 80116dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116e0:	4601      	mov	r1, r0
 80116e2:	3b30      	subs	r3, #48	; 0x30
 80116e4:	220a      	movs	r2, #10
 80116e6:	4630      	mov	r0, r6
 80116e8:	f7ff ff76 	bl	80115d8 <__multadd>
 80116ec:	e7ee      	b.n	80116cc <__s2b+0x68>
 80116ee:	bf00      	nop
 80116f0:	08015269 	.word	0x08015269
 80116f4:	0801527a 	.word	0x0801527a

080116f8 <__hi0bits>:
 80116f8:	0c03      	lsrs	r3, r0, #16
 80116fa:	041b      	lsls	r3, r3, #16
 80116fc:	b9d3      	cbnz	r3, 8011734 <__hi0bits+0x3c>
 80116fe:	0400      	lsls	r0, r0, #16
 8011700:	2310      	movs	r3, #16
 8011702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011706:	bf04      	itt	eq
 8011708:	0200      	lsleq	r0, r0, #8
 801170a:	3308      	addeq	r3, #8
 801170c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011710:	bf04      	itt	eq
 8011712:	0100      	lsleq	r0, r0, #4
 8011714:	3304      	addeq	r3, #4
 8011716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801171a:	bf04      	itt	eq
 801171c:	0080      	lsleq	r0, r0, #2
 801171e:	3302      	addeq	r3, #2
 8011720:	2800      	cmp	r0, #0
 8011722:	db05      	blt.n	8011730 <__hi0bits+0x38>
 8011724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011728:	f103 0301 	add.w	r3, r3, #1
 801172c:	bf08      	it	eq
 801172e:	2320      	moveq	r3, #32
 8011730:	4618      	mov	r0, r3
 8011732:	4770      	bx	lr
 8011734:	2300      	movs	r3, #0
 8011736:	e7e4      	b.n	8011702 <__hi0bits+0xa>

08011738 <__lo0bits>:
 8011738:	6803      	ldr	r3, [r0, #0]
 801173a:	f013 0207 	ands.w	r2, r3, #7
 801173e:	d00c      	beq.n	801175a <__lo0bits+0x22>
 8011740:	07d9      	lsls	r1, r3, #31
 8011742:	d422      	bmi.n	801178a <__lo0bits+0x52>
 8011744:	079a      	lsls	r2, r3, #30
 8011746:	bf49      	itett	mi
 8011748:	085b      	lsrmi	r3, r3, #1
 801174a:	089b      	lsrpl	r3, r3, #2
 801174c:	6003      	strmi	r3, [r0, #0]
 801174e:	2201      	movmi	r2, #1
 8011750:	bf5c      	itt	pl
 8011752:	6003      	strpl	r3, [r0, #0]
 8011754:	2202      	movpl	r2, #2
 8011756:	4610      	mov	r0, r2
 8011758:	4770      	bx	lr
 801175a:	b299      	uxth	r1, r3
 801175c:	b909      	cbnz	r1, 8011762 <__lo0bits+0x2a>
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	2210      	movs	r2, #16
 8011762:	b2d9      	uxtb	r1, r3
 8011764:	b909      	cbnz	r1, 801176a <__lo0bits+0x32>
 8011766:	3208      	adds	r2, #8
 8011768:	0a1b      	lsrs	r3, r3, #8
 801176a:	0719      	lsls	r1, r3, #28
 801176c:	bf04      	itt	eq
 801176e:	091b      	lsreq	r3, r3, #4
 8011770:	3204      	addeq	r2, #4
 8011772:	0799      	lsls	r1, r3, #30
 8011774:	bf04      	itt	eq
 8011776:	089b      	lsreq	r3, r3, #2
 8011778:	3202      	addeq	r2, #2
 801177a:	07d9      	lsls	r1, r3, #31
 801177c:	d403      	bmi.n	8011786 <__lo0bits+0x4e>
 801177e:	085b      	lsrs	r3, r3, #1
 8011780:	f102 0201 	add.w	r2, r2, #1
 8011784:	d003      	beq.n	801178e <__lo0bits+0x56>
 8011786:	6003      	str	r3, [r0, #0]
 8011788:	e7e5      	b.n	8011756 <__lo0bits+0x1e>
 801178a:	2200      	movs	r2, #0
 801178c:	e7e3      	b.n	8011756 <__lo0bits+0x1e>
 801178e:	2220      	movs	r2, #32
 8011790:	e7e1      	b.n	8011756 <__lo0bits+0x1e>
	...

08011794 <__i2b>:
 8011794:	b510      	push	{r4, lr}
 8011796:	460c      	mov	r4, r1
 8011798:	2101      	movs	r1, #1
 801179a:	f7ff febb 	bl	8011514 <_Balloc>
 801179e:	4602      	mov	r2, r0
 80117a0:	b928      	cbnz	r0, 80117ae <__i2b+0x1a>
 80117a2:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <__i2b+0x24>)
 80117a4:	4805      	ldr	r0, [pc, #20]	; (80117bc <__i2b+0x28>)
 80117a6:	f240 1145 	movw	r1, #325	; 0x145
 80117aa:	f001 fe29 	bl	8013400 <__assert_func>
 80117ae:	2301      	movs	r3, #1
 80117b0:	6144      	str	r4, [r0, #20]
 80117b2:	6103      	str	r3, [r0, #16]
 80117b4:	bd10      	pop	{r4, pc}
 80117b6:	bf00      	nop
 80117b8:	08015269 	.word	0x08015269
 80117bc:	0801527a 	.word	0x0801527a

080117c0 <__multiply>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	4691      	mov	r9, r2
 80117c6:	690a      	ldr	r2, [r1, #16]
 80117c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	bfb8      	it	lt
 80117d0:	460b      	movlt	r3, r1
 80117d2:	460c      	mov	r4, r1
 80117d4:	bfbc      	itt	lt
 80117d6:	464c      	movlt	r4, r9
 80117d8:	4699      	movlt	r9, r3
 80117da:	6927      	ldr	r7, [r4, #16]
 80117dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117e0:	68a3      	ldr	r3, [r4, #8]
 80117e2:	6861      	ldr	r1, [r4, #4]
 80117e4:	eb07 060a 	add.w	r6, r7, sl
 80117e8:	42b3      	cmp	r3, r6
 80117ea:	b085      	sub	sp, #20
 80117ec:	bfb8      	it	lt
 80117ee:	3101      	addlt	r1, #1
 80117f0:	f7ff fe90 	bl	8011514 <_Balloc>
 80117f4:	b930      	cbnz	r0, 8011804 <__multiply+0x44>
 80117f6:	4602      	mov	r2, r0
 80117f8:	4b44      	ldr	r3, [pc, #272]	; (801190c <__multiply+0x14c>)
 80117fa:	4845      	ldr	r0, [pc, #276]	; (8011910 <__multiply+0x150>)
 80117fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011800:	f001 fdfe 	bl	8013400 <__assert_func>
 8011804:	f100 0514 	add.w	r5, r0, #20
 8011808:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801180c:	462b      	mov	r3, r5
 801180e:	2200      	movs	r2, #0
 8011810:	4543      	cmp	r3, r8
 8011812:	d321      	bcc.n	8011858 <__multiply+0x98>
 8011814:	f104 0314 	add.w	r3, r4, #20
 8011818:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801181c:	f109 0314 	add.w	r3, r9, #20
 8011820:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011824:	9202      	str	r2, [sp, #8]
 8011826:	1b3a      	subs	r2, r7, r4
 8011828:	3a15      	subs	r2, #21
 801182a:	f022 0203 	bic.w	r2, r2, #3
 801182e:	3204      	adds	r2, #4
 8011830:	f104 0115 	add.w	r1, r4, #21
 8011834:	428f      	cmp	r7, r1
 8011836:	bf38      	it	cc
 8011838:	2204      	movcc	r2, #4
 801183a:	9201      	str	r2, [sp, #4]
 801183c:	9a02      	ldr	r2, [sp, #8]
 801183e:	9303      	str	r3, [sp, #12]
 8011840:	429a      	cmp	r2, r3
 8011842:	d80c      	bhi.n	801185e <__multiply+0x9e>
 8011844:	2e00      	cmp	r6, #0
 8011846:	dd03      	ble.n	8011850 <__multiply+0x90>
 8011848:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801184c:	2b00      	cmp	r3, #0
 801184e:	d05b      	beq.n	8011908 <__multiply+0x148>
 8011850:	6106      	str	r6, [r0, #16]
 8011852:	b005      	add	sp, #20
 8011854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011858:	f843 2b04 	str.w	r2, [r3], #4
 801185c:	e7d8      	b.n	8011810 <__multiply+0x50>
 801185e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011862:	f1ba 0f00 	cmp.w	sl, #0
 8011866:	d024      	beq.n	80118b2 <__multiply+0xf2>
 8011868:	f104 0e14 	add.w	lr, r4, #20
 801186c:	46a9      	mov	r9, r5
 801186e:	f04f 0c00 	mov.w	ip, #0
 8011872:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011876:	f8d9 1000 	ldr.w	r1, [r9]
 801187a:	fa1f fb82 	uxth.w	fp, r2
 801187e:	b289      	uxth	r1, r1
 8011880:	fb0a 110b 	mla	r1, sl, fp, r1
 8011884:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011888:	f8d9 2000 	ldr.w	r2, [r9]
 801188c:	4461      	add	r1, ip
 801188e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011892:	fb0a c20b 	mla	r2, sl, fp, ip
 8011896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801189a:	b289      	uxth	r1, r1
 801189c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118a0:	4577      	cmp	r7, lr
 80118a2:	f849 1b04 	str.w	r1, [r9], #4
 80118a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118aa:	d8e2      	bhi.n	8011872 <__multiply+0xb2>
 80118ac:	9a01      	ldr	r2, [sp, #4]
 80118ae:	f845 c002 	str.w	ip, [r5, r2]
 80118b2:	9a03      	ldr	r2, [sp, #12]
 80118b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118b8:	3304      	adds	r3, #4
 80118ba:	f1b9 0f00 	cmp.w	r9, #0
 80118be:	d021      	beq.n	8011904 <__multiply+0x144>
 80118c0:	6829      	ldr	r1, [r5, #0]
 80118c2:	f104 0c14 	add.w	ip, r4, #20
 80118c6:	46ae      	mov	lr, r5
 80118c8:	f04f 0a00 	mov.w	sl, #0
 80118cc:	f8bc b000 	ldrh.w	fp, [ip]
 80118d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80118d4:	fb09 220b 	mla	r2, r9, fp, r2
 80118d8:	4452      	add	r2, sl
 80118da:	b289      	uxth	r1, r1
 80118dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118e0:	f84e 1b04 	str.w	r1, [lr], #4
 80118e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80118e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80118ec:	f8be 1000 	ldrh.w	r1, [lr]
 80118f0:	fb09 110a 	mla	r1, r9, sl, r1
 80118f4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80118f8:	4567      	cmp	r7, ip
 80118fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80118fe:	d8e5      	bhi.n	80118cc <__multiply+0x10c>
 8011900:	9a01      	ldr	r2, [sp, #4]
 8011902:	50a9      	str	r1, [r5, r2]
 8011904:	3504      	adds	r5, #4
 8011906:	e799      	b.n	801183c <__multiply+0x7c>
 8011908:	3e01      	subs	r6, #1
 801190a:	e79b      	b.n	8011844 <__multiply+0x84>
 801190c:	08015269 	.word	0x08015269
 8011910:	0801527a 	.word	0x0801527a

08011914 <__pow5mult>:
 8011914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011918:	4615      	mov	r5, r2
 801191a:	f012 0203 	ands.w	r2, r2, #3
 801191e:	4606      	mov	r6, r0
 8011920:	460f      	mov	r7, r1
 8011922:	d007      	beq.n	8011934 <__pow5mult+0x20>
 8011924:	4c25      	ldr	r4, [pc, #148]	; (80119bc <__pow5mult+0xa8>)
 8011926:	3a01      	subs	r2, #1
 8011928:	2300      	movs	r3, #0
 801192a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801192e:	f7ff fe53 	bl	80115d8 <__multadd>
 8011932:	4607      	mov	r7, r0
 8011934:	10ad      	asrs	r5, r5, #2
 8011936:	d03d      	beq.n	80119b4 <__pow5mult+0xa0>
 8011938:	69f4      	ldr	r4, [r6, #28]
 801193a:	b97c      	cbnz	r4, 801195c <__pow5mult+0x48>
 801193c:	2010      	movs	r0, #16
 801193e:	f7ff fd35 	bl	80113ac <malloc>
 8011942:	4602      	mov	r2, r0
 8011944:	61f0      	str	r0, [r6, #28]
 8011946:	b928      	cbnz	r0, 8011954 <__pow5mult+0x40>
 8011948:	4b1d      	ldr	r3, [pc, #116]	; (80119c0 <__pow5mult+0xac>)
 801194a:	481e      	ldr	r0, [pc, #120]	; (80119c4 <__pow5mult+0xb0>)
 801194c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011950:	f001 fd56 	bl	8013400 <__assert_func>
 8011954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011958:	6004      	str	r4, [r0, #0]
 801195a:	60c4      	str	r4, [r0, #12]
 801195c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011964:	b94c      	cbnz	r4, 801197a <__pow5mult+0x66>
 8011966:	f240 2171 	movw	r1, #625	; 0x271
 801196a:	4630      	mov	r0, r6
 801196c:	f7ff ff12 	bl	8011794 <__i2b>
 8011970:	2300      	movs	r3, #0
 8011972:	f8c8 0008 	str.w	r0, [r8, #8]
 8011976:	4604      	mov	r4, r0
 8011978:	6003      	str	r3, [r0, #0]
 801197a:	f04f 0900 	mov.w	r9, #0
 801197e:	07eb      	lsls	r3, r5, #31
 8011980:	d50a      	bpl.n	8011998 <__pow5mult+0x84>
 8011982:	4639      	mov	r1, r7
 8011984:	4622      	mov	r2, r4
 8011986:	4630      	mov	r0, r6
 8011988:	f7ff ff1a 	bl	80117c0 <__multiply>
 801198c:	4639      	mov	r1, r7
 801198e:	4680      	mov	r8, r0
 8011990:	4630      	mov	r0, r6
 8011992:	f7ff fdff 	bl	8011594 <_Bfree>
 8011996:	4647      	mov	r7, r8
 8011998:	106d      	asrs	r5, r5, #1
 801199a:	d00b      	beq.n	80119b4 <__pow5mult+0xa0>
 801199c:	6820      	ldr	r0, [r4, #0]
 801199e:	b938      	cbnz	r0, 80119b0 <__pow5mult+0x9c>
 80119a0:	4622      	mov	r2, r4
 80119a2:	4621      	mov	r1, r4
 80119a4:	4630      	mov	r0, r6
 80119a6:	f7ff ff0b 	bl	80117c0 <__multiply>
 80119aa:	6020      	str	r0, [r4, #0]
 80119ac:	f8c0 9000 	str.w	r9, [r0]
 80119b0:	4604      	mov	r4, r0
 80119b2:	e7e4      	b.n	801197e <__pow5mult+0x6a>
 80119b4:	4638      	mov	r0, r7
 80119b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ba:	bf00      	nop
 80119bc:	080153c8 	.word	0x080153c8
 80119c0:	080151fa 	.word	0x080151fa
 80119c4:	0801527a 	.word	0x0801527a

080119c8 <__lshift>:
 80119c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119cc:	460c      	mov	r4, r1
 80119ce:	6849      	ldr	r1, [r1, #4]
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119d6:	68a3      	ldr	r3, [r4, #8]
 80119d8:	4607      	mov	r7, r0
 80119da:	4691      	mov	r9, r2
 80119dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119e0:	f108 0601 	add.w	r6, r8, #1
 80119e4:	42b3      	cmp	r3, r6
 80119e6:	db0b      	blt.n	8011a00 <__lshift+0x38>
 80119e8:	4638      	mov	r0, r7
 80119ea:	f7ff fd93 	bl	8011514 <_Balloc>
 80119ee:	4605      	mov	r5, r0
 80119f0:	b948      	cbnz	r0, 8011a06 <__lshift+0x3e>
 80119f2:	4602      	mov	r2, r0
 80119f4:	4b28      	ldr	r3, [pc, #160]	; (8011a98 <__lshift+0xd0>)
 80119f6:	4829      	ldr	r0, [pc, #164]	; (8011a9c <__lshift+0xd4>)
 80119f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80119fc:	f001 fd00 	bl	8013400 <__assert_func>
 8011a00:	3101      	adds	r1, #1
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	e7ee      	b.n	80119e4 <__lshift+0x1c>
 8011a06:	2300      	movs	r3, #0
 8011a08:	f100 0114 	add.w	r1, r0, #20
 8011a0c:	f100 0210 	add.w	r2, r0, #16
 8011a10:	4618      	mov	r0, r3
 8011a12:	4553      	cmp	r3, sl
 8011a14:	db33      	blt.n	8011a7e <__lshift+0xb6>
 8011a16:	6920      	ldr	r0, [r4, #16]
 8011a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a1c:	f104 0314 	add.w	r3, r4, #20
 8011a20:	f019 091f 	ands.w	r9, r9, #31
 8011a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a2c:	d02b      	beq.n	8011a86 <__lshift+0xbe>
 8011a2e:	f1c9 0e20 	rsb	lr, r9, #32
 8011a32:	468a      	mov	sl, r1
 8011a34:	2200      	movs	r2, #0
 8011a36:	6818      	ldr	r0, [r3, #0]
 8011a38:	fa00 f009 	lsl.w	r0, r0, r9
 8011a3c:	4310      	orrs	r0, r2
 8011a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8011a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a46:	459c      	cmp	ip, r3
 8011a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a4c:	d8f3      	bhi.n	8011a36 <__lshift+0x6e>
 8011a4e:	ebac 0304 	sub.w	r3, ip, r4
 8011a52:	3b15      	subs	r3, #21
 8011a54:	f023 0303 	bic.w	r3, r3, #3
 8011a58:	3304      	adds	r3, #4
 8011a5a:	f104 0015 	add.w	r0, r4, #21
 8011a5e:	4584      	cmp	ip, r0
 8011a60:	bf38      	it	cc
 8011a62:	2304      	movcc	r3, #4
 8011a64:	50ca      	str	r2, [r1, r3]
 8011a66:	b10a      	cbz	r2, 8011a6c <__lshift+0xa4>
 8011a68:	f108 0602 	add.w	r6, r8, #2
 8011a6c:	3e01      	subs	r6, #1
 8011a6e:	4638      	mov	r0, r7
 8011a70:	612e      	str	r6, [r5, #16]
 8011a72:	4621      	mov	r1, r4
 8011a74:	f7ff fd8e 	bl	8011594 <_Bfree>
 8011a78:	4628      	mov	r0, r5
 8011a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a82:	3301      	adds	r3, #1
 8011a84:	e7c5      	b.n	8011a12 <__lshift+0x4a>
 8011a86:	3904      	subs	r1, #4
 8011a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a90:	459c      	cmp	ip, r3
 8011a92:	d8f9      	bhi.n	8011a88 <__lshift+0xc0>
 8011a94:	e7ea      	b.n	8011a6c <__lshift+0xa4>
 8011a96:	bf00      	nop
 8011a98:	08015269 	.word	0x08015269
 8011a9c:	0801527a 	.word	0x0801527a

08011aa0 <__mcmp>:
 8011aa0:	b530      	push	{r4, r5, lr}
 8011aa2:	6902      	ldr	r2, [r0, #16]
 8011aa4:	690c      	ldr	r4, [r1, #16]
 8011aa6:	1b12      	subs	r2, r2, r4
 8011aa8:	d10e      	bne.n	8011ac8 <__mcmp+0x28>
 8011aaa:	f100 0314 	add.w	r3, r0, #20
 8011aae:	3114      	adds	r1, #20
 8011ab0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ab4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ab8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011abc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ac0:	42a5      	cmp	r5, r4
 8011ac2:	d003      	beq.n	8011acc <__mcmp+0x2c>
 8011ac4:	d305      	bcc.n	8011ad2 <__mcmp+0x32>
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	4610      	mov	r0, r2
 8011aca:	bd30      	pop	{r4, r5, pc}
 8011acc:	4283      	cmp	r3, r0
 8011ace:	d3f3      	bcc.n	8011ab8 <__mcmp+0x18>
 8011ad0:	e7fa      	b.n	8011ac8 <__mcmp+0x28>
 8011ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ad6:	e7f7      	b.n	8011ac8 <__mcmp+0x28>

08011ad8 <__mdiff>:
 8011ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011adc:	460c      	mov	r4, r1
 8011ade:	4606      	mov	r6, r0
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	4690      	mov	r8, r2
 8011ae6:	f7ff ffdb 	bl	8011aa0 <__mcmp>
 8011aea:	1e05      	subs	r5, r0, #0
 8011aec:	d110      	bne.n	8011b10 <__mdiff+0x38>
 8011aee:	4629      	mov	r1, r5
 8011af0:	4630      	mov	r0, r6
 8011af2:	f7ff fd0f 	bl	8011514 <_Balloc>
 8011af6:	b930      	cbnz	r0, 8011b06 <__mdiff+0x2e>
 8011af8:	4b3a      	ldr	r3, [pc, #232]	; (8011be4 <__mdiff+0x10c>)
 8011afa:	4602      	mov	r2, r0
 8011afc:	f240 2137 	movw	r1, #567	; 0x237
 8011b00:	4839      	ldr	r0, [pc, #228]	; (8011be8 <__mdiff+0x110>)
 8011b02:	f001 fc7d 	bl	8013400 <__assert_func>
 8011b06:	2301      	movs	r3, #1
 8011b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b10:	bfa4      	itt	ge
 8011b12:	4643      	movge	r3, r8
 8011b14:	46a0      	movge	r8, r4
 8011b16:	4630      	mov	r0, r6
 8011b18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b1c:	bfa6      	itte	ge
 8011b1e:	461c      	movge	r4, r3
 8011b20:	2500      	movge	r5, #0
 8011b22:	2501      	movlt	r5, #1
 8011b24:	f7ff fcf6 	bl	8011514 <_Balloc>
 8011b28:	b920      	cbnz	r0, 8011b34 <__mdiff+0x5c>
 8011b2a:	4b2e      	ldr	r3, [pc, #184]	; (8011be4 <__mdiff+0x10c>)
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	f240 2145 	movw	r1, #581	; 0x245
 8011b32:	e7e5      	b.n	8011b00 <__mdiff+0x28>
 8011b34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b38:	6926      	ldr	r6, [r4, #16]
 8011b3a:	60c5      	str	r5, [r0, #12]
 8011b3c:	f104 0914 	add.w	r9, r4, #20
 8011b40:	f108 0514 	add.w	r5, r8, #20
 8011b44:	f100 0e14 	add.w	lr, r0, #20
 8011b48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b50:	f108 0210 	add.w	r2, r8, #16
 8011b54:	46f2      	mov	sl, lr
 8011b56:	2100      	movs	r1, #0
 8011b58:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b60:	fa11 f88b 	uxtah	r8, r1, fp
 8011b64:	b299      	uxth	r1, r3
 8011b66:	0c1b      	lsrs	r3, r3, #16
 8011b68:	eba8 0801 	sub.w	r8, r8, r1
 8011b6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b74:	fa1f f888 	uxth.w	r8, r8
 8011b78:	1419      	asrs	r1, r3, #16
 8011b7a:	454e      	cmp	r6, r9
 8011b7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b80:	f84a 3b04 	str.w	r3, [sl], #4
 8011b84:	d8e8      	bhi.n	8011b58 <__mdiff+0x80>
 8011b86:	1b33      	subs	r3, r6, r4
 8011b88:	3b15      	subs	r3, #21
 8011b8a:	f023 0303 	bic.w	r3, r3, #3
 8011b8e:	3304      	adds	r3, #4
 8011b90:	3415      	adds	r4, #21
 8011b92:	42a6      	cmp	r6, r4
 8011b94:	bf38      	it	cc
 8011b96:	2304      	movcc	r3, #4
 8011b98:	441d      	add	r5, r3
 8011b9a:	4473      	add	r3, lr
 8011b9c:	469e      	mov	lr, r3
 8011b9e:	462e      	mov	r6, r5
 8011ba0:	4566      	cmp	r6, ip
 8011ba2:	d30e      	bcc.n	8011bc2 <__mdiff+0xea>
 8011ba4:	f10c 0203 	add.w	r2, ip, #3
 8011ba8:	1b52      	subs	r2, r2, r5
 8011baa:	f022 0203 	bic.w	r2, r2, #3
 8011bae:	3d03      	subs	r5, #3
 8011bb0:	45ac      	cmp	ip, r5
 8011bb2:	bf38      	it	cc
 8011bb4:	2200      	movcc	r2, #0
 8011bb6:	4413      	add	r3, r2
 8011bb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011bbc:	b17a      	cbz	r2, 8011bde <__mdiff+0x106>
 8011bbe:	6107      	str	r7, [r0, #16]
 8011bc0:	e7a4      	b.n	8011b0c <__mdiff+0x34>
 8011bc2:	f856 8b04 	ldr.w	r8, [r6], #4
 8011bc6:	fa11 f288 	uxtah	r2, r1, r8
 8011bca:	1414      	asrs	r4, r2, #16
 8011bcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011bd0:	b292      	uxth	r2, r2
 8011bd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011bd6:	f84e 2b04 	str.w	r2, [lr], #4
 8011bda:	1421      	asrs	r1, r4, #16
 8011bdc:	e7e0      	b.n	8011ba0 <__mdiff+0xc8>
 8011bde:	3f01      	subs	r7, #1
 8011be0:	e7ea      	b.n	8011bb8 <__mdiff+0xe0>
 8011be2:	bf00      	nop
 8011be4:	08015269 	.word	0x08015269
 8011be8:	0801527a 	.word	0x0801527a

08011bec <__ulp>:
 8011bec:	b082      	sub	sp, #8
 8011bee:	ed8d 0b00 	vstr	d0, [sp]
 8011bf2:	9a01      	ldr	r2, [sp, #4]
 8011bf4:	4b0f      	ldr	r3, [pc, #60]	; (8011c34 <__ulp+0x48>)
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dc08      	bgt.n	8011c12 <__ulp+0x26>
 8011c00:	425b      	negs	r3, r3
 8011c02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011c06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c0a:	da04      	bge.n	8011c16 <__ulp+0x2a>
 8011c0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011c10:	4113      	asrs	r3, r2
 8011c12:	2200      	movs	r2, #0
 8011c14:	e008      	b.n	8011c28 <__ulp+0x3c>
 8011c16:	f1a2 0314 	sub.w	r3, r2, #20
 8011c1a:	2b1e      	cmp	r3, #30
 8011c1c:	bfda      	itte	le
 8011c1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011c22:	40da      	lsrle	r2, r3
 8011c24:	2201      	movgt	r2, #1
 8011c26:	2300      	movs	r3, #0
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	ec41 0b10 	vmov	d0, r0, r1
 8011c30:	b002      	add	sp, #8
 8011c32:	4770      	bx	lr
 8011c34:	7ff00000 	.word	0x7ff00000

08011c38 <__b2d>:
 8011c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3c:	6906      	ldr	r6, [r0, #16]
 8011c3e:	f100 0814 	add.w	r8, r0, #20
 8011c42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c46:	1f37      	subs	r7, r6, #4
 8011c48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c4c:	4610      	mov	r0, r2
 8011c4e:	f7ff fd53 	bl	80116f8 <__hi0bits>
 8011c52:	f1c0 0320 	rsb	r3, r0, #32
 8011c56:	280a      	cmp	r0, #10
 8011c58:	600b      	str	r3, [r1, #0]
 8011c5a:	491b      	ldr	r1, [pc, #108]	; (8011cc8 <__b2d+0x90>)
 8011c5c:	dc15      	bgt.n	8011c8a <__b2d+0x52>
 8011c5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c62:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c66:	45b8      	cmp	r8, r7
 8011c68:	ea43 0501 	orr.w	r5, r3, r1
 8011c6c:	bf34      	ite	cc
 8011c6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c72:	2300      	movcs	r3, #0
 8011c74:	3015      	adds	r0, #21
 8011c76:	fa02 f000 	lsl.w	r0, r2, r0
 8011c7a:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c7e:	4303      	orrs	r3, r0
 8011c80:	461c      	mov	r4, r3
 8011c82:	ec45 4b10 	vmov	d0, r4, r5
 8011c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8a:	45b8      	cmp	r8, r7
 8011c8c:	bf3a      	itte	cc
 8011c8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c92:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c96:	2300      	movcs	r3, #0
 8011c98:	380b      	subs	r0, #11
 8011c9a:	d012      	beq.n	8011cc2 <__b2d+0x8a>
 8011c9c:	f1c0 0120 	rsb	r1, r0, #32
 8011ca0:	fa23 f401 	lsr.w	r4, r3, r1
 8011ca4:	4082      	lsls	r2, r0
 8011ca6:	4322      	orrs	r2, r4
 8011ca8:	4547      	cmp	r7, r8
 8011caa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011cae:	bf8c      	ite	hi
 8011cb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011cb4:	2200      	movls	r2, #0
 8011cb6:	4083      	lsls	r3, r0
 8011cb8:	40ca      	lsrs	r2, r1
 8011cba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	e7de      	b.n	8011c80 <__b2d+0x48>
 8011cc2:	ea42 0501 	orr.w	r5, r2, r1
 8011cc6:	e7db      	b.n	8011c80 <__b2d+0x48>
 8011cc8:	3ff00000 	.word	0x3ff00000

08011ccc <__d2b>:
 8011ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cd0:	460f      	mov	r7, r1
 8011cd2:	2101      	movs	r1, #1
 8011cd4:	ec59 8b10 	vmov	r8, r9, d0
 8011cd8:	4616      	mov	r6, r2
 8011cda:	f7ff fc1b 	bl	8011514 <_Balloc>
 8011cde:	4604      	mov	r4, r0
 8011ce0:	b930      	cbnz	r0, 8011cf0 <__d2b+0x24>
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	4b24      	ldr	r3, [pc, #144]	; (8011d78 <__d2b+0xac>)
 8011ce6:	4825      	ldr	r0, [pc, #148]	; (8011d7c <__d2b+0xb0>)
 8011ce8:	f240 310f 	movw	r1, #783	; 0x30f
 8011cec:	f001 fb88 	bl	8013400 <__assert_func>
 8011cf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cf8:	bb2d      	cbnz	r5, 8011d46 <__d2b+0x7a>
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	f1b8 0300 	subs.w	r3, r8, #0
 8011d00:	d026      	beq.n	8011d50 <__d2b+0x84>
 8011d02:	4668      	mov	r0, sp
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	f7ff fd17 	bl	8011738 <__lo0bits>
 8011d0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d0e:	b1e8      	cbz	r0, 8011d4c <__d2b+0x80>
 8011d10:	f1c0 0320 	rsb	r3, r0, #32
 8011d14:	fa02 f303 	lsl.w	r3, r2, r3
 8011d18:	430b      	orrs	r3, r1
 8011d1a:	40c2      	lsrs	r2, r0
 8011d1c:	6163      	str	r3, [r4, #20]
 8011d1e:	9201      	str	r2, [sp, #4]
 8011d20:	9b01      	ldr	r3, [sp, #4]
 8011d22:	61a3      	str	r3, [r4, #24]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	bf14      	ite	ne
 8011d28:	2202      	movne	r2, #2
 8011d2a:	2201      	moveq	r2, #1
 8011d2c:	6122      	str	r2, [r4, #16]
 8011d2e:	b1bd      	cbz	r5, 8011d60 <__d2b+0x94>
 8011d30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d34:	4405      	add	r5, r0
 8011d36:	603d      	str	r5, [r7, #0]
 8011d38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d3c:	6030      	str	r0, [r6, #0]
 8011d3e:	4620      	mov	r0, r4
 8011d40:	b003      	add	sp, #12
 8011d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d4a:	e7d6      	b.n	8011cfa <__d2b+0x2e>
 8011d4c:	6161      	str	r1, [r4, #20]
 8011d4e:	e7e7      	b.n	8011d20 <__d2b+0x54>
 8011d50:	a801      	add	r0, sp, #4
 8011d52:	f7ff fcf1 	bl	8011738 <__lo0bits>
 8011d56:	9b01      	ldr	r3, [sp, #4]
 8011d58:	6163      	str	r3, [r4, #20]
 8011d5a:	3020      	adds	r0, #32
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	e7e5      	b.n	8011d2c <__d2b+0x60>
 8011d60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d68:	6038      	str	r0, [r7, #0]
 8011d6a:	6918      	ldr	r0, [r3, #16]
 8011d6c:	f7ff fcc4 	bl	80116f8 <__hi0bits>
 8011d70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d74:	e7e2      	b.n	8011d3c <__d2b+0x70>
 8011d76:	bf00      	nop
 8011d78:	08015269 	.word	0x08015269
 8011d7c:	0801527a 	.word	0x0801527a

08011d80 <__ratio>:
 8011d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	4688      	mov	r8, r1
 8011d86:	4669      	mov	r1, sp
 8011d88:	4681      	mov	r9, r0
 8011d8a:	f7ff ff55 	bl	8011c38 <__b2d>
 8011d8e:	a901      	add	r1, sp, #4
 8011d90:	4640      	mov	r0, r8
 8011d92:	ec55 4b10 	vmov	r4, r5, d0
 8011d96:	f7ff ff4f 	bl	8011c38 <__b2d>
 8011d9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011da2:	eba3 0c02 	sub.w	ip, r3, r2
 8011da6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011daa:	1a9b      	subs	r3, r3, r2
 8011dac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011db0:	ec51 0b10 	vmov	r0, r1, d0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	bfd6      	itet	le
 8011db8:	460a      	movle	r2, r1
 8011dba:	462a      	movgt	r2, r5
 8011dbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011dc0:	468b      	mov	fp, r1
 8011dc2:	462f      	mov	r7, r5
 8011dc4:	bfd4      	ite	le
 8011dc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011dca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011dce:	4620      	mov	r0, r4
 8011dd0:	ee10 2a10 	vmov	r2, s0
 8011dd4:	465b      	mov	r3, fp
 8011dd6:	4639      	mov	r1, r7
 8011dd8:	f7ee fd38 	bl	800084c <__aeabi_ddiv>
 8011ddc:	ec41 0b10 	vmov	d0, r0, r1
 8011de0:	b003      	add	sp, #12
 8011de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011de6 <__copybits>:
 8011de6:	3901      	subs	r1, #1
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	1149      	asrs	r1, r1, #5
 8011dec:	6914      	ldr	r4, [r2, #16]
 8011dee:	3101      	adds	r1, #1
 8011df0:	f102 0314 	add.w	r3, r2, #20
 8011df4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011df8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011dfc:	1f05      	subs	r5, r0, #4
 8011dfe:	42a3      	cmp	r3, r4
 8011e00:	d30c      	bcc.n	8011e1c <__copybits+0x36>
 8011e02:	1aa3      	subs	r3, r4, r2
 8011e04:	3b11      	subs	r3, #17
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	3211      	adds	r2, #17
 8011e0c:	42a2      	cmp	r2, r4
 8011e0e:	bf88      	it	hi
 8011e10:	2300      	movhi	r3, #0
 8011e12:	4418      	add	r0, r3
 8011e14:	2300      	movs	r3, #0
 8011e16:	4288      	cmp	r0, r1
 8011e18:	d305      	bcc.n	8011e26 <__copybits+0x40>
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e20:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e24:	e7eb      	b.n	8011dfe <__copybits+0x18>
 8011e26:	f840 3b04 	str.w	r3, [r0], #4
 8011e2a:	e7f4      	b.n	8011e16 <__copybits+0x30>

08011e2c <__any_on>:
 8011e2c:	f100 0214 	add.w	r2, r0, #20
 8011e30:	6900      	ldr	r0, [r0, #16]
 8011e32:	114b      	asrs	r3, r1, #5
 8011e34:	4298      	cmp	r0, r3
 8011e36:	b510      	push	{r4, lr}
 8011e38:	db11      	blt.n	8011e5e <__any_on+0x32>
 8011e3a:	dd0a      	ble.n	8011e52 <__any_on+0x26>
 8011e3c:	f011 011f 	ands.w	r1, r1, #31
 8011e40:	d007      	beq.n	8011e52 <__any_on+0x26>
 8011e42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e46:	fa24 f001 	lsr.w	r0, r4, r1
 8011e4a:	fa00 f101 	lsl.w	r1, r0, r1
 8011e4e:	428c      	cmp	r4, r1
 8011e50:	d10b      	bne.n	8011e6a <__any_on+0x3e>
 8011e52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d803      	bhi.n	8011e62 <__any_on+0x36>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	bd10      	pop	{r4, pc}
 8011e5e:	4603      	mov	r3, r0
 8011e60:	e7f7      	b.n	8011e52 <__any_on+0x26>
 8011e62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e66:	2900      	cmp	r1, #0
 8011e68:	d0f5      	beq.n	8011e56 <__any_on+0x2a>
 8011e6a:	2001      	movs	r0, #1
 8011e6c:	e7f6      	b.n	8011e5c <__any_on+0x30>

08011e6e <sulp>:
 8011e6e:	b570      	push	{r4, r5, r6, lr}
 8011e70:	4604      	mov	r4, r0
 8011e72:	460d      	mov	r5, r1
 8011e74:	ec45 4b10 	vmov	d0, r4, r5
 8011e78:	4616      	mov	r6, r2
 8011e7a:	f7ff feb7 	bl	8011bec <__ulp>
 8011e7e:	ec51 0b10 	vmov	r0, r1, d0
 8011e82:	b17e      	cbz	r6, 8011ea4 <sulp+0x36>
 8011e84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	dd09      	ble.n	8011ea4 <sulp+0x36>
 8011e90:	051b      	lsls	r3, r3, #20
 8011e92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011e96:	2400      	movs	r4, #0
 8011e98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011e9c:	4622      	mov	r2, r4
 8011e9e:	462b      	mov	r3, r5
 8011ea0:	f7ee fbaa 	bl	80005f8 <__aeabi_dmul>
 8011ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ea8 <_strtod_l>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	ed2d 8b02 	vpush	{d8}
 8011eb0:	b09b      	sub	sp, #108	; 0x6c
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	9213      	str	r2, [sp, #76]	; 0x4c
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	9216      	str	r2, [sp, #88]	; 0x58
 8011eba:	460d      	mov	r5, r1
 8011ebc:	f04f 0800 	mov.w	r8, #0
 8011ec0:	f04f 0900 	mov.w	r9, #0
 8011ec4:	460a      	mov	r2, r1
 8011ec6:	9215      	str	r2, [sp, #84]	; 0x54
 8011ec8:	7811      	ldrb	r1, [r2, #0]
 8011eca:	292b      	cmp	r1, #43	; 0x2b
 8011ecc:	d04c      	beq.n	8011f68 <_strtod_l+0xc0>
 8011ece:	d83a      	bhi.n	8011f46 <_strtod_l+0x9e>
 8011ed0:	290d      	cmp	r1, #13
 8011ed2:	d834      	bhi.n	8011f3e <_strtod_l+0x96>
 8011ed4:	2908      	cmp	r1, #8
 8011ed6:	d834      	bhi.n	8011f42 <_strtod_l+0x9a>
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	d03d      	beq.n	8011f58 <_strtod_l+0xb0>
 8011edc:	2200      	movs	r2, #0
 8011ede:	920a      	str	r2, [sp, #40]	; 0x28
 8011ee0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011ee2:	7832      	ldrb	r2, [r6, #0]
 8011ee4:	2a30      	cmp	r2, #48	; 0x30
 8011ee6:	f040 80b4 	bne.w	8012052 <_strtod_l+0x1aa>
 8011eea:	7872      	ldrb	r2, [r6, #1]
 8011eec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011ef0:	2a58      	cmp	r2, #88	; 0x58
 8011ef2:	d170      	bne.n	8011fd6 <_strtod_l+0x12e>
 8011ef4:	9302      	str	r3, [sp, #8]
 8011ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ef8:	9301      	str	r3, [sp, #4]
 8011efa:	ab16      	add	r3, sp, #88	; 0x58
 8011efc:	9300      	str	r3, [sp, #0]
 8011efe:	4a8e      	ldr	r2, [pc, #568]	; (8012138 <_strtod_l+0x290>)
 8011f00:	ab17      	add	r3, sp, #92	; 0x5c
 8011f02:	a915      	add	r1, sp, #84	; 0x54
 8011f04:	4620      	mov	r0, r4
 8011f06:	f001 fb17 	bl	8013538 <__gethex>
 8011f0a:	f010 070f 	ands.w	r7, r0, #15
 8011f0e:	4605      	mov	r5, r0
 8011f10:	d005      	beq.n	8011f1e <_strtod_l+0x76>
 8011f12:	2f06      	cmp	r7, #6
 8011f14:	d12a      	bne.n	8011f6c <_strtod_l+0xc4>
 8011f16:	3601      	adds	r6, #1
 8011f18:	2300      	movs	r3, #0
 8011f1a:	9615      	str	r6, [sp, #84]	; 0x54
 8011f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8011f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f040 857f 	bne.w	8012a24 <_strtod_l+0xb7c>
 8011f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f28:	b1db      	cbz	r3, 8011f62 <_strtod_l+0xba>
 8011f2a:	4642      	mov	r2, r8
 8011f2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011f30:	ec43 2b10 	vmov	d0, r2, r3
 8011f34:	b01b      	add	sp, #108	; 0x6c
 8011f36:	ecbd 8b02 	vpop	{d8}
 8011f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3e:	2920      	cmp	r1, #32
 8011f40:	d1cc      	bne.n	8011edc <_strtod_l+0x34>
 8011f42:	3201      	adds	r2, #1
 8011f44:	e7bf      	b.n	8011ec6 <_strtod_l+0x1e>
 8011f46:	292d      	cmp	r1, #45	; 0x2d
 8011f48:	d1c8      	bne.n	8011edc <_strtod_l+0x34>
 8011f4a:	2101      	movs	r1, #1
 8011f4c:	910a      	str	r1, [sp, #40]	; 0x28
 8011f4e:	1c51      	adds	r1, r2, #1
 8011f50:	9115      	str	r1, [sp, #84]	; 0x54
 8011f52:	7852      	ldrb	r2, [r2, #1]
 8011f54:	2a00      	cmp	r2, #0
 8011f56:	d1c3      	bne.n	8011ee0 <_strtod_l+0x38>
 8011f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f5a:	9515      	str	r5, [sp, #84]	; 0x54
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f040 855f 	bne.w	8012a20 <_strtod_l+0xb78>
 8011f62:	4642      	mov	r2, r8
 8011f64:	464b      	mov	r3, r9
 8011f66:	e7e3      	b.n	8011f30 <_strtod_l+0x88>
 8011f68:	2100      	movs	r1, #0
 8011f6a:	e7ef      	b.n	8011f4c <_strtod_l+0xa4>
 8011f6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f6e:	b13a      	cbz	r2, 8011f80 <_strtod_l+0xd8>
 8011f70:	2135      	movs	r1, #53	; 0x35
 8011f72:	a818      	add	r0, sp, #96	; 0x60
 8011f74:	f7ff ff37 	bl	8011de6 <__copybits>
 8011f78:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f7ff fb0a 	bl	8011594 <_Bfree>
 8011f80:	3f01      	subs	r7, #1
 8011f82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f84:	2f04      	cmp	r7, #4
 8011f86:	d806      	bhi.n	8011f96 <_strtod_l+0xee>
 8011f88:	e8df f007 	tbb	[pc, r7]
 8011f8c:	201d0314 	.word	0x201d0314
 8011f90:	14          	.byte	0x14
 8011f91:	00          	.byte	0x00
 8011f92:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011f96:	05e9      	lsls	r1, r5, #23
 8011f98:	bf48      	it	mi
 8011f9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011f9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011fa2:	0d1b      	lsrs	r3, r3, #20
 8011fa4:	051b      	lsls	r3, r3, #20
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1b9      	bne.n	8011f1e <_strtod_l+0x76>
 8011faa:	f7fe fb03 	bl	80105b4 <__errno>
 8011fae:	2322      	movs	r3, #34	; 0x22
 8011fb0:	6003      	str	r3, [r0, #0]
 8011fb2:	e7b4      	b.n	8011f1e <_strtod_l+0x76>
 8011fb4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011fb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011fbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011fc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011fc4:	e7e7      	b.n	8011f96 <_strtod_l+0xee>
 8011fc6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012140 <_strtod_l+0x298>
 8011fca:	e7e4      	b.n	8011f96 <_strtod_l+0xee>
 8011fcc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011fd0:	f04f 38ff 	mov.w	r8, #4294967295
 8011fd4:	e7df      	b.n	8011f96 <_strtod_l+0xee>
 8011fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fd8:	1c5a      	adds	r2, r3, #1
 8011fda:	9215      	str	r2, [sp, #84]	; 0x54
 8011fdc:	785b      	ldrb	r3, [r3, #1]
 8011fde:	2b30      	cmp	r3, #48	; 0x30
 8011fe0:	d0f9      	beq.n	8011fd6 <_strtod_l+0x12e>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d09b      	beq.n	8011f1e <_strtod_l+0x76>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	f04f 0a00 	mov.w	sl, #0
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ff2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011ff6:	46d3      	mov	fp, sl
 8011ff8:	220a      	movs	r2, #10
 8011ffa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011ffc:	7806      	ldrb	r6, [r0, #0]
 8011ffe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012002:	b2d9      	uxtb	r1, r3
 8012004:	2909      	cmp	r1, #9
 8012006:	d926      	bls.n	8012056 <_strtod_l+0x1ae>
 8012008:	494c      	ldr	r1, [pc, #304]	; (801213c <_strtod_l+0x294>)
 801200a:	2201      	movs	r2, #1
 801200c:	f001 f9c0 	bl	8013390 <strncmp>
 8012010:	2800      	cmp	r0, #0
 8012012:	d030      	beq.n	8012076 <_strtod_l+0x1ce>
 8012014:	2000      	movs	r0, #0
 8012016:	4632      	mov	r2, r6
 8012018:	9005      	str	r0, [sp, #20]
 801201a:	465e      	mov	r6, fp
 801201c:	4603      	mov	r3, r0
 801201e:	2a65      	cmp	r2, #101	; 0x65
 8012020:	d001      	beq.n	8012026 <_strtod_l+0x17e>
 8012022:	2a45      	cmp	r2, #69	; 0x45
 8012024:	d113      	bne.n	801204e <_strtod_l+0x1a6>
 8012026:	b91e      	cbnz	r6, 8012030 <_strtod_l+0x188>
 8012028:	9a04      	ldr	r2, [sp, #16]
 801202a:	4302      	orrs	r2, r0
 801202c:	d094      	beq.n	8011f58 <_strtod_l+0xb0>
 801202e:	2600      	movs	r6, #0
 8012030:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012032:	1c6a      	adds	r2, r5, #1
 8012034:	9215      	str	r2, [sp, #84]	; 0x54
 8012036:	786a      	ldrb	r2, [r5, #1]
 8012038:	2a2b      	cmp	r2, #43	; 0x2b
 801203a:	d074      	beq.n	8012126 <_strtod_l+0x27e>
 801203c:	2a2d      	cmp	r2, #45	; 0x2d
 801203e:	d078      	beq.n	8012132 <_strtod_l+0x28a>
 8012040:	f04f 0c00 	mov.w	ip, #0
 8012044:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012048:	2909      	cmp	r1, #9
 801204a:	d97f      	bls.n	801214c <_strtod_l+0x2a4>
 801204c:	9515      	str	r5, [sp, #84]	; 0x54
 801204e:	2700      	movs	r7, #0
 8012050:	e09e      	b.n	8012190 <_strtod_l+0x2e8>
 8012052:	2300      	movs	r3, #0
 8012054:	e7c8      	b.n	8011fe8 <_strtod_l+0x140>
 8012056:	f1bb 0f08 	cmp.w	fp, #8
 801205a:	bfd8      	it	le
 801205c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801205e:	f100 0001 	add.w	r0, r0, #1
 8012062:	bfda      	itte	le
 8012064:	fb02 3301 	mlale	r3, r2, r1, r3
 8012068:	9309      	strle	r3, [sp, #36]	; 0x24
 801206a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801206e:	f10b 0b01 	add.w	fp, fp, #1
 8012072:	9015      	str	r0, [sp, #84]	; 0x54
 8012074:	e7c1      	b.n	8011ffa <_strtod_l+0x152>
 8012076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	9215      	str	r2, [sp, #84]	; 0x54
 801207c:	785a      	ldrb	r2, [r3, #1]
 801207e:	f1bb 0f00 	cmp.w	fp, #0
 8012082:	d037      	beq.n	80120f4 <_strtod_l+0x24c>
 8012084:	9005      	str	r0, [sp, #20]
 8012086:	465e      	mov	r6, fp
 8012088:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801208c:	2b09      	cmp	r3, #9
 801208e:	d912      	bls.n	80120b6 <_strtod_l+0x20e>
 8012090:	2301      	movs	r3, #1
 8012092:	e7c4      	b.n	801201e <_strtod_l+0x176>
 8012094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012096:	1c5a      	adds	r2, r3, #1
 8012098:	9215      	str	r2, [sp, #84]	; 0x54
 801209a:	785a      	ldrb	r2, [r3, #1]
 801209c:	3001      	adds	r0, #1
 801209e:	2a30      	cmp	r2, #48	; 0x30
 80120a0:	d0f8      	beq.n	8012094 <_strtod_l+0x1ec>
 80120a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80120a6:	2b08      	cmp	r3, #8
 80120a8:	f200 84c1 	bhi.w	8012a2e <_strtod_l+0xb86>
 80120ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120ae:	9005      	str	r0, [sp, #20]
 80120b0:	2000      	movs	r0, #0
 80120b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80120b4:	4606      	mov	r6, r0
 80120b6:	3a30      	subs	r2, #48	; 0x30
 80120b8:	f100 0301 	add.w	r3, r0, #1
 80120bc:	d014      	beq.n	80120e8 <_strtod_l+0x240>
 80120be:	9905      	ldr	r1, [sp, #20]
 80120c0:	4419      	add	r1, r3
 80120c2:	9105      	str	r1, [sp, #20]
 80120c4:	4633      	mov	r3, r6
 80120c6:	eb00 0c06 	add.w	ip, r0, r6
 80120ca:	210a      	movs	r1, #10
 80120cc:	4563      	cmp	r3, ip
 80120ce:	d113      	bne.n	80120f8 <_strtod_l+0x250>
 80120d0:	1833      	adds	r3, r6, r0
 80120d2:	2b08      	cmp	r3, #8
 80120d4:	f106 0601 	add.w	r6, r6, #1
 80120d8:	4406      	add	r6, r0
 80120da:	dc1a      	bgt.n	8012112 <_strtod_l+0x26a>
 80120dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120de:	230a      	movs	r3, #10
 80120e0:	fb03 2301 	mla	r3, r3, r1, r2
 80120e4:	9309      	str	r3, [sp, #36]	; 0x24
 80120e6:	2300      	movs	r3, #0
 80120e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120ea:	1c51      	adds	r1, r2, #1
 80120ec:	9115      	str	r1, [sp, #84]	; 0x54
 80120ee:	7852      	ldrb	r2, [r2, #1]
 80120f0:	4618      	mov	r0, r3
 80120f2:	e7c9      	b.n	8012088 <_strtod_l+0x1e0>
 80120f4:	4658      	mov	r0, fp
 80120f6:	e7d2      	b.n	801209e <_strtod_l+0x1f6>
 80120f8:	2b08      	cmp	r3, #8
 80120fa:	f103 0301 	add.w	r3, r3, #1
 80120fe:	dc03      	bgt.n	8012108 <_strtod_l+0x260>
 8012100:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012102:	434f      	muls	r7, r1
 8012104:	9709      	str	r7, [sp, #36]	; 0x24
 8012106:	e7e1      	b.n	80120cc <_strtod_l+0x224>
 8012108:	2b10      	cmp	r3, #16
 801210a:	bfd8      	it	le
 801210c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012110:	e7dc      	b.n	80120cc <_strtod_l+0x224>
 8012112:	2e10      	cmp	r6, #16
 8012114:	bfdc      	itt	le
 8012116:	230a      	movle	r3, #10
 8012118:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801211c:	e7e3      	b.n	80120e6 <_strtod_l+0x23e>
 801211e:	2300      	movs	r3, #0
 8012120:	9305      	str	r3, [sp, #20]
 8012122:	2301      	movs	r3, #1
 8012124:	e780      	b.n	8012028 <_strtod_l+0x180>
 8012126:	f04f 0c00 	mov.w	ip, #0
 801212a:	1caa      	adds	r2, r5, #2
 801212c:	9215      	str	r2, [sp, #84]	; 0x54
 801212e:	78aa      	ldrb	r2, [r5, #2]
 8012130:	e788      	b.n	8012044 <_strtod_l+0x19c>
 8012132:	f04f 0c01 	mov.w	ip, #1
 8012136:	e7f8      	b.n	801212a <_strtod_l+0x282>
 8012138:	080153d8 	.word	0x080153d8
 801213c:	080153d4 	.word	0x080153d4
 8012140:	7ff00000 	.word	0x7ff00000
 8012144:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012146:	1c51      	adds	r1, r2, #1
 8012148:	9115      	str	r1, [sp, #84]	; 0x54
 801214a:	7852      	ldrb	r2, [r2, #1]
 801214c:	2a30      	cmp	r2, #48	; 0x30
 801214e:	d0f9      	beq.n	8012144 <_strtod_l+0x29c>
 8012150:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012154:	2908      	cmp	r1, #8
 8012156:	f63f af7a 	bhi.w	801204e <_strtod_l+0x1a6>
 801215a:	3a30      	subs	r2, #48	; 0x30
 801215c:	9208      	str	r2, [sp, #32]
 801215e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012160:	920c      	str	r2, [sp, #48]	; 0x30
 8012162:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012164:	1c57      	adds	r7, r2, #1
 8012166:	9715      	str	r7, [sp, #84]	; 0x54
 8012168:	7852      	ldrb	r2, [r2, #1]
 801216a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801216e:	f1be 0f09 	cmp.w	lr, #9
 8012172:	d938      	bls.n	80121e6 <_strtod_l+0x33e>
 8012174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012176:	1a7f      	subs	r7, r7, r1
 8012178:	2f08      	cmp	r7, #8
 801217a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801217e:	dc03      	bgt.n	8012188 <_strtod_l+0x2e0>
 8012180:	9908      	ldr	r1, [sp, #32]
 8012182:	428f      	cmp	r7, r1
 8012184:	bfa8      	it	ge
 8012186:	460f      	movge	r7, r1
 8012188:	f1bc 0f00 	cmp.w	ip, #0
 801218c:	d000      	beq.n	8012190 <_strtod_l+0x2e8>
 801218e:	427f      	negs	r7, r7
 8012190:	2e00      	cmp	r6, #0
 8012192:	d14f      	bne.n	8012234 <_strtod_l+0x38c>
 8012194:	9904      	ldr	r1, [sp, #16]
 8012196:	4301      	orrs	r1, r0
 8012198:	f47f aec1 	bne.w	8011f1e <_strtod_l+0x76>
 801219c:	2b00      	cmp	r3, #0
 801219e:	f47f aedb 	bne.w	8011f58 <_strtod_l+0xb0>
 80121a2:	2a69      	cmp	r2, #105	; 0x69
 80121a4:	d029      	beq.n	80121fa <_strtod_l+0x352>
 80121a6:	dc26      	bgt.n	80121f6 <_strtod_l+0x34e>
 80121a8:	2a49      	cmp	r2, #73	; 0x49
 80121aa:	d026      	beq.n	80121fa <_strtod_l+0x352>
 80121ac:	2a4e      	cmp	r2, #78	; 0x4e
 80121ae:	f47f aed3 	bne.w	8011f58 <_strtod_l+0xb0>
 80121b2:	499b      	ldr	r1, [pc, #620]	; (8012420 <_strtod_l+0x578>)
 80121b4:	a815      	add	r0, sp, #84	; 0x54
 80121b6:	f001 fbff 	bl	80139b8 <__match>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	f43f aecc 	beq.w	8011f58 <_strtod_l+0xb0>
 80121c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	2b28      	cmp	r3, #40	; 0x28
 80121c6:	d12f      	bne.n	8012228 <_strtod_l+0x380>
 80121c8:	4996      	ldr	r1, [pc, #600]	; (8012424 <_strtod_l+0x57c>)
 80121ca:	aa18      	add	r2, sp, #96	; 0x60
 80121cc:	a815      	add	r0, sp, #84	; 0x54
 80121ce:	f001 fc07 	bl	80139e0 <__hexnan>
 80121d2:	2805      	cmp	r0, #5
 80121d4:	d128      	bne.n	8012228 <_strtod_l+0x380>
 80121d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80121d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80121dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80121e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80121e4:	e69b      	b.n	8011f1e <_strtod_l+0x76>
 80121e6:	9f08      	ldr	r7, [sp, #32]
 80121e8:	210a      	movs	r1, #10
 80121ea:	fb01 2107 	mla	r1, r1, r7, r2
 80121ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80121f2:	9208      	str	r2, [sp, #32]
 80121f4:	e7b5      	b.n	8012162 <_strtod_l+0x2ba>
 80121f6:	2a6e      	cmp	r2, #110	; 0x6e
 80121f8:	e7d9      	b.n	80121ae <_strtod_l+0x306>
 80121fa:	498b      	ldr	r1, [pc, #556]	; (8012428 <_strtod_l+0x580>)
 80121fc:	a815      	add	r0, sp, #84	; 0x54
 80121fe:	f001 fbdb 	bl	80139b8 <__match>
 8012202:	2800      	cmp	r0, #0
 8012204:	f43f aea8 	beq.w	8011f58 <_strtod_l+0xb0>
 8012208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801220a:	4988      	ldr	r1, [pc, #544]	; (801242c <_strtod_l+0x584>)
 801220c:	3b01      	subs	r3, #1
 801220e:	a815      	add	r0, sp, #84	; 0x54
 8012210:	9315      	str	r3, [sp, #84]	; 0x54
 8012212:	f001 fbd1 	bl	80139b8 <__match>
 8012216:	b910      	cbnz	r0, 801221e <_strtod_l+0x376>
 8012218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801221a:	3301      	adds	r3, #1
 801221c:	9315      	str	r3, [sp, #84]	; 0x54
 801221e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801243c <_strtod_l+0x594>
 8012222:	f04f 0800 	mov.w	r8, #0
 8012226:	e67a      	b.n	8011f1e <_strtod_l+0x76>
 8012228:	4881      	ldr	r0, [pc, #516]	; (8012430 <_strtod_l+0x588>)
 801222a:	f001 f8e1 	bl	80133f0 <nan>
 801222e:	ec59 8b10 	vmov	r8, r9, d0
 8012232:	e674      	b.n	8011f1e <_strtod_l+0x76>
 8012234:	9b05      	ldr	r3, [sp, #20]
 8012236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012238:	1afb      	subs	r3, r7, r3
 801223a:	f1bb 0f00 	cmp.w	fp, #0
 801223e:	bf08      	it	eq
 8012240:	46b3      	moveq	fp, r6
 8012242:	2e10      	cmp	r6, #16
 8012244:	9308      	str	r3, [sp, #32]
 8012246:	4635      	mov	r5, r6
 8012248:	bfa8      	it	ge
 801224a:	2510      	movge	r5, #16
 801224c:	f7ee f95a 	bl	8000504 <__aeabi_ui2d>
 8012250:	2e09      	cmp	r6, #9
 8012252:	4680      	mov	r8, r0
 8012254:	4689      	mov	r9, r1
 8012256:	dd13      	ble.n	8012280 <_strtod_l+0x3d8>
 8012258:	4b76      	ldr	r3, [pc, #472]	; (8012434 <_strtod_l+0x58c>)
 801225a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801225e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012262:	f7ee f9c9 	bl	80005f8 <__aeabi_dmul>
 8012266:	4680      	mov	r8, r0
 8012268:	4650      	mov	r0, sl
 801226a:	4689      	mov	r9, r1
 801226c:	f7ee f94a 	bl	8000504 <__aeabi_ui2d>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4640      	mov	r0, r8
 8012276:	4649      	mov	r1, r9
 8012278:	f7ee f808 	bl	800028c <__adddf3>
 801227c:	4680      	mov	r8, r0
 801227e:	4689      	mov	r9, r1
 8012280:	2e0f      	cmp	r6, #15
 8012282:	dc38      	bgt.n	80122f6 <_strtod_l+0x44e>
 8012284:	9b08      	ldr	r3, [sp, #32]
 8012286:	2b00      	cmp	r3, #0
 8012288:	f43f ae49 	beq.w	8011f1e <_strtod_l+0x76>
 801228c:	dd24      	ble.n	80122d8 <_strtod_l+0x430>
 801228e:	2b16      	cmp	r3, #22
 8012290:	dc0b      	bgt.n	80122aa <_strtod_l+0x402>
 8012292:	4968      	ldr	r1, [pc, #416]	; (8012434 <_strtod_l+0x58c>)
 8012294:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012298:	e9d1 0100 	ldrd	r0, r1, [r1]
 801229c:	4642      	mov	r2, r8
 801229e:	464b      	mov	r3, r9
 80122a0:	f7ee f9aa 	bl	80005f8 <__aeabi_dmul>
 80122a4:	4680      	mov	r8, r0
 80122a6:	4689      	mov	r9, r1
 80122a8:	e639      	b.n	8011f1e <_strtod_l+0x76>
 80122aa:	9a08      	ldr	r2, [sp, #32]
 80122ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80122b0:	4293      	cmp	r3, r2
 80122b2:	db20      	blt.n	80122f6 <_strtod_l+0x44e>
 80122b4:	4c5f      	ldr	r4, [pc, #380]	; (8012434 <_strtod_l+0x58c>)
 80122b6:	f1c6 060f 	rsb	r6, r6, #15
 80122ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80122be:	4642      	mov	r2, r8
 80122c0:	464b      	mov	r3, r9
 80122c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122c6:	f7ee f997 	bl	80005f8 <__aeabi_dmul>
 80122ca:	9b08      	ldr	r3, [sp, #32]
 80122cc:	1b9e      	subs	r6, r3, r6
 80122ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80122d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80122d6:	e7e3      	b.n	80122a0 <_strtod_l+0x3f8>
 80122d8:	9b08      	ldr	r3, [sp, #32]
 80122da:	3316      	adds	r3, #22
 80122dc:	db0b      	blt.n	80122f6 <_strtod_l+0x44e>
 80122de:	9b05      	ldr	r3, [sp, #20]
 80122e0:	1bdf      	subs	r7, r3, r7
 80122e2:	4b54      	ldr	r3, [pc, #336]	; (8012434 <_strtod_l+0x58c>)
 80122e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80122e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122ec:	4640      	mov	r0, r8
 80122ee:	4649      	mov	r1, r9
 80122f0:	f7ee faac 	bl	800084c <__aeabi_ddiv>
 80122f4:	e7d6      	b.n	80122a4 <_strtod_l+0x3fc>
 80122f6:	9b08      	ldr	r3, [sp, #32]
 80122f8:	1b75      	subs	r5, r6, r5
 80122fa:	441d      	add	r5, r3
 80122fc:	2d00      	cmp	r5, #0
 80122fe:	dd70      	ble.n	80123e2 <_strtod_l+0x53a>
 8012300:	f015 030f 	ands.w	r3, r5, #15
 8012304:	d00a      	beq.n	801231c <_strtod_l+0x474>
 8012306:	494b      	ldr	r1, [pc, #300]	; (8012434 <_strtod_l+0x58c>)
 8012308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801230c:	4642      	mov	r2, r8
 801230e:	464b      	mov	r3, r9
 8012310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012314:	f7ee f970 	bl	80005f8 <__aeabi_dmul>
 8012318:	4680      	mov	r8, r0
 801231a:	4689      	mov	r9, r1
 801231c:	f035 050f 	bics.w	r5, r5, #15
 8012320:	d04d      	beq.n	80123be <_strtod_l+0x516>
 8012322:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012326:	dd22      	ble.n	801236e <_strtod_l+0x4c6>
 8012328:	2500      	movs	r5, #0
 801232a:	46ab      	mov	fp, r5
 801232c:	9509      	str	r5, [sp, #36]	; 0x24
 801232e:	9505      	str	r5, [sp, #20]
 8012330:	2322      	movs	r3, #34	; 0x22
 8012332:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801243c <_strtod_l+0x594>
 8012336:	6023      	str	r3, [r4, #0]
 8012338:	f04f 0800 	mov.w	r8, #0
 801233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	f43f aded 	beq.w	8011f1e <_strtod_l+0x76>
 8012344:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012346:	4620      	mov	r0, r4
 8012348:	f7ff f924 	bl	8011594 <_Bfree>
 801234c:	9905      	ldr	r1, [sp, #20]
 801234e:	4620      	mov	r0, r4
 8012350:	f7ff f920 	bl	8011594 <_Bfree>
 8012354:	4659      	mov	r1, fp
 8012356:	4620      	mov	r0, r4
 8012358:	f7ff f91c 	bl	8011594 <_Bfree>
 801235c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801235e:	4620      	mov	r0, r4
 8012360:	f7ff f918 	bl	8011594 <_Bfree>
 8012364:	4629      	mov	r1, r5
 8012366:	4620      	mov	r0, r4
 8012368:	f7ff f914 	bl	8011594 <_Bfree>
 801236c:	e5d7      	b.n	8011f1e <_strtod_l+0x76>
 801236e:	4b32      	ldr	r3, [pc, #200]	; (8012438 <_strtod_l+0x590>)
 8012370:	9304      	str	r3, [sp, #16]
 8012372:	2300      	movs	r3, #0
 8012374:	112d      	asrs	r5, r5, #4
 8012376:	4640      	mov	r0, r8
 8012378:	4649      	mov	r1, r9
 801237a:	469a      	mov	sl, r3
 801237c:	2d01      	cmp	r5, #1
 801237e:	dc21      	bgt.n	80123c4 <_strtod_l+0x51c>
 8012380:	b10b      	cbz	r3, 8012386 <_strtod_l+0x4de>
 8012382:	4680      	mov	r8, r0
 8012384:	4689      	mov	r9, r1
 8012386:	492c      	ldr	r1, [pc, #176]	; (8012438 <_strtod_l+0x590>)
 8012388:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801238c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012390:	4642      	mov	r2, r8
 8012392:	464b      	mov	r3, r9
 8012394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012398:	f7ee f92e 	bl	80005f8 <__aeabi_dmul>
 801239c:	4b27      	ldr	r3, [pc, #156]	; (801243c <_strtod_l+0x594>)
 801239e:	460a      	mov	r2, r1
 80123a0:	400b      	ands	r3, r1
 80123a2:	4927      	ldr	r1, [pc, #156]	; (8012440 <_strtod_l+0x598>)
 80123a4:	428b      	cmp	r3, r1
 80123a6:	4680      	mov	r8, r0
 80123a8:	d8be      	bhi.n	8012328 <_strtod_l+0x480>
 80123aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80123ae:	428b      	cmp	r3, r1
 80123b0:	bf86      	itte	hi
 80123b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8012444 <_strtod_l+0x59c>
 80123b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80123ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80123be:	2300      	movs	r3, #0
 80123c0:	9304      	str	r3, [sp, #16]
 80123c2:	e07b      	b.n	80124bc <_strtod_l+0x614>
 80123c4:	07ea      	lsls	r2, r5, #31
 80123c6:	d505      	bpl.n	80123d4 <_strtod_l+0x52c>
 80123c8:	9b04      	ldr	r3, [sp, #16]
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ee f913 	bl	80005f8 <__aeabi_dmul>
 80123d2:	2301      	movs	r3, #1
 80123d4:	9a04      	ldr	r2, [sp, #16]
 80123d6:	3208      	adds	r2, #8
 80123d8:	f10a 0a01 	add.w	sl, sl, #1
 80123dc:	106d      	asrs	r5, r5, #1
 80123de:	9204      	str	r2, [sp, #16]
 80123e0:	e7cc      	b.n	801237c <_strtod_l+0x4d4>
 80123e2:	d0ec      	beq.n	80123be <_strtod_l+0x516>
 80123e4:	426d      	negs	r5, r5
 80123e6:	f015 020f 	ands.w	r2, r5, #15
 80123ea:	d00a      	beq.n	8012402 <_strtod_l+0x55a>
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <_strtod_l+0x58c>)
 80123ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123f2:	4640      	mov	r0, r8
 80123f4:	4649      	mov	r1, r9
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	f7ee fa27 	bl	800084c <__aeabi_ddiv>
 80123fe:	4680      	mov	r8, r0
 8012400:	4689      	mov	r9, r1
 8012402:	112d      	asrs	r5, r5, #4
 8012404:	d0db      	beq.n	80123be <_strtod_l+0x516>
 8012406:	2d1f      	cmp	r5, #31
 8012408:	dd1e      	ble.n	8012448 <_strtod_l+0x5a0>
 801240a:	2500      	movs	r5, #0
 801240c:	46ab      	mov	fp, r5
 801240e:	9509      	str	r5, [sp, #36]	; 0x24
 8012410:	9505      	str	r5, [sp, #20]
 8012412:	2322      	movs	r3, #34	; 0x22
 8012414:	f04f 0800 	mov.w	r8, #0
 8012418:	f04f 0900 	mov.w	r9, #0
 801241c:	6023      	str	r3, [r4, #0]
 801241e:	e78d      	b.n	801233c <_strtod_l+0x494>
 8012420:	080151c1 	.word	0x080151c1
 8012424:	080153ec 	.word	0x080153ec
 8012428:	080151b9 	.word	0x080151b9
 801242c:	080151f0 	.word	0x080151f0
 8012430:	0801557d 	.word	0x0801557d
 8012434:	08015300 	.word	0x08015300
 8012438:	080152d8 	.word	0x080152d8
 801243c:	7ff00000 	.word	0x7ff00000
 8012440:	7ca00000 	.word	0x7ca00000
 8012444:	7fefffff 	.word	0x7fefffff
 8012448:	f015 0310 	ands.w	r3, r5, #16
 801244c:	bf18      	it	ne
 801244e:	236a      	movne	r3, #106	; 0x6a
 8012450:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80127f4 <_strtod_l+0x94c>
 8012454:	9304      	str	r3, [sp, #16]
 8012456:	4640      	mov	r0, r8
 8012458:	4649      	mov	r1, r9
 801245a:	2300      	movs	r3, #0
 801245c:	07ea      	lsls	r2, r5, #31
 801245e:	d504      	bpl.n	801246a <_strtod_l+0x5c2>
 8012460:	e9da 2300 	ldrd	r2, r3, [sl]
 8012464:	f7ee f8c8 	bl	80005f8 <__aeabi_dmul>
 8012468:	2301      	movs	r3, #1
 801246a:	106d      	asrs	r5, r5, #1
 801246c:	f10a 0a08 	add.w	sl, sl, #8
 8012470:	d1f4      	bne.n	801245c <_strtod_l+0x5b4>
 8012472:	b10b      	cbz	r3, 8012478 <_strtod_l+0x5d0>
 8012474:	4680      	mov	r8, r0
 8012476:	4689      	mov	r9, r1
 8012478:	9b04      	ldr	r3, [sp, #16]
 801247a:	b1bb      	cbz	r3, 80124ac <_strtod_l+0x604>
 801247c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012480:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012484:	2b00      	cmp	r3, #0
 8012486:	4649      	mov	r1, r9
 8012488:	dd10      	ble.n	80124ac <_strtod_l+0x604>
 801248a:	2b1f      	cmp	r3, #31
 801248c:	f340 811e 	ble.w	80126cc <_strtod_l+0x824>
 8012490:	2b34      	cmp	r3, #52	; 0x34
 8012492:	bfde      	ittt	le
 8012494:	f04f 33ff 	movle.w	r3, #4294967295
 8012498:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801249c:	4093      	lslle	r3, r2
 801249e:	f04f 0800 	mov.w	r8, #0
 80124a2:	bfcc      	ite	gt
 80124a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80124a8:	ea03 0901 	andle.w	r9, r3, r1
 80124ac:	2200      	movs	r2, #0
 80124ae:	2300      	movs	r3, #0
 80124b0:	4640      	mov	r0, r8
 80124b2:	4649      	mov	r1, r9
 80124b4:	f7ee fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	d1a6      	bne.n	801240a <_strtod_l+0x562>
 80124bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80124c2:	4633      	mov	r3, r6
 80124c4:	465a      	mov	r2, fp
 80124c6:	4620      	mov	r0, r4
 80124c8:	f7ff f8cc 	bl	8011664 <__s2b>
 80124cc:	9009      	str	r0, [sp, #36]	; 0x24
 80124ce:	2800      	cmp	r0, #0
 80124d0:	f43f af2a 	beq.w	8012328 <_strtod_l+0x480>
 80124d4:	9a08      	ldr	r2, [sp, #32]
 80124d6:	9b05      	ldr	r3, [sp, #20]
 80124d8:	2a00      	cmp	r2, #0
 80124da:	eba3 0307 	sub.w	r3, r3, r7
 80124de:	bfa8      	it	ge
 80124e0:	2300      	movge	r3, #0
 80124e2:	930c      	str	r3, [sp, #48]	; 0x30
 80124e4:	2500      	movs	r5, #0
 80124e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80124ea:	9312      	str	r3, [sp, #72]	; 0x48
 80124ec:	46ab      	mov	fp, r5
 80124ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f0:	4620      	mov	r0, r4
 80124f2:	6859      	ldr	r1, [r3, #4]
 80124f4:	f7ff f80e 	bl	8011514 <_Balloc>
 80124f8:	9005      	str	r0, [sp, #20]
 80124fa:	2800      	cmp	r0, #0
 80124fc:	f43f af18 	beq.w	8012330 <_strtod_l+0x488>
 8012500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012502:	691a      	ldr	r2, [r3, #16]
 8012504:	3202      	adds	r2, #2
 8012506:	f103 010c 	add.w	r1, r3, #12
 801250a:	0092      	lsls	r2, r2, #2
 801250c:	300c      	adds	r0, #12
 801250e:	f000 ff61 	bl	80133d4 <memcpy>
 8012512:	ec49 8b10 	vmov	d0, r8, r9
 8012516:	aa18      	add	r2, sp, #96	; 0x60
 8012518:	a917      	add	r1, sp, #92	; 0x5c
 801251a:	4620      	mov	r0, r4
 801251c:	f7ff fbd6 	bl	8011ccc <__d2b>
 8012520:	ec49 8b18 	vmov	d8, r8, r9
 8012524:	9016      	str	r0, [sp, #88]	; 0x58
 8012526:	2800      	cmp	r0, #0
 8012528:	f43f af02 	beq.w	8012330 <_strtod_l+0x488>
 801252c:	2101      	movs	r1, #1
 801252e:	4620      	mov	r0, r4
 8012530:	f7ff f930 	bl	8011794 <__i2b>
 8012534:	4683      	mov	fp, r0
 8012536:	2800      	cmp	r0, #0
 8012538:	f43f aefa 	beq.w	8012330 <_strtod_l+0x488>
 801253c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801253e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012540:	2e00      	cmp	r6, #0
 8012542:	bfab      	itete	ge
 8012544:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8012546:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801254a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801254e:	bfac      	ite	ge
 8012550:	eb06 0a03 	addge.w	sl, r6, r3
 8012554:	1b9f      	sublt	r7, r3, r6
 8012556:	9b04      	ldr	r3, [sp, #16]
 8012558:	1af6      	subs	r6, r6, r3
 801255a:	4416      	add	r6, r2
 801255c:	4ba0      	ldr	r3, [pc, #640]	; (80127e0 <_strtod_l+0x938>)
 801255e:	3e01      	subs	r6, #1
 8012560:	429e      	cmp	r6, r3
 8012562:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012566:	f280 80c4 	bge.w	80126f2 <_strtod_l+0x84a>
 801256a:	1b9b      	subs	r3, r3, r6
 801256c:	2b1f      	cmp	r3, #31
 801256e:	eba2 0203 	sub.w	r2, r2, r3
 8012572:	f04f 0101 	mov.w	r1, #1
 8012576:	f300 80b0 	bgt.w	80126da <_strtod_l+0x832>
 801257a:	fa01 f303 	lsl.w	r3, r1, r3
 801257e:	930e      	str	r3, [sp, #56]	; 0x38
 8012580:	2300      	movs	r3, #0
 8012582:	930d      	str	r3, [sp, #52]	; 0x34
 8012584:	eb0a 0602 	add.w	r6, sl, r2
 8012588:	9b04      	ldr	r3, [sp, #16]
 801258a:	45b2      	cmp	sl, r6
 801258c:	4417      	add	r7, r2
 801258e:	441f      	add	r7, r3
 8012590:	4653      	mov	r3, sl
 8012592:	bfa8      	it	ge
 8012594:	4633      	movge	r3, r6
 8012596:	42bb      	cmp	r3, r7
 8012598:	bfa8      	it	ge
 801259a:	463b      	movge	r3, r7
 801259c:	2b00      	cmp	r3, #0
 801259e:	bfc2      	ittt	gt
 80125a0:	1af6      	subgt	r6, r6, r3
 80125a2:	1aff      	subgt	r7, r7, r3
 80125a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80125a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	dd17      	ble.n	80125de <_strtod_l+0x736>
 80125ae:	4659      	mov	r1, fp
 80125b0:	461a      	mov	r2, r3
 80125b2:	4620      	mov	r0, r4
 80125b4:	f7ff f9ae 	bl	8011914 <__pow5mult>
 80125b8:	4683      	mov	fp, r0
 80125ba:	2800      	cmp	r0, #0
 80125bc:	f43f aeb8 	beq.w	8012330 <_strtod_l+0x488>
 80125c0:	4601      	mov	r1, r0
 80125c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80125c4:	4620      	mov	r0, r4
 80125c6:	f7ff f8fb 	bl	80117c0 <__multiply>
 80125ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80125cc:	2800      	cmp	r0, #0
 80125ce:	f43f aeaf 	beq.w	8012330 <_strtod_l+0x488>
 80125d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80125d4:	4620      	mov	r0, r4
 80125d6:	f7fe ffdd 	bl	8011594 <_Bfree>
 80125da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125dc:	9316      	str	r3, [sp, #88]	; 0x58
 80125de:	2e00      	cmp	r6, #0
 80125e0:	f300 808c 	bgt.w	80126fc <_strtod_l+0x854>
 80125e4:	9b08      	ldr	r3, [sp, #32]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	dd08      	ble.n	80125fc <_strtod_l+0x754>
 80125ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125ec:	9905      	ldr	r1, [sp, #20]
 80125ee:	4620      	mov	r0, r4
 80125f0:	f7ff f990 	bl	8011914 <__pow5mult>
 80125f4:	9005      	str	r0, [sp, #20]
 80125f6:	2800      	cmp	r0, #0
 80125f8:	f43f ae9a 	beq.w	8012330 <_strtod_l+0x488>
 80125fc:	2f00      	cmp	r7, #0
 80125fe:	dd08      	ble.n	8012612 <_strtod_l+0x76a>
 8012600:	9905      	ldr	r1, [sp, #20]
 8012602:	463a      	mov	r2, r7
 8012604:	4620      	mov	r0, r4
 8012606:	f7ff f9df 	bl	80119c8 <__lshift>
 801260a:	9005      	str	r0, [sp, #20]
 801260c:	2800      	cmp	r0, #0
 801260e:	f43f ae8f 	beq.w	8012330 <_strtod_l+0x488>
 8012612:	f1ba 0f00 	cmp.w	sl, #0
 8012616:	dd08      	ble.n	801262a <_strtod_l+0x782>
 8012618:	4659      	mov	r1, fp
 801261a:	4652      	mov	r2, sl
 801261c:	4620      	mov	r0, r4
 801261e:	f7ff f9d3 	bl	80119c8 <__lshift>
 8012622:	4683      	mov	fp, r0
 8012624:	2800      	cmp	r0, #0
 8012626:	f43f ae83 	beq.w	8012330 <_strtod_l+0x488>
 801262a:	9a05      	ldr	r2, [sp, #20]
 801262c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801262e:	4620      	mov	r0, r4
 8012630:	f7ff fa52 	bl	8011ad8 <__mdiff>
 8012634:	4605      	mov	r5, r0
 8012636:	2800      	cmp	r0, #0
 8012638:	f43f ae7a 	beq.w	8012330 <_strtod_l+0x488>
 801263c:	68c3      	ldr	r3, [r0, #12]
 801263e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012640:	2300      	movs	r3, #0
 8012642:	60c3      	str	r3, [r0, #12]
 8012644:	4659      	mov	r1, fp
 8012646:	f7ff fa2b 	bl	8011aa0 <__mcmp>
 801264a:	2800      	cmp	r0, #0
 801264c:	da60      	bge.n	8012710 <_strtod_l+0x868>
 801264e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012650:	ea53 0308 	orrs.w	r3, r3, r8
 8012654:	f040 8084 	bne.w	8012760 <_strtod_l+0x8b8>
 8012658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801265c:	2b00      	cmp	r3, #0
 801265e:	d17f      	bne.n	8012760 <_strtod_l+0x8b8>
 8012660:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012664:	0d1b      	lsrs	r3, r3, #20
 8012666:	051b      	lsls	r3, r3, #20
 8012668:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801266c:	d978      	bls.n	8012760 <_strtod_l+0x8b8>
 801266e:	696b      	ldr	r3, [r5, #20]
 8012670:	b913      	cbnz	r3, 8012678 <_strtod_l+0x7d0>
 8012672:	692b      	ldr	r3, [r5, #16]
 8012674:	2b01      	cmp	r3, #1
 8012676:	dd73      	ble.n	8012760 <_strtod_l+0x8b8>
 8012678:	4629      	mov	r1, r5
 801267a:	2201      	movs	r2, #1
 801267c:	4620      	mov	r0, r4
 801267e:	f7ff f9a3 	bl	80119c8 <__lshift>
 8012682:	4659      	mov	r1, fp
 8012684:	4605      	mov	r5, r0
 8012686:	f7ff fa0b 	bl	8011aa0 <__mcmp>
 801268a:	2800      	cmp	r0, #0
 801268c:	dd68      	ble.n	8012760 <_strtod_l+0x8b8>
 801268e:	9904      	ldr	r1, [sp, #16]
 8012690:	4a54      	ldr	r2, [pc, #336]	; (80127e4 <_strtod_l+0x93c>)
 8012692:	464b      	mov	r3, r9
 8012694:	2900      	cmp	r1, #0
 8012696:	f000 8084 	beq.w	80127a2 <_strtod_l+0x8fa>
 801269a:	ea02 0109 	and.w	r1, r2, r9
 801269e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80126a2:	dc7e      	bgt.n	80127a2 <_strtod_l+0x8fa>
 80126a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80126a8:	f77f aeb3 	ble.w	8012412 <_strtod_l+0x56a>
 80126ac:	4b4e      	ldr	r3, [pc, #312]	; (80127e8 <_strtod_l+0x940>)
 80126ae:	4640      	mov	r0, r8
 80126b0:	4649      	mov	r1, r9
 80126b2:	2200      	movs	r2, #0
 80126b4:	f7ed ffa0 	bl	80005f8 <__aeabi_dmul>
 80126b8:	4b4a      	ldr	r3, [pc, #296]	; (80127e4 <_strtod_l+0x93c>)
 80126ba:	400b      	ands	r3, r1
 80126bc:	4680      	mov	r8, r0
 80126be:	4689      	mov	r9, r1
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	f47f ae3f 	bne.w	8012344 <_strtod_l+0x49c>
 80126c6:	2322      	movs	r3, #34	; 0x22
 80126c8:	6023      	str	r3, [r4, #0]
 80126ca:	e63b      	b.n	8012344 <_strtod_l+0x49c>
 80126cc:	f04f 32ff 	mov.w	r2, #4294967295
 80126d0:	fa02 f303 	lsl.w	r3, r2, r3
 80126d4:	ea03 0808 	and.w	r8, r3, r8
 80126d8:	e6e8      	b.n	80124ac <_strtod_l+0x604>
 80126da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80126de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80126e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80126e6:	36e2      	adds	r6, #226	; 0xe2
 80126e8:	fa01 f306 	lsl.w	r3, r1, r6
 80126ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80126f0:	e748      	b.n	8012584 <_strtod_l+0x6dc>
 80126f2:	2100      	movs	r1, #0
 80126f4:	2301      	movs	r3, #1
 80126f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80126fa:	e743      	b.n	8012584 <_strtod_l+0x6dc>
 80126fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80126fe:	4632      	mov	r2, r6
 8012700:	4620      	mov	r0, r4
 8012702:	f7ff f961 	bl	80119c8 <__lshift>
 8012706:	9016      	str	r0, [sp, #88]	; 0x58
 8012708:	2800      	cmp	r0, #0
 801270a:	f47f af6b 	bne.w	80125e4 <_strtod_l+0x73c>
 801270e:	e60f      	b.n	8012330 <_strtod_l+0x488>
 8012710:	46ca      	mov	sl, r9
 8012712:	d171      	bne.n	80127f8 <_strtod_l+0x950>
 8012714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012716:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801271a:	b352      	cbz	r2, 8012772 <_strtod_l+0x8ca>
 801271c:	4a33      	ldr	r2, [pc, #204]	; (80127ec <_strtod_l+0x944>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d12a      	bne.n	8012778 <_strtod_l+0x8d0>
 8012722:	9b04      	ldr	r3, [sp, #16]
 8012724:	4641      	mov	r1, r8
 8012726:	b1fb      	cbz	r3, 8012768 <_strtod_l+0x8c0>
 8012728:	4b2e      	ldr	r3, [pc, #184]	; (80127e4 <_strtod_l+0x93c>)
 801272a:	ea09 0303 	and.w	r3, r9, r3
 801272e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012732:	f04f 32ff 	mov.w	r2, #4294967295
 8012736:	d81a      	bhi.n	801276e <_strtod_l+0x8c6>
 8012738:	0d1b      	lsrs	r3, r3, #20
 801273a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801273e:	fa02 f303 	lsl.w	r3, r2, r3
 8012742:	4299      	cmp	r1, r3
 8012744:	d118      	bne.n	8012778 <_strtod_l+0x8d0>
 8012746:	4b2a      	ldr	r3, [pc, #168]	; (80127f0 <_strtod_l+0x948>)
 8012748:	459a      	cmp	sl, r3
 801274a:	d102      	bne.n	8012752 <_strtod_l+0x8aa>
 801274c:	3101      	adds	r1, #1
 801274e:	f43f adef 	beq.w	8012330 <_strtod_l+0x488>
 8012752:	4b24      	ldr	r3, [pc, #144]	; (80127e4 <_strtod_l+0x93c>)
 8012754:	ea0a 0303 	and.w	r3, sl, r3
 8012758:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801275c:	f04f 0800 	mov.w	r8, #0
 8012760:	9b04      	ldr	r3, [sp, #16]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1a2      	bne.n	80126ac <_strtod_l+0x804>
 8012766:	e5ed      	b.n	8012344 <_strtod_l+0x49c>
 8012768:	f04f 33ff 	mov.w	r3, #4294967295
 801276c:	e7e9      	b.n	8012742 <_strtod_l+0x89a>
 801276e:	4613      	mov	r3, r2
 8012770:	e7e7      	b.n	8012742 <_strtod_l+0x89a>
 8012772:	ea53 0308 	orrs.w	r3, r3, r8
 8012776:	d08a      	beq.n	801268e <_strtod_l+0x7e6>
 8012778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801277a:	b1e3      	cbz	r3, 80127b6 <_strtod_l+0x90e>
 801277c:	ea13 0f0a 	tst.w	r3, sl
 8012780:	d0ee      	beq.n	8012760 <_strtod_l+0x8b8>
 8012782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012784:	9a04      	ldr	r2, [sp, #16]
 8012786:	4640      	mov	r0, r8
 8012788:	4649      	mov	r1, r9
 801278a:	b1c3      	cbz	r3, 80127be <_strtod_l+0x916>
 801278c:	f7ff fb6f 	bl	8011e6e <sulp>
 8012790:	4602      	mov	r2, r0
 8012792:	460b      	mov	r3, r1
 8012794:	ec51 0b18 	vmov	r0, r1, d8
 8012798:	f7ed fd78 	bl	800028c <__adddf3>
 801279c:	4680      	mov	r8, r0
 801279e:	4689      	mov	r9, r1
 80127a0:	e7de      	b.n	8012760 <_strtod_l+0x8b8>
 80127a2:	4013      	ands	r3, r2
 80127a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80127a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80127ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80127b0:	f04f 38ff 	mov.w	r8, #4294967295
 80127b4:	e7d4      	b.n	8012760 <_strtod_l+0x8b8>
 80127b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127b8:	ea13 0f08 	tst.w	r3, r8
 80127bc:	e7e0      	b.n	8012780 <_strtod_l+0x8d8>
 80127be:	f7ff fb56 	bl	8011e6e <sulp>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	ec51 0b18 	vmov	r0, r1, d8
 80127ca:	f7ed fd5d 	bl	8000288 <__aeabi_dsub>
 80127ce:	2200      	movs	r2, #0
 80127d0:	2300      	movs	r3, #0
 80127d2:	4680      	mov	r8, r0
 80127d4:	4689      	mov	r9, r1
 80127d6:	f7ee f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d0c0      	beq.n	8012760 <_strtod_l+0x8b8>
 80127de:	e618      	b.n	8012412 <_strtod_l+0x56a>
 80127e0:	fffffc02 	.word	0xfffffc02
 80127e4:	7ff00000 	.word	0x7ff00000
 80127e8:	39500000 	.word	0x39500000
 80127ec:	000fffff 	.word	0x000fffff
 80127f0:	7fefffff 	.word	0x7fefffff
 80127f4:	08015400 	.word	0x08015400
 80127f8:	4659      	mov	r1, fp
 80127fa:	4628      	mov	r0, r5
 80127fc:	f7ff fac0 	bl	8011d80 <__ratio>
 8012800:	ec57 6b10 	vmov	r6, r7, d0
 8012804:	ee10 0a10 	vmov	r0, s0
 8012808:	2200      	movs	r2, #0
 801280a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801280e:	4639      	mov	r1, r7
 8012810:	f7ee f96e 	bl	8000af0 <__aeabi_dcmple>
 8012814:	2800      	cmp	r0, #0
 8012816:	d071      	beq.n	80128fc <_strtod_l+0xa54>
 8012818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801281a:	2b00      	cmp	r3, #0
 801281c:	d17c      	bne.n	8012918 <_strtod_l+0xa70>
 801281e:	f1b8 0f00 	cmp.w	r8, #0
 8012822:	d15a      	bne.n	80128da <_strtod_l+0xa32>
 8012824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012828:	2b00      	cmp	r3, #0
 801282a:	d15d      	bne.n	80128e8 <_strtod_l+0xa40>
 801282c:	4b90      	ldr	r3, [pc, #576]	; (8012a70 <_strtod_l+0xbc8>)
 801282e:	2200      	movs	r2, #0
 8012830:	4630      	mov	r0, r6
 8012832:	4639      	mov	r1, r7
 8012834:	f7ee f952 	bl	8000adc <__aeabi_dcmplt>
 8012838:	2800      	cmp	r0, #0
 801283a:	d15c      	bne.n	80128f6 <_strtod_l+0xa4e>
 801283c:	4630      	mov	r0, r6
 801283e:	4639      	mov	r1, r7
 8012840:	4b8c      	ldr	r3, [pc, #560]	; (8012a74 <_strtod_l+0xbcc>)
 8012842:	2200      	movs	r2, #0
 8012844:	f7ed fed8 	bl	80005f8 <__aeabi_dmul>
 8012848:	4606      	mov	r6, r0
 801284a:	460f      	mov	r7, r1
 801284c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012850:	9606      	str	r6, [sp, #24]
 8012852:	9307      	str	r3, [sp, #28]
 8012854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012858:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801285c:	4b86      	ldr	r3, [pc, #536]	; (8012a78 <_strtod_l+0xbd0>)
 801285e:	ea0a 0303 	and.w	r3, sl, r3
 8012862:	930d      	str	r3, [sp, #52]	; 0x34
 8012864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012866:	4b85      	ldr	r3, [pc, #532]	; (8012a7c <_strtod_l+0xbd4>)
 8012868:	429a      	cmp	r2, r3
 801286a:	f040 8090 	bne.w	801298e <_strtod_l+0xae6>
 801286e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8012872:	ec49 8b10 	vmov	d0, r8, r9
 8012876:	f7ff f9b9 	bl	8011bec <__ulp>
 801287a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801287e:	ec51 0b10 	vmov	r0, r1, d0
 8012882:	f7ed feb9 	bl	80005f8 <__aeabi_dmul>
 8012886:	4642      	mov	r2, r8
 8012888:	464b      	mov	r3, r9
 801288a:	f7ed fcff 	bl	800028c <__adddf3>
 801288e:	460b      	mov	r3, r1
 8012890:	4979      	ldr	r1, [pc, #484]	; (8012a78 <_strtod_l+0xbd0>)
 8012892:	4a7b      	ldr	r2, [pc, #492]	; (8012a80 <_strtod_l+0xbd8>)
 8012894:	4019      	ands	r1, r3
 8012896:	4291      	cmp	r1, r2
 8012898:	4680      	mov	r8, r0
 801289a:	d944      	bls.n	8012926 <_strtod_l+0xa7e>
 801289c:	ee18 2a90 	vmov	r2, s17
 80128a0:	4b78      	ldr	r3, [pc, #480]	; (8012a84 <_strtod_l+0xbdc>)
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d104      	bne.n	80128b0 <_strtod_l+0xa08>
 80128a6:	ee18 3a10 	vmov	r3, s16
 80128aa:	3301      	adds	r3, #1
 80128ac:	f43f ad40 	beq.w	8012330 <_strtod_l+0x488>
 80128b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012a84 <_strtod_l+0xbdc>
 80128b4:	f04f 38ff 	mov.w	r8, #4294967295
 80128b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7fe fe6a 	bl	8011594 <_Bfree>
 80128c0:	9905      	ldr	r1, [sp, #20]
 80128c2:	4620      	mov	r0, r4
 80128c4:	f7fe fe66 	bl	8011594 <_Bfree>
 80128c8:	4659      	mov	r1, fp
 80128ca:	4620      	mov	r0, r4
 80128cc:	f7fe fe62 	bl	8011594 <_Bfree>
 80128d0:	4629      	mov	r1, r5
 80128d2:	4620      	mov	r0, r4
 80128d4:	f7fe fe5e 	bl	8011594 <_Bfree>
 80128d8:	e609      	b.n	80124ee <_strtod_l+0x646>
 80128da:	f1b8 0f01 	cmp.w	r8, #1
 80128de:	d103      	bne.n	80128e8 <_strtod_l+0xa40>
 80128e0:	f1b9 0f00 	cmp.w	r9, #0
 80128e4:	f43f ad95 	beq.w	8012412 <_strtod_l+0x56a>
 80128e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012a40 <_strtod_l+0xb98>
 80128ec:	4f60      	ldr	r7, [pc, #384]	; (8012a70 <_strtod_l+0xbc8>)
 80128ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128f2:	2600      	movs	r6, #0
 80128f4:	e7ae      	b.n	8012854 <_strtod_l+0x9ac>
 80128f6:	4f5f      	ldr	r7, [pc, #380]	; (8012a74 <_strtod_l+0xbcc>)
 80128f8:	2600      	movs	r6, #0
 80128fa:	e7a7      	b.n	801284c <_strtod_l+0x9a4>
 80128fc:	4b5d      	ldr	r3, [pc, #372]	; (8012a74 <_strtod_l+0xbcc>)
 80128fe:	4630      	mov	r0, r6
 8012900:	4639      	mov	r1, r7
 8012902:	2200      	movs	r2, #0
 8012904:	f7ed fe78 	bl	80005f8 <__aeabi_dmul>
 8012908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801290a:	4606      	mov	r6, r0
 801290c:	460f      	mov	r7, r1
 801290e:	2b00      	cmp	r3, #0
 8012910:	d09c      	beq.n	801284c <_strtod_l+0x9a4>
 8012912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012916:	e79d      	b.n	8012854 <_strtod_l+0x9ac>
 8012918:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012a48 <_strtod_l+0xba0>
 801291c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012920:	ec57 6b17 	vmov	r6, r7, d7
 8012924:	e796      	b.n	8012854 <_strtod_l+0x9ac>
 8012926:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801292a:	9b04      	ldr	r3, [sp, #16]
 801292c:	46ca      	mov	sl, r9
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1c2      	bne.n	80128b8 <_strtod_l+0xa10>
 8012932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012938:	0d1b      	lsrs	r3, r3, #20
 801293a:	051b      	lsls	r3, r3, #20
 801293c:	429a      	cmp	r2, r3
 801293e:	d1bb      	bne.n	80128b8 <_strtod_l+0xa10>
 8012940:	4630      	mov	r0, r6
 8012942:	4639      	mov	r1, r7
 8012944:	f7ee f9a0 	bl	8000c88 <__aeabi_d2lz>
 8012948:	f7ed fe28 	bl	800059c <__aeabi_l2d>
 801294c:	4602      	mov	r2, r0
 801294e:	460b      	mov	r3, r1
 8012950:	4630      	mov	r0, r6
 8012952:	4639      	mov	r1, r7
 8012954:	f7ed fc98 	bl	8000288 <__aeabi_dsub>
 8012958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801295a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801295e:	ea43 0308 	orr.w	r3, r3, r8
 8012962:	4313      	orrs	r3, r2
 8012964:	4606      	mov	r6, r0
 8012966:	460f      	mov	r7, r1
 8012968:	d054      	beq.n	8012a14 <_strtod_l+0xb6c>
 801296a:	a339      	add	r3, pc, #228	; (adr r3, 8012a50 <_strtod_l+0xba8>)
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	f7ee f8b4 	bl	8000adc <__aeabi_dcmplt>
 8012974:	2800      	cmp	r0, #0
 8012976:	f47f ace5 	bne.w	8012344 <_strtod_l+0x49c>
 801297a:	a337      	add	r3, pc, #220	; (adr r3, 8012a58 <_strtod_l+0xbb0>)
 801297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012980:	4630      	mov	r0, r6
 8012982:	4639      	mov	r1, r7
 8012984:	f7ee f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 8012988:	2800      	cmp	r0, #0
 801298a:	d095      	beq.n	80128b8 <_strtod_l+0xa10>
 801298c:	e4da      	b.n	8012344 <_strtod_l+0x49c>
 801298e:	9b04      	ldr	r3, [sp, #16]
 8012990:	b333      	cbz	r3, 80129e0 <_strtod_l+0xb38>
 8012992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012994:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012998:	d822      	bhi.n	80129e0 <_strtod_l+0xb38>
 801299a:	a331      	add	r3, pc, #196	; (adr r3, 8012a60 <_strtod_l+0xbb8>)
 801299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a0:	4630      	mov	r0, r6
 80129a2:	4639      	mov	r1, r7
 80129a4:	f7ee f8a4 	bl	8000af0 <__aeabi_dcmple>
 80129a8:	b1a0      	cbz	r0, 80129d4 <_strtod_l+0xb2c>
 80129aa:	4639      	mov	r1, r7
 80129ac:	4630      	mov	r0, r6
 80129ae:	f7ee f8fb 	bl	8000ba8 <__aeabi_d2uiz>
 80129b2:	2801      	cmp	r0, #1
 80129b4:	bf38      	it	cc
 80129b6:	2001      	movcc	r0, #1
 80129b8:	f7ed fda4 	bl	8000504 <__aeabi_ui2d>
 80129bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129be:	4606      	mov	r6, r0
 80129c0:	460f      	mov	r7, r1
 80129c2:	bb23      	cbnz	r3, 8012a0e <_strtod_l+0xb66>
 80129c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129c8:	9010      	str	r0, [sp, #64]	; 0x40
 80129ca:	9311      	str	r3, [sp, #68]	; 0x44
 80129cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80129d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80129d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80129dc:	1a9b      	subs	r3, r3, r2
 80129de:	930f      	str	r3, [sp, #60]	; 0x3c
 80129e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80129e4:	eeb0 0a48 	vmov.f32	s0, s16
 80129e8:	eef0 0a68 	vmov.f32	s1, s17
 80129ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80129f0:	f7ff f8fc 	bl	8011bec <__ulp>
 80129f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80129f8:	ec53 2b10 	vmov	r2, r3, d0
 80129fc:	f7ed fdfc 	bl	80005f8 <__aeabi_dmul>
 8012a00:	ec53 2b18 	vmov	r2, r3, d8
 8012a04:	f7ed fc42 	bl	800028c <__adddf3>
 8012a08:	4680      	mov	r8, r0
 8012a0a:	4689      	mov	r9, r1
 8012a0c:	e78d      	b.n	801292a <_strtod_l+0xa82>
 8012a0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012a12:	e7db      	b.n	80129cc <_strtod_l+0xb24>
 8012a14:	a314      	add	r3, pc, #80	; (adr r3, 8012a68 <_strtod_l+0xbc0>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	f7ee f85f 	bl	8000adc <__aeabi_dcmplt>
 8012a1e:	e7b3      	b.n	8012988 <_strtod_l+0xae0>
 8012a20:	2300      	movs	r3, #0
 8012a22:	930a      	str	r3, [sp, #40]	; 0x28
 8012a24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	f7ff ba7c 	b.w	8011f26 <_strtod_l+0x7e>
 8012a2e:	2a65      	cmp	r2, #101	; 0x65
 8012a30:	f43f ab75 	beq.w	801211e <_strtod_l+0x276>
 8012a34:	2a45      	cmp	r2, #69	; 0x45
 8012a36:	f43f ab72 	beq.w	801211e <_strtod_l+0x276>
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	f7ff bbaa 	b.w	8012194 <_strtod_l+0x2ec>
 8012a40:	00000000 	.word	0x00000000
 8012a44:	bff00000 	.word	0xbff00000
 8012a48:	00000000 	.word	0x00000000
 8012a4c:	3ff00000 	.word	0x3ff00000
 8012a50:	94a03595 	.word	0x94a03595
 8012a54:	3fdfffff 	.word	0x3fdfffff
 8012a58:	35afe535 	.word	0x35afe535
 8012a5c:	3fe00000 	.word	0x3fe00000
 8012a60:	ffc00000 	.word	0xffc00000
 8012a64:	41dfffff 	.word	0x41dfffff
 8012a68:	94a03595 	.word	0x94a03595
 8012a6c:	3fcfffff 	.word	0x3fcfffff
 8012a70:	3ff00000 	.word	0x3ff00000
 8012a74:	3fe00000 	.word	0x3fe00000
 8012a78:	7ff00000 	.word	0x7ff00000
 8012a7c:	7fe00000 	.word	0x7fe00000
 8012a80:	7c9fffff 	.word	0x7c9fffff
 8012a84:	7fefffff 	.word	0x7fefffff

08012a88 <_strtod_r>:
 8012a88:	4b01      	ldr	r3, [pc, #4]	; (8012a90 <_strtod_r+0x8>)
 8012a8a:	f7ff ba0d 	b.w	8011ea8 <_strtod_l>
 8012a8e:	bf00      	nop
 8012a90:	200001f8 	.word	0x200001f8

08012a94 <_strtol_l.constprop.0>:
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a9a:	d001      	beq.n	8012aa0 <_strtol_l.constprop.0+0xc>
 8012a9c:	2b24      	cmp	r3, #36	; 0x24
 8012a9e:	d906      	bls.n	8012aae <_strtol_l.constprop.0+0x1a>
 8012aa0:	f7fd fd88 	bl	80105b4 <__errno>
 8012aa4:	2316      	movs	r3, #22
 8012aa6:	6003      	str	r3, [r0, #0]
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012b94 <_strtol_l.constprop.0+0x100>
 8012ab2:	460d      	mov	r5, r1
 8012ab4:	462e      	mov	r6, r5
 8012ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012abe:	f017 0708 	ands.w	r7, r7, #8
 8012ac2:	d1f7      	bne.n	8012ab4 <_strtol_l.constprop.0+0x20>
 8012ac4:	2c2d      	cmp	r4, #45	; 0x2d
 8012ac6:	d132      	bne.n	8012b2e <_strtol_l.constprop.0+0x9a>
 8012ac8:	782c      	ldrb	r4, [r5, #0]
 8012aca:	2701      	movs	r7, #1
 8012acc:	1cb5      	adds	r5, r6, #2
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d05b      	beq.n	8012b8a <_strtol_l.constprop.0+0xf6>
 8012ad2:	2b10      	cmp	r3, #16
 8012ad4:	d109      	bne.n	8012aea <_strtol_l.constprop.0+0x56>
 8012ad6:	2c30      	cmp	r4, #48	; 0x30
 8012ad8:	d107      	bne.n	8012aea <_strtol_l.constprop.0+0x56>
 8012ada:	782c      	ldrb	r4, [r5, #0]
 8012adc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012ae0:	2c58      	cmp	r4, #88	; 0x58
 8012ae2:	d14d      	bne.n	8012b80 <_strtol_l.constprop.0+0xec>
 8012ae4:	786c      	ldrb	r4, [r5, #1]
 8012ae6:	2310      	movs	r3, #16
 8012ae8:	3502      	adds	r5, #2
 8012aea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012aee:	f108 38ff 	add.w	r8, r8, #4294967295
 8012af2:	f04f 0e00 	mov.w	lr, #0
 8012af6:	fbb8 f9f3 	udiv	r9, r8, r3
 8012afa:	4676      	mov	r6, lr
 8012afc:	fb03 8a19 	mls	sl, r3, r9, r8
 8012b00:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012b04:	f1bc 0f09 	cmp.w	ip, #9
 8012b08:	d816      	bhi.n	8012b38 <_strtol_l.constprop.0+0xa4>
 8012b0a:	4664      	mov	r4, ip
 8012b0c:	42a3      	cmp	r3, r4
 8012b0e:	dd24      	ble.n	8012b5a <_strtol_l.constprop.0+0xc6>
 8012b10:	f1be 3fff 	cmp.w	lr, #4294967295
 8012b14:	d008      	beq.n	8012b28 <_strtol_l.constprop.0+0x94>
 8012b16:	45b1      	cmp	r9, r6
 8012b18:	d31c      	bcc.n	8012b54 <_strtol_l.constprop.0+0xc0>
 8012b1a:	d101      	bne.n	8012b20 <_strtol_l.constprop.0+0x8c>
 8012b1c:	45a2      	cmp	sl, r4
 8012b1e:	db19      	blt.n	8012b54 <_strtol_l.constprop.0+0xc0>
 8012b20:	fb06 4603 	mla	r6, r6, r3, r4
 8012b24:	f04f 0e01 	mov.w	lr, #1
 8012b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b2c:	e7e8      	b.n	8012b00 <_strtol_l.constprop.0+0x6c>
 8012b2e:	2c2b      	cmp	r4, #43	; 0x2b
 8012b30:	bf04      	itt	eq
 8012b32:	782c      	ldrbeq	r4, [r5, #0]
 8012b34:	1cb5      	addeq	r5, r6, #2
 8012b36:	e7ca      	b.n	8012ace <_strtol_l.constprop.0+0x3a>
 8012b38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012b3c:	f1bc 0f19 	cmp.w	ip, #25
 8012b40:	d801      	bhi.n	8012b46 <_strtol_l.constprop.0+0xb2>
 8012b42:	3c37      	subs	r4, #55	; 0x37
 8012b44:	e7e2      	b.n	8012b0c <_strtol_l.constprop.0+0x78>
 8012b46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012b4a:	f1bc 0f19 	cmp.w	ip, #25
 8012b4e:	d804      	bhi.n	8012b5a <_strtol_l.constprop.0+0xc6>
 8012b50:	3c57      	subs	r4, #87	; 0x57
 8012b52:	e7db      	b.n	8012b0c <_strtol_l.constprop.0+0x78>
 8012b54:	f04f 3eff 	mov.w	lr, #4294967295
 8012b58:	e7e6      	b.n	8012b28 <_strtol_l.constprop.0+0x94>
 8012b5a:	f1be 3fff 	cmp.w	lr, #4294967295
 8012b5e:	d105      	bne.n	8012b6c <_strtol_l.constprop.0+0xd8>
 8012b60:	2322      	movs	r3, #34	; 0x22
 8012b62:	6003      	str	r3, [r0, #0]
 8012b64:	4646      	mov	r6, r8
 8012b66:	b942      	cbnz	r2, 8012b7a <_strtol_l.constprop.0+0xe6>
 8012b68:	4630      	mov	r0, r6
 8012b6a:	e79e      	b.n	8012aaa <_strtol_l.constprop.0+0x16>
 8012b6c:	b107      	cbz	r7, 8012b70 <_strtol_l.constprop.0+0xdc>
 8012b6e:	4276      	negs	r6, r6
 8012b70:	2a00      	cmp	r2, #0
 8012b72:	d0f9      	beq.n	8012b68 <_strtol_l.constprop.0+0xd4>
 8012b74:	f1be 0f00 	cmp.w	lr, #0
 8012b78:	d000      	beq.n	8012b7c <_strtol_l.constprop.0+0xe8>
 8012b7a:	1e69      	subs	r1, r5, #1
 8012b7c:	6011      	str	r1, [r2, #0]
 8012b7e:	e7f3      	b.n	8012b68 <_strtol_l.constprop.0+0xd4>
 8012b80:	2430      	movs	r4, #48	; 0x30
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d1b1      	bne.n	8012aea <_strtol_l.constprop.0+0x56>
 8012b86:	2308      	movs	r3, #8
 8012b88:	e7af      	b.n	8012aea <_strtol_l.constprop.0+0x56>
 8012b8a:	2c30      	cmp	r4, #48	; 0x30
 8012b8c:	d0a5      	beq.n	8012ada <_strtol_l.constprop.0+0x46>
 8012b8e:	230a      	movs	r3, #10
 8012b90:	e7ab      	b.n	8012aea <_strtol_l.constprop.0+0x56>
 8012b92:	bf00      	nop
 8012b94:	08015429 	.word	0x08015429

08012b98 <_strtol_r>:
 8012b98:	f7ff bf7c 	b.w	8012a94 <_strtol_l.constprop.0>

08012b9c <__ssputs_r>:
 8012b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba0:	688e      	ldr	r6, [r1, #8]
 8012ba2:	461f      	mov	r7, r3
 8012ba4:	42be      	cmp	r6, r7
 8012ba6:	680b      	ldr	r3, [r1, #0]
 8012ba8:	4682      	mov	sl, r0
 8012baa:	460c      	mov	r4, r1
 8012bac:	4690      	mov	r8, r2
 8012bae:	d82c      	bhi.n	8012c0a <__ssputs_r+0x6e>
 8012bb0:	898a      	ldrh	r2, [r1, #12]
 8012bb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bb6:	d026      	beq.n	8012c06 <__ssputs_r+0x6a>
 8012bb8:	6965      	ldr	r5, [r4, #20]
 8012bba:	6909      	ldr	r1, [r1, #16]
 8012bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bc0:	eba3 0901 	sub.w	r9, r3, r1
 8012bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bc8:	1c7b      	adds	r3, r7, #1
 8012bca:	444b      	add	r3, r9
 8012bcc:	106d      	asrs	r5, r5, #1
 8012bce:	429d      	cmp	r5, r3
 8012bd0:	bf38      	it	cc
 8012bd2:	461d      	movcc	r5, r3
 8012bd4:	0553      	lsls	r3, r2, #21
 8012bd6:	d527      	bpl.n	8012c28 <__ssputs_r+0x8c>
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7fe fc0f 	bl	80113fc <_malloc_r>
 8012bde:	4606      	mov	r6, r0
 8012be0:	b360      	cbz	r0, 8012c3c <__ssputs_r+0xa0>
 8012be2:	6921      	ldr	r1, [r4, #16]
 8012be4:	464a      	mov	r2, r9
 8012be6:	f000 fbf5 	bl	80133d4 <memcpy>
 8012bea:	89a3      	ldrh	r3, [r4, #12]
 8012bec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bf4:	81a3      	strh	r3, [r4, #12]
 8012bf6:	6126      	str	r6, [r4, #16]
 8012bf8:	6165      	str	r5, [r4, #20]
 8012bfa:	444e      	add	r6, r9
 8012bfc:	eba5 0509 	sub.w	r5, r5, r9
 8012c00:	6026      	str	r6, [r4, #0]
 8012c02:	60a5      	str	r5, [r4, #8]
 8012c04:	463e      	mov	r6, r7
 8012c06:	42be      	cmp	r6, r7
 8012c08:	d900      	bls.n	8012c0c <__ssputs_r+0x70>
 8012c0a:	463e      	mov	r6, r7
 8012c0c:	6820      	ldr	r0, [r4, #0]
 8012c0e:	4632      	mov	r2, r6
 8012c10:	4641      	mov	r1, r8
 8012c12:	f000 fba3 	bl	801335c <memmove>
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	1b9b      	subs	r3, r3, r6
 8012c1a:	60a3      	str	r3, [r4, #8]
 8012c1c:	6823      	ldr	r3, [r4, #0]
 8012c1e:	4433      	add	r3, r6
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	2000      	movs	r0, #0
 8012c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c28:	462a      	mov	r2, r5
 8012c2a:	f000 ff86 	bl	8013b3a <_realloc_r>
 8012c2e:	4606      	mov	r6, r0
 8012c30:	2800      	cmp	r0, #0
 8012c32:	d1e0      	bne.n	8012bf6 <__ssputs_r+0x5a>
 8012c34:	6921      	ldr	r1, [r4, #16]
 8012c36:	4650      	mov	r0, sl
 8012c38:	f7fe fb6c 	bl	8011314 <_free_r>
 8012c3c:	230c      	movs	r3, #12
 8012c3e:	f8ca 3000 	str.w	r3, [sl]
 8012c42:	89a3      	ldrh	r3, [r4, #12]
 8012c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c48:	81a3      	strh	r3, [r4, #12]
 8012c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c4e:	e7e9      	b.n	8012c24 <__ssputs_r+0x88>

08012c50 <_svfiprintf_r>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	4698      	mov	r8, r3
 8012c56:	898b      	ldrh	r3, [r1, #12]
 8012c58:	061b      	lsls	r3, r3, #24
 8012c5a:	b09d      	sub	sp, #116	; 0x74
 8012c5c:	4607      	mov	r7, r0
 8012c5e:	460d      	mov	r5, r1
 8012c60:	4614      	mov	r4, r2
 8012c62:	d50e      	bpl.n	8012c82 <_svfiprintf_r+0x32>
 8012c64:	690b      	ldr	r3, [r1, #16]
 8012c66:	b963      	cbnz	r3, 8012c82 <_svfiprintf_r+0x32>
 8012c68:	2140      	movs	r1, #64	; 0x40
 8012c6a:	f7fe fbc7 	bl	80113fc <_malloc_r>
 8012c6e:	6028      	str	r0, [r5, #0]
 8012c70:	6128      	str	r0, [r5, #16]
 8012c72:	b920      	cbnz	r0, 8012c7e <_svfiprintf_r+0x2e>
 8012c74:	230c      	movs	r3, #12
 8012c76:	603b      	str	r3, [r7, #0]
 8012c78:	f04f 30ff 	mov.w	r0, #4294967295
 8012c7c:	e0d0      	b.n	8012e20 <_svfiprintf_r+0x1d0>
 8012c7e:	2340      	movs	r3, #64	; 0x40
 8012c80:	616b      	str	r3, [r5, #20]
 8012c82:	2300      	movs	r3, #0
 8012c84:	9309      	str	r3, [sp, #36]	; 0x24
 8012c86:	2320      	movs	r3, #32
 8012c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c90:	2330      	movs	r3, #48	; 0x30
 8012c92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012e38 <_svfiprintf_r+0x1e8>
 8012c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c9a:	f04f 0901 	mov.w	r9, #1
 8012c9e:	4623      	mov	r3, r4
 8012ca0:	469a      	mov	sl, r3
 8012ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ca6:	b10a      	cbz	r2, 8012cac <_svfiprintf_r+0x5c>
 8012ca8:	2a25      	cmp	r2, #37	; 0x25
 8012caa:	d1f9      	bne.n	8012ca0 <_svfiprintf_r+0x50>
 8012cac:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb0:	d00b      	beq.n	8012cca <_svfiprintf_r+0x7a>
 8012cb2:	465b      	mov	r3, fp
 8012cb4:	4622      	mov	r2, r4
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	4638      	mov	r0, r7
 8012cba:	f7ff ff6f 	bl	8012b9c <__ssputs_r>
 8012cbe:	3001      	adds	r0, #1
 8012cc0:	f000 80a9 	beq.w	8012e16 <_svfiprintf_r+0x1c6>
 8012cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cc6:	445a      	add	r2, fp
 8012cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8012cca:	f89a 3000 	ldrb.w	r3, [sl]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f000 80a1 	beq.w	8012e16 <_svfiprintf_r+0x1c6>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cde:	f10a 0a01 	add.w	sl, sl, #1
 8012ce2:	9304      	str	r3, [sp, #16]
 8012ce4:	9307      	str	r3, [sp, #28]
 8012ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cea:	931a      	str	r3, [sp, #104]	; 0x68
 8012cec:	4654      	mov	r4, sl
 8012cee:	2205      	movs	r2, #5
 8012cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf4:	4850      	ldr	r0, [pc, #320]	; (8012e38 <_svfiprintf_r+0x1e8>)
 8012cf6:	f7ed fa6b 	bl	80001d0 <memchr>
 8012cfa:	9a04      	ldr	r2, [sp, #16]
 8012cfc:	b9d8      	cbnz	r0, 8012d36 <_svfiprintf_r+0xe6>
 8012cfe:	06d0      	lsls	r0, r2, #27
 8012d00:	bf44      	itt	mi
 8012d02:	2320      	movmi	r3, #32
 8012d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d08:	0711      	lsls	r1, r2, #28
 8012d0a:	bf44      	itt	mi
 8012d0c:	232b      	movmi	r3, #43	; 0x2b
 8012d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d12:	f89a 3000 	ldrb.w	r3, [sl]
 8012d16:	2b2a      	cmp	r3, #42	; 0x2a
 8012d18:	d015      	beq.n	8012d46 <_svfiprintf_r+0xf6>
 8012d1a:	9a07      	ldr	r2, [sp, #28]
 8012d1c:	4654      	mov	r4, sl
 8012d1e:	2000      	movs	r0, #0
 8012d20:	f04f 0c0a 	mov.w	ip, #10
 8012d24:	4621      	mov	r1, r4
 8012d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d2a:	3b30      	subs	r3, #48	; 0x30
 8012d2c:	2b09      	cmp	r3, #9
 8012d2e:	d94d      	bls.n	8012dcc <_svfiprintf_r+0x17c>
 8012d30:	b1b0      	cbz	r0, 8012d60 <_svfiprintf_r+0x110>
 8012d32:	9207      	str	r2, [sp, #28]
 8012d34:	e014      	b.n	8012d60 <_svfiprintf_r+0x110>
 8012d36:	eba0 0308 	sub.w	r3, r0, r8
 8012d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	9304      	str	r3, [sp, #16]
 8012d42:	46a2      	mov	sl, r4
 8012d44:	e7d2      	b.n	8012cec <_svfiprintf_r+0x9c>
 8012d46:	9b03      	ldr	r3, [sp, #12]
 8012d48:	1d19      	adds	r1, r3, #4
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	9103      	str	r1, [sp, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	bfbb      	ittet	lt
 8012d52:	425b      	neglt	r3, r3
 8012d54:	f042 0202 	orrlt.w	r2, r2, #2
 8012d58:	9307      	strge	r3, [sp, #28]
 8012d5a:	9307      	strlt	r3, [sp, #28]
 8012d5c:	bfb8      	it	lt
 8012d5e:	9204      	strlt	r2, [sp, #16]
 8012d60:	7823      	ldrb	r3, [r4, #0]
 8012d62:	2b2e      	cmp	r3, #46	; 0x2e
 8012d64:	d10c      	bne.n	8012d80 <_svfiprintf_r+0x130>
 8012d66:	7863      	ldrb	r3, [r4, #1]
 8012d68:	2b2a      	cmp	r3, #42	; 0x2a
 8012d6a:	d134      	bne.n	8012dd6 <_svfiprintf_r+0x186>
 8012d6c:	9b03      	ldr	r3, [sp, #12]
 8012d6e:	1d1a      	adds	r2, r3, #4
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	9203      	str	r2, [sp, #12]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	bfb8      	it	lt
 8012d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d7c:	3402      	adds	r4, #2
 8012d7e:	9305      	str	r3, [sp, #20]
 8012d80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012e48 <_svfiprintf_r+0x1f8>
 8012d84:	7821      	ldrb	r1, [r4, #0]
 8012d86:	2203      	movs	r2, #3
 8012d88:	4650      	mov	r0, sl
 8012d8a:	f7ed fa21 	bl	80001d0 <memchr>
 8012d8e:	b138      	cbz	r0, 8012da0 <_svfiprintf_r+0x150>
 8012d90:	9b04      	ldr	r3, [sp, #16]
 8012d92:	eba0 000a 	sub.w	r0, r0, sl
 8012d96:	2240      	movs	r2, #64	; 0x40
 8012d98:	4082      	lsls	r2, r0
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	3401      	adds	r4, #1
 8012d9e:	9304      	str	r3, [sp, #16]
 8012da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da4:	4825      	ldr	r0, [pc, #148]	; (8012e3c <_svfiprintf_r+0x1ec>)
 8012da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012daa:	2206      	movs	r2, #6
 8012dac:	f7ed fa10 	bl	80001d0 <memchr>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d038      	beq.n	8012e26 <_svfiprintf_r+0x1d6>
 8012db4:	4b22      	ldr	r3, [pc, #136]	; (8012e40 <_svfiprintf_r+0x1f0>)
 8012db6:	bb1b      	cbnz	r3, 8012e00 <_svfiprintf_r+0x1b0>
 8012db8:	9b03      	ldr	r3, [sp, #12]
 8012dba:	3307      	adds	r3, #7
 8012dbc:	f023 0307 	bic.w	r3, r3, #7
 8012dc0:	3308      	adds	r3, #8
 8012dc2:	9303      	str	r3, [sp, #12]
 8012dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc6:	4433      	add	r3, r6
 8012dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8012dca:	e768      	b.n	8012c9e <_svfiprintf_r+0x4e>
 8012dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dd0:	460c      	mov	r4, r1
 8012dd2:	2001      	movs	r0, #1
 8012dd4:	e7a6      	b.n	8012d24 <_svfiprintf_r+0xd4>
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	3401      	adds	r4, #1
 8012dda:	9305      	str	r3, [sp, #20]
 8012ddc:	4619      	mov	r1, r3
 8012dde:	f04f 0c0a 	mov.w	ip, #10
 8012de2:	4620      	mov	r0, r4
 8012de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012de8:	3a30      	subs	r2, #48	; 0x30
 8012dea:	2a09      	cmp	r2, #9
 8012dec:	d903      	bls.n	8012df6 <_svfiprintf_r+0x1a6>
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0c6      	beq.n	8012d80 <_svfiprintf_r+0x130>
 8012df2:	9105      	str	r1, [sp, #20]
 8012df4:	e7c4      	b.n	8012d80 <_svfiprintf_r+0x130>
 8012df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e7f0      	b.n	8012de2 <_svfiprintf_r+0x192>
 8012e00:	ab03      	add	r3, sp, #12
 8012e02:	9300      	str	r3, [sp, #0]
 8012e04:	462a      	mov	r2, r5
 8012e06:	4b0f      	ldr	r3, [pc, #60]	; (8012e44 <_svfiprintf_r+0x1f4>)
 8012e08:	a904      	add	r1, sp, #16
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	f7fc fc3e 	bl	800f68c <_printf_float>
 8012e10:	1c42      	adds	r2, r0, #1
 8012e12:	4606      	mov	r6, r0
 8012e14:	d1d6      	bne.n	8012dc4 <_svfiprintf_r+0x174>
 8012e16:	89ab      	ldrh	r3, [r5, #12]
 8012e18:	065b      	lsls	r3, r3, #25
 8012e1a:	f53f af2d 	bmi.w	8012c78 <_svfiprintf_r+0x28>
 8012e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e20:	b01d      	add	sp, #116	; 0x74
 8012e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e26:	ab03      	add	r3, sp, #12
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4b05      	ldr	r3, [pc, #20]	; (8012e44 <_svfiprintf_r+0x1f4>)
 8012e2e:	a904      	add	r1, sp, #16
 8012e30:	4638      	mov	r0, r7
 8012e32:	f7fc fecf 	bl	800fbd4 <_printf_i>
 8012e36:	e7eb      	b.n	8012e10 <_svfiprintf_r+0x1c0>
 8012e38:	08015529 	.word	0x08015529
 8012e3c:	08015533 	.word	0x08015533
 8012e40:	0800f68d 	.word	0x0800f68d
 8012e44:	08012b9d 	.word	0x08012b9d
 8012e48:	0801552f 	.word	0x0801552f

08012e4c <__sfputc_r>:
 8012e4c:	6893      	ldr	r3, [r2, #8]
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	b410      	push	{r4}
 8012e54:	6093      	str	r3, [r2, #8]
 8012e56:	da08      	bge.n	8012e6a <__sfputc_r+0x1e>
 8012e58:	6994      	ldr	r4, [r2, #24]
 8012e5a:	42a3      	cmp	r3, r4
 8012e5c:	db01      	blt.n	8012e62 <__sfputc_r+0x16>
 8012e5e:	290a      	cmp	r1, #10
 8012e60:	d103      	bne.n	8012e6a <__sfputc_r+0x1e>
 8012e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e66:	f000 b9e3 	b.w	8013230 <__swbuf_r>
 8012e6a:	6813      	ldr	r3, [r2, #0]
 8012e6c:	1c58      	adds	r0, r3, #1
 8012e6e:	6010      	str	r0, [r2, #0]
 8012e70:	7019      	strb	r1, [r3, #0]
 8012e72:	4608      	mov	r0, r1
 8012e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e78:	4770      	bx	lr

08012e7a <__sfputs_r>:
 8012e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	460f      	mov	r7, r1
 8012e80:	4614      	mov	r4, r2
 8012e82:	18d5      	adds	r5, r2, r3
 8012e84:	42ac      	cmp	r4, r5
 8012e86:	d101      	bne.n	8012e8c <__sfputs_r+0x12>
 8012e88:	2000      	movs	r0, #0
 8012e8a:	e007      	b.n	8012e9c <__sfputs_r+0x22>
 8012e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e90:	463a      	mov	r2, r7
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7ff ffda 	bl	8012e4c <__sfputc_r>
 8012e98:	1c43      	adds	r3, r0, #1
 8012e9a:	d1f3      	bne.n	8012e84 <__sfputs_r+0xa>
 8012e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ea0 <_vfiprintf_r>:
 8012ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	460d      	mov	r5, r1
 8012ea6:	b09d      	sub	sp, #116	; 0x74
 8012ea8:	4614      	mov	r4, r2
 8012eaa:	4698      	mov	r8, r3
 8012eac:	4606      	mov	r6, r0
 8012eae:	b118      	cbz	r0, 8012eb8 <_vfiprintf_r+0x18>
 8012eb0:	6a03      	ldr	r3, [r0, #32]
 8012eb2:	b90b      	cbnz	r3, 8012eb8 <_vfiprintf_r+0x18>
 8012eb4:	f7fd fa4c 	bl	8010350 <__sinit>
 8012eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eba:	07d9      	lsls	r1, r3, #31
 8012ebc:	d405      	bmi.n	8012eca <_vfiprintf_r+0x2a>
 8012ebe:	89ab      	ldrh	r3, [r5, #12]
 8012ec0:	059a      	lsls	r2, r3, #22
 8012ec2:	d402      	bmi.n	8012eca <_vfiprintf_r+0x2a>
 8012ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ec6:	f7fd fba0 	bl	801060a <__retarget_lock_acquire_recursive>
 8012eca:	89ab      	ldrh	r3, [r5, #12]
 8012ecc:	071b      	lsls	r3, r3, #28
 8012ece:	d501      	bpl.n	8012ed4 <_vfiprintf_r+0x34>
 8012ed0:	692b      	ldr	r3, [r5, #16]
 8012ed2:	b99b      	cbnz	r3, 8012efc <_vfiprintf_r+0x5c>
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f000 f9e8 	bl	80132ac <__swsetup_r>
 8012edc:	b170      	cbz	r0, 8012efc <_vfiprintf_r+0x5c>
 8012ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ee0:	07dc      	lsls	r4, r3, #31
 8012ee2:	d504      	bpl.n	8012eee <_vfiprintf_r+0x4e>
 8012ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee8:	b01d      	add	sp, #116	; 0x74
 8012eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eee:	89ab      	ldrh	r3, [r5, #12]
 8012ef0:	0598      	lsls	r0, r3, #22
 8012ef2:	d4f7      	bmi.n	8012ee4 <_vfiprintf_r+0x44>
 8012ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ef6:	f7fd fb89 	bl	801060c <__retarget_lock_release_recursive>
 8012efa:	e7f3      	b.n	8012ee4 <_vfiprintf_r+0x44>
 8012efc:	2300      	movs	r3, #0
 8012efe:	9309      	str	r3, [sp, #36]	; 0x24
 8012f00:	2320      	movs	r3, #32
 8012f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f0a:	2330      	movs	r3, #48	; 0x30
 8012f0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80130c0 <_vfiprintf_r+0x220>
 8012f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f14:	f04f 0901 	mov.w	r9, #1
 8012f18:	4623      	mov	r3, r4
 8012f1a:	469a      	mov	sl, r3
 8012f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f20:	b10a      	cbz	r2, 8012f26 <_vfiprintf_r+0x86>
 8012f22:	2a25      	cmp	r2, #37	; 0x25
 8012f24:	d1f9      	bne.n	8012f1a <_vfiprintf_r+0x7a>
 8012f26:	ebba 0b04 	subs.w	fp, sl, r4
 8012f2a:	d00b      	beq.n	8012f44 <_vfiprintf_r+0xa4>
 8012f2c:	465b      	mov	r3, fp
 8012f2e:	4622      	mov	r2, r4
 8012f30:	4629      	mov	r1, r5
 8012f32:	4630      	mov	r0, r6
 8012f34:	f7ff ffa1 	bl	8012e7a <__sfputs_r>
 8012f38:	3001      	adds	r0, #1
 8012f3a:	f000 80a9 	beq.w	8013090 <_vfiprintf_r+0x1f0>
 8012f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f40:	445a      	add	r2, fp
 8012f42:	9209      	str	r2, [sp, #36]	; 0x24
 8012f44:	f89a 3000 	ldrb.w	r3, [sl]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	f000 80a1 	beq.w	8013090 <_vfiprintf_r+0x1f0>
 8012f4e:	2300      	movs	r3, #0
 8012f50:	f04f 32ff 	mov.w	r2, #4294967295
 8012f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f58:	f10a 0a01 	add.w	sl, sl, #1
 8012f5c:	9304      	str	r3, [sp, #16]
 8012f5e:	9307      	str	r3, [sp, #28]
 8012f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f64:	931a      	str	r3, [sp, #104]	; 0x68
 8012f66:	4654      	mov	r4, sl
 8012f68:	2205      	movs	r2, #5
 8012f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f6e:	4854      	ldr	r0, [pc, #336]	; (80130c0 <_vfiprintf_r+0x220>)
 8012f70:	f7ed f92e 	bl	80001d0 <memchr>
 8012f74:	9a04      	ldr	r2, [sp, #16]
 8012f76:	b9d8      	cbnz	r0, 8012fb0 <_vfiprintf_r+0x110>
 8012f78:	06d1      	lsls	r1, r2, #27
 8012f7a:	bf44      	itt	mi
 8012f7c:	2320      	movmi	r3, #32
 8012f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f82:	0713      	lsls	r3, r2, #28
 8012f84:	bf44      	itt	mi
 8012f86:	232b      	movmi	r3, #43	; 0x2b
 8012f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f90:	2b2a      	cmp	r3, #42	; 0x2a
 8012f92:	d015      	beq.n	8012fc0 <_vfiprintf_r+0x120>
 8012f94:	9a07      	ldr	r2, [sp, #28]
 8012f96:	4654      	mov	r4, sl
 8012f98:	2000      	movs	r0, #0
 8012f9a:	f04f 0c0a 	mov.w	ip, #10
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fa4:	3b30      	subs	r3, #48	; 0x30
 8012fa6:	2b09      	cmp	r3, #9
 8012fa8:	d94d      	bls.n	8013046 <_vfiprintf_r+0x1a6>
 8012faa:	b1b0      	cbz	r0, 8012fda <_vfiprintf_r+0x13a>
 8012fac:	9207      	str	r2, [sp, #28]
 8012fae:	e014      	b.n	8012fda <_vfiprintf_r+0x13a>
 8012fb0:	eba0 0308 	sub.w	r3, r0, r8
 8012fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	9304      	str	r3, [sp, #16]
 8012fbc:	46a2      	mov	sl, r4
 8012fbe:	e7d2      	b.n	8012f66 <_vfiprintf_r+0xc6>
 8012fc0:	9b03      	ldr	r3, [sp, #12]
 8012fc2:	1d19      	adds	r1, r3, #4
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	9103      	str	r1, [sp, #12]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	bfbb      	ittet	lt
 8012fcc:	425b      	neglt	r3, r3
 8012fce:	f042 0202 	orrlt.w	r2, r2, #2
 8012fd2:	9307      	strge	r3, [sp, #28]
 8012fd4:	9307      	strlt	r3, [sp, #28]
 8012fd6:	bfb8      	it	lt
 8012fd8:	9204      	strlt	r2, [sp, #16]
 8012fda:	7823      	ldrb	r3, [r4, #0]
 8012fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8012fde:	d10c      	bne.n	8012ffa <_vfiprintf_r+0x15a>
 8012fe0:	7863      	ldrb	r3, [r4, #1]
 8012fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8012fe4:	d134      	bne.n	8013050 <_vfiprintf_r+0x1b0>
 8012fe6:	9b03      	ldr	r3, [sp, #12]
 8012fe8:	1d1a      	adds	r2, r3, #4
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	9203      	str	r2, [sp, #12]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	bfb8      	it	lt
 8012ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ff6:	3402      	adds	r4, #2
 8012ff8:	9305      	str	r3, [sp, #20]
 8012ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80130d0 <_vfiprintf_r+0x230>
 8012ffe:	7821      	ldrb	r1, [r4, #0]
 8013000:	2203      	movs	r2, #3
 8013002:	4650      	mov	r0, sl
 8013004:	f7ed f8e4 	bl	80001d0 <memchr>
 8013008:	b138      	cbz	r0, 801301a <_vfiprintf_r+0x17a>
 801300a:	9b04      	ldr	r3, [sp, #16]
 801300c:	eba0 000a 	sub.w	r0, r0, sl
 8013010:	2240      	movs	r2, #64	; 0x40
 8013012:	4082      	lsls	r2, r0
 8013014:	4313      	orrs	r3, r2
 8013016:	3401      	adds	r4, #1
 8013018:	9304      	str	r3, [sp, #16]
 801301a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801301e:	4829      	ldr	r0, [pc, #164]	; (80130c4 <_vfiprintf_r+0x224>)
 8013020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013024:	2206      	movs	r2, #6
 8013026:	f7ed f8d3 	bl	80001d0 <memchr>
 801302a:	2800      	cmp	r0, #0
 801302c:	d03f      	beq.n	80130ae <_vfiprintf_r+0x20e>
 801302e:	4b26      	ldr	r3, [pc, #152]	; (80130c8 <_vfiprintf_r+0x228>)
 8013030:	bb1b      	cbnz	r3, 801307a <_vfiprintf_r+0x1da>
 8013032:	9b03      	ldr	r3, [sp, #12]
 8013034:	3307      	adds	r3, #7
 8013036:	f023 0307 	bic.w	r3, r3, #7
 801303a:	3308      	adds	r3, #8
 801303c:	9303      	str	r3, [sp, #12]
 801303e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013040:	443b      	add	r3, r7
 8013042:	9309      	str	r3, [sp, #36]	; 0x24
 8013044:	e768      	b.n	8012f18 <_vfiprintf_r+0x78>
 8013046:	fb0c 3202 	mla	r2, ip, r2, r3
 801304a:	460c      	mov	r4, r1
 801304c:	2001      	movs	r0, #1
 801304e:	e7a6      	b.n	8012f9e <_vfiprintf_r+0xfe>
 8013050:	2300      	movs	r3, #0
 8013052:	3401      	adds	r4, #1
 8013054:	9305      	str	r3, [sp, #20]
 8013056:	4619      	mov	r1, r3
 8013058:	f04f 0c0a 	mov.w	ip, #10
 801305c:	4620      	mov	r0, r4
 801305e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013062:	3a30      	subs	r2, #48	; 0x30
 8013064:	2a09      	cmp	r2, #9
 8013066:	d903      	bls.n	8013070 <_vfiprintf_r+0x1d0>
 8013068:	2b00      	cmp	r3, #0
 801306a:	d0c6      	beq.n	8012ffa <_vfiprintf_r+0x15a>
 801306c:	9105      	str	r1, [sp, #20]
 801306e:	e7c4      	b.n	8012ffa <_vfiprintf_r+0x15a>
 8013070:	fb0c 2101 	mla	r1, ip, r1, r2
 8013074:	4604      	mov	r4, r0
 8013076:	2301      	movs	r3, #1
 8013078:	e7f0      	b.n	801305c <_vfiprintf_r+0x1bc>
 801307a:	ab03      	add	r3, sp, #12
 801307c:	9300      	str	r3, [sp, #0]
 801307e:	462a      	mov	r2, r5
 8013080:	4b12      	ldr	r3, [pc, #72]	; (80130cc <_vfiprintf_r+0x22c>)
 8013082:	a904      	add	r1, sp, #16
 8013084:	4630      	mov	r0, r6
 8013086:	f7fc fb01 	bl	800f68c <_printf_float>
 801308a:	4607      	mov	r7, r0
 801308c:	1c78      	adds	r0, r7, #1
 801308e:	d1d6      	bne.n	801303e <_vfiprintf_r+0x19e>
 8013090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013092:	07d9      	lsls	r1, r3, #31
 8013094:	d405      	bmi.n	80130a2 <_vfiprintf_r+0x202>
 8013096:	89ab      	ldrh	r3, [r5, #12]
 8013098:	059a      	lsls	r2, r3, #22
 801309a:	d402      	bmi.n	80130a2 <_vfiprintf_r+0x202>
 801309c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801309e:	f7fd fab5 	bl	801060c <__retarget_lock_release_recursive>
 80130a2:	89ab      	ldrh	r3, [r5, #12]
 80130a4:	065b      	lsls	r3, r3, #25
 80130a6:	f53f af1d 	bmi.w	8012ee4 <_vfiprintf_r+0x44>
 80130aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130ac:	e71c      	b.n	8012ee8 <_vfiprintf_r+0x48>
 80130ae:	ab03      	add	r3, sp, #12
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	462a      	mov	r2, r5
 80130b4:	4b05      	ldr	r3, [pc, #20]	; (80130cc <_vfiprintf_r+0x22c>)
 80130b6:	a904      	add	r1, sp, #16
 80130b8:	4630      	mov	r0, r6
 80130ba:	f7fc fd8b 	bl	800fbd4 <_printf_i>
 80130be:	e7e4      	b.n	801308a <_vfiprintf_r+0x1ea>
 80130c0:	08015529 	.word	0x08015529
 80130c4:	08015533 	.word	0x08015533
 80130c8:	0800f68d 	.word	0x0800f68d
 80130cc:	08012e7b 	.word	0x08012e7b
 80130d0:	0801552f 	.word	0x0801552f

080130d4 <__sflush_r>:
 80130d4:	898a      	ldrh	r2, [r1, #12]
 80130d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130da:	4605      	mov	r5, r0
 80130dc:	0710      	lsls	r0, r2, #28
 80130de:	460c      	mov	r4, r1
 80130e0:	d458      	bmi.n	8013194 <__sflush_r+0xc0>
 80130e2:	684b      	ldr	r3, [r1, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dc05      	bgt.n	80130f4 <__sflush_r+0x20>
 80130e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	dc02      	bgt.n	80130f4 <__sflush_r+0x20>
 80130ee:	2000      	movs	r0, #0
 80130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130f6:	2e00      	cmp	r6, #0
 80130f8:	d0f9      	beq.n	80130ee <__sflush_r+0x1a>
 80130fa:	2300      	movs	r3, #0
 80130fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013100:	682f      	ldr	r7, [r5, #0]
 8013102:	6a21      	ldr	r1, [r4, #32]
 8013104:	602b      	str	r3, [r5, #0]
 8013106:	d032      	beq.n	801316e <__sflush_r+0x9a>
 8013108:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	075a      	lsls	r2, r3, #29
 801310e:	d505      	bpl.n	801311c <__sflush_r+0x48>
 8013110:	6863      	ldr	r3, [r4, #4]
 8013112:	1ac0      	subs	r0, r0, r3
 8013114:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013116:	b10b      	cbz	r3, 801311c <__sflush_r+0x48>
 8013118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801311a:	1ac0      	subs	r0, r0, r3
 801311c:	2300      	movs	r3, #0
 801311e:	4602      	mov	r2, r0
 8013120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013122:	6a21      	ldr	r1, [r4, #32]
 8013124:	4628      	mov	r0, r5
 8013126:	47b0      	blx	r6
 8013128:	1c43      	adds	r3, r0, #1
 801312a:	89a3      	ldrh	r3, [r4, #12]
 801312c:	d106      	bne.n	801313c <__sflush_r+0x68>
 801312e:	6829      	ldr	r1, [r5, #0]
 8013130:	291d      	cmp	r1, #29
 8013132:	d82b      	bhi.n	801318c <__sflush_r+0xb8>
 8013134:	4a29      	ldr	r2, [pc, #164]	; (80131dc <__sflush_r+0x108>)
 8013136:	410a      	asrs	r2, r1
 8013138:	07d6      	lsls	r6, r2, #31
 801313a:	d427      	bmi.n	801318c <__sflush_r+0xb8>
 801313c:	2200      	movs	r2, #0
 801313e:	6062      	str	r2, [r4, #4]
 8013140:	04d9      	lsls	r1, r3, #19
 8013142:	6922      	ldr	r2, [r4, #16]
 8013144:	6022      	str	r2, [r4, #0]
 8013146:	d504      	bpl.n	8013152 <__sflush_r+0x7e>
 8013148:	1c42      	adds	r2, r0, #1
 801314a:	d101      	bne.n	8013150 <__sflush_r+0x7c>
 801314c:	682b      	ldr	r3, [r5, #0]
 801314e:	b903      	cbnz	r3, 8013152 <__sflush_r+0x7e>
 8013150:	6560      	str	r0, [r4, #84]	; 0x54
 8013152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013154:	602f      	str	r7, [r5, #0]
 8013156:	2900      	cmp	r1, #0
 8013158:	d0c9      	beq.n	80130ee <__sflush_r+0x1a>
 801315a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801315e:	4299      	cmp	r1, r3
 8013160:	d002      	beq.n	8013168 <__sflush_r+0x94>
 8013162:	4628      	mov	r0, r5
 8013164:	f7fe f8d6 	bl	8011314 <_free_r>
 8013168:	2000      	movs	r0, #0
 801316a:	6360      	str	r0, [r4, #52]	; 0x34
 801316c:	e7c0      	b.n	80130f0 <__sflush_r+0x1c>
 801316e:	2301      	movs	r3, #1
 8013170:	4628      	mov	r0, r5
 8013172:	47b0      	blx	r6
 8013174:	1c41      	adds	r1, r0, #1
 8013176:	d1c8      	bne.n	801310a <__sflush_r+0x36>
 8013178:	682b      	ldr	r3, [r5, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d0c5      	beq.n	801310a <__sflush_r+0x36>
 801317e:	2b1d      	cmp	r3, #29
 8013180:	d001      	beq.n	8013186 <__sflush_r+0xb2>
 8013182:	2b16      	cmp	r3, #22
 8013184:	d101      	bne.n	801318a <__sflush_r+0xb6>
 8013186:	602f      	str	r7, [r5, #0]
 8013188:	e7b1      	b.n	80130ee <__sflush_r+0x1a>
 801318a:	89a3      	ldrh	r3, [r4, #12]
 801318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013190:	81a3      	strh	r3, [r4, #12]
 8013192:	e7ad      	b.n	80130f0 <__sflush_r+0x1c>
 8013194:	690f      	ldr	r7, [r1, #16]
 8013196:	2f00      	cmp	r7, #0
 8013198:	d0a9      	beq.n	80130ee <__sflush_r+0x1a>
 801319a:	0793      	lsls	r3, r2, #30
 801319c:	680e      	ldr	r6, [r1, #0]
 801319e:	bf08      	it	eq
 80131a0:	694b      	ldreq	r3, [r1, #20]
 80131a2:	600f      	str	r7, [r1, #0]
 80131a4:	bf18      	it	ne
 80131a6:	2300      	movne	r3, #0
 80131a8:	eba6 0807 	sub.w	r8, r6, r7
 80131ac:	608b      	str	r3, [r1, #8]
 80131ae:	f1b8 0f00 	cmp.w	r8, #0
 80131b2:	dd9c      	ble.n	80130ee <__sflush_r+0x1a>
 80131b4:	6a21      	ldr	r1, [r4, #32]
 80131b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131b8:	4643      	mov	r3, r8
 80131ba:	463a      	mov	r2, r7
 80131bc:	4628      	mov	r0, r5
 80131be:	47b0      	blx	r6
 80131c0:	2800      	cmp	r0, #0
 80131c2:	dc06      	bgt.n	80131d2 <__sflush_r+0xfe>
 80131c4:	89a3      	ldrh	r3, [r4, #12]
 80131c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131ca:	81a3      	strh	r3, [r4, #12]
 80131cc:	f04f 30ff 	mov.w	r0, #4294967295
 80131d0:	e78e      	b.n	80130f0 <__sflush_r+0x1c>
 80131d2:	4407      	add	r7, r0
 80131d4:	eba8 0800 	sub.w	r8, r8, r0
 80131d8:	e7e9      	b.n	80131ae <__sflush_r+0xda>
 80131da:	bf00      	nop
 80131dc:	dfbffffe 	.word	0xdfbffffe

080131e0 <_fflush_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	690b      	ldr	r3, [r1, #16]
 80131e4:	4605      	mov	r5, r0
 80131e6:	460c      	mov	r4, r1
 80131e8:	b913      	cbnz	r3, 80131f0 <_fflush_r+0x10>
 80131ea:	2500      	movs	r5, #0
 80131ec:	4628      	mov	r0, r5
 80131ee:	bd38      	pop	{r3, r4, r5, pc}
 80131f0:	b118      	cbz	r0, 80131fa <_fflush_r+0x1a>
 80131f2:	6a03      	ldr	r3, [r0, #32]
 80131f4:	b90b      	cbnz	r3, 80131fa <_fflush_r+0x1a>
 80131f6:	f7fd f8ab 	bl	8010350 <__sinit>
 80131fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d0f3      	beq.n	80131ea <_fflush_r+0xa>
 8013202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013204:	07d0      	lsls	r0, r2, #31
 8013206:	d404      	bmi.n	8013212 <_fflush_r+0x32>
 8013208:	0599      	lsls	r1, r3, #22
 801320a:	d402      	bmi.n	8013212 <_fflush_r+0x32>
 801320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801320e:	f7fd f9fc 	bl	801060a <__retarget_lock_acquire_recursive>
 8013212:	4628      	mov	r0, r5
 8013214:	4621      	mov	r1, r4
 8013216:	f7ff ff5d 	bl	80130d4 <__sflush_r>
 801321a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801321c:	07da      	lsls	r2, r3, #31
 801321e:	4605      	mov	r5, r0
 8013220:	d4e4      	bmi.n	80131ec <_fflush_r+0xc>
 8013222:	89a3      	ldrh	r3, [r4, #12]
 8013224:	059b      	lsls	r3, r3, #22
 8013226:	d4e1      	bmi.n	80131ec <_fflush_r+0xc>
 8013228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801322a:	f7fd f9ef 	bl	801060c <__retarget_lock_release_recursive>
 801322e:	e7dd      	b.n	80131ec <_fflush_r+0xc>

08013230 <__swbuf_r>:
 8013230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013232:	460e      	mov	r6, r1
 8013234:	4614      	mov	r4, r2
 8013236:	4605      	mov	r5, r0
 8013238:	b118      	cbz	r0, 8013242 <__swbuf_r+0x12>
 801323a:	6a03      	ldr	r3, [r0, #32]
 801323c:	b90b      	cbnz	r3, 8013242 <__swbuf_r+0x12>
 801323e:	f7fd f887 	bl	8010350 <__sinit>
 8013242:	69a3      	ldr	r3, [r4, #24]
 8013244:	60a3      	str	r3, [r4, #8]
 8013246:	89a3      	ldrh	r3, [r4, #12]
 8013248:	071a      	lsls	r2, r3, #28
 801324a:	d525      	bpl.n	8013298 <__swbuf_r+0x68>
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	b31b      	cbz	r3, 8013298 <__swbuf_r+0x68>
 8013250:	6823      	ldr	r3, [r4, #0]
 8013252:	6922      	ldr	r2, [r4, #16]
 8013254:	1a98      	subs	r0, r3, r2
 8013256:	6963      	ldr	r3, [r4, #20]
 8013258:	b2f6      	uxtb	r6, r6
 801325a:	4283      	cmp	r3, r0
 801325c:	4637      	mov	r7, r6
 801325e:	dc04      	bgt.n	801326a <__swbuf_r+0x3a>
 8013260:	4621      	mov	r1, r4
 8013262:	4628      	mov	r0, r5
 8013264:	f7ff ffbc 	bl	80131e0 <_fflush_r>
 8013268:	b9e0      	cbnz	r0, 80132a4 <__swbuf_r+0x74>
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	3b01      	subs	r3, #1
 801326e:	60a3      	str	r3, [r4, #8]
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	1c5a      	adds	r2, r3, #1
 8013274:	6022      	str	r2, [r4, #0]
 8013276:	701e      	strb	r6, [r3, #0]
 8013278:	6962      	ldr	r2, [r4, #20]
 801327a:	1c43      	adds	r3, r0, #1
 801327c:	429a      	cmp	r2, r3
 801327e:	d004      	beq.n	801328a <__swbuf_r+0x5a>
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	07db      	lsls	r3, r3, #31
 8013284:	d506      	bpl.n	8013294 <__swbuf_r+0x64>
 8013286:	2e0a      	cmp	r6, #10
 8013288:	d104      	bne.n	8013294 <__swbuf_r+0x64>
 801328a:	4621      	mov	r1, r4
 801328c:	4628      	mov	r0, r5
 801328e:	f7ff ffa7 	bl	80131e0 <_fflush_r>
 8013292:	b938      	cbnz	r0, 80132a4 <__swbuf_r+0x74>
 8013294:	4638      	mov	r0, r7
 8013296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013298:	4621      	mov	r1, r4
 801329a:	4628      	mov	r0, r5
 801329c:	f000 f806 	bl	80132ac <__swsetup_r>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d0d5      	beq.n	8013250 <__swbuf_r+0x20>
 80132a4:	f04f 37ff 	mov.w	r7, #4294967295
 80132a8:	e7f4      	b.n	8013294 <__swbuf_r+0x64>
	...

080132ac <__swsetup_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	4b2a      	ldr	r3, [pc, #168]	; (8013358 <__swsetup_r+0xac>)
 80132b0:	4605      	mov	r5, r0
 80132b2:	6818      	ldr	r0, [r3, #0]
 80132b4:	460c      	mov	r4, r1
 80132b6:	b118      	cbz	r0, 80132c0 <__swsetup_r+0x14>
 80132b8:	6a03      	ldr	r3, [r0, #32]
 80132ba:	b90b      	cbnz	r3, 80132c0 <__swsetup_r+0x14>
 80132bc:	f7fd f848 	bl	8010350 <__sinit>
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132c6:	0718      	lsls	r0, r3, #28
 80132c8:	d422      	bmi.n	8013310 <__swsetup_r+0x64>
 80132ca:	06d9      	lsls	r1, r3, #27
 80132cc:	d407      	bmi.n	80132de <__swsetup_r+0x32>
 80132ce:	2309      	movs	r3, #9
 80132d0:	602b      	str	r3, [r5, #0]
 80132d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80132d6:	81a3      	strh	r3, [r4, #12]
 80132d8:	f04f 30ff 	mov.w	r0, #4294967295
 80132dc:	e034      	b.n	8013348 <__swsetup_r+0x9c>
 80132de:	0758      	lsls	r0, r3, #29
 80132e0:	d512      	bpl.n	8013308 <__swsetup_r+0x5c>
 80132e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132e4:	b141      	cbz	r1, 80132f8 <__swsetup_r+0x4c>
 80132e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132ea:	4299      	cmp	r1, r3
 80132ec:	d002      	beq.n	80132f4 <__swsetup_r+0x48>
 80132ee:	4628      	mov	r0, r5
 80132f0:	f7fe f810 	bl	8011314 <_free_r>
 80132f4:	2300      	movs	r3, #0
 80132f6:	6363      	str	r3, [r4, #52]	; 0x34
 80132f8:	89a3      	ldrh	r3, [r4, #12]
 80132fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132fe:	81a3      	strh	r3, [r4, #12]
 8013300:	2300      	movs	r3, #0
 8013302:	6063      	str	r3, [r4, #4]
 8013304:	6923      	ldr	r3, [r4, #16]
 8013306:	6023      	str	r3, [r4, #0]
 8013308:	89a3      	ldrh	r3, [r4, #12]
 801330a:	f043 0308 	orr.w	r3, r3, #8
 801330e:	81a3      	strh	r3, [r4, #12]
 8013310:	6923      	ldr	r3, [r4, #16]
 8013312:	b94b      	cbnz	r3, 8013328 <__swsetup_r+0x7c>
 8013314:	89a3      	ldrh	r3, [r4, #12]
 8013316:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801331e:	d003      	beq.n	8013328 <__swsetup_r+0x7c>
 8013320:	4621      	mov	r1, r4
 8013322:	4628      	mov	r0, r5
 8013324:	f000 fc7e 	bl	8013c24 <__smakebuf_r>
 8013328:	89a0      	ldrh	r0, [r4, #12]
 801332a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801332e:	f010 0301 	ands.w	r3, r0, #1
 8013332:	d00a      	beq.n	801334a <__swsetup_r+0x9e>
 8013334:	2300      	movs	r3, #0
 8013336:	60a3      	str	r3, [r4, #8]
 8013338:	6963      	ldr	r3, [r4, #20]
 801333a:	425b      	negs	r3, r3
 801333c:	61a3      	str	r3, [r4, #24]
 801333e:	6923      	ldr	r3, [r4, #16]
 8013340:	b943      	cbnz	r3, 8013354 <__swsetup_r+0xa8>
 8013342:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013346:	d1c4      	bne.n	80132d2 <__swsetup_r+0x26>
 8013348:	bd38      	pop	{r3, r4, r5, pc}
 801334a:	0781      	lsls	r1, r0, #30
 801334c:	bf58      	it	pl
 801334e:	6963      	ldrpl	r3, [r4, #20]
 8013350:	60a3      	str	r3, [r4, #8]
 8013352:	e7f4      	b.n	801333e <__swsetup_r+0x92>
 8013354:	2000      	movs	r0, #0
 8013356:	e7f7      	b.n	8013348 <__swsetup_r+0x9c>
 8013358:	200001f4 	.word	0x200001f4

0801335c <memmove>:
 801335c:	4288      	cmp	r0, r1
 801335e:	b510      	push	{r4, lr}
 8013360:	eb01 0402 	add.w	r4, r1, r2
 8013364:	d902      	bls.n	801336c <memmove+0x10>
 8013366:	4284      	cmp	r4, r0
 8013368:	4623      	mov	r3, r4
 801336a:	d807      	bhi.n	801337c <memmove+0x20>
 801336c:	1e43      	subs	r3, r0, #1
 801336e:	42a1      	cmp	r1, r4
 8013370:	d008      	beq.n	8013384 <memmove+0x28>
 8013372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013376:	f803 2f01 	strb.w	r2, [r3, #1]!
 801337a:	e7f8      	b.n	801336e <memmove+0x12>
 801337c:	4402      	add	r2, r0
 801337e:	4601      	mov	r1, r0
 8013380:	428a      	cmp	r2, r1
 8013382:	d100      	bne.n	8013386 <memmove+0x2a>
 8013384:	bd10      	pop	{r4, pc}
 8013386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801338a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801338e:	e7f7      	b.n	8013380 <memmove+0x24>

08013390 <strncmp>:
 8013390:	b510      	push	{r4, lr}
 8013392:	b16a      	cbz	r2, 80133b0 <strncmp+0x20>
 8013394:	3901      	subs	r1, #1
 8013396:	1884      	adds	r4, r0, r2
 8013398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801339c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d103      	bne.n	80133ac <strncmp+0x1c>
 80133a4:	42a0      	cmp	r0, r4
 80133a6:	d001      	beq.n	80133ac <strncmp+0x1c>
 80133a8:	2a00      	cmp	r2, #0
 80133aa:	d1f5      	bne.n	8013398 <strncmp+0x8>
 80133ac:	1ad0      	subs	r0, r2, r3
 80133ae:	bd10      	pop	{r4, pc}
 80133b0:	4610      	mov	r0, r2
 80133b2:	e7fc      	b.n	80133ae <strncmp+0x1e>

080133b4 <_sbrk_r>:
 80133b4:	b538      	push	{r3, r4, r5, lr}
 80133b6:	4d06      	ldr	r5, [pc, #24]	; (80133d0 <_sbrk_r+0x1c>)
 80133b8:	2300      	movs	r3, #0
 80133ba:	4604      	mov	r4, r0
 80133bc:	4608      	mov	r0, r1
 80133be:	602b      	str	r3, [r5, #0]
 80133c0:	f7ef fc98 	bl	8002cf4 <_sbrk>
 80133c4:	1c43      	adds	r3, r0, #1
 80133c6:	d102      	bne.n	80133ce <_sbrk_r+0x1a>
 80133c8:	682b      	ldr	r3, [r5, #0]
 80133ca:	b103      	cbz	r3, 80133ce <_sbrk_r+0x1a>
 80133cc:	6023      	str	r3, [r4, #0]
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
 80133d0:	2000093c 	.word	0x2000093c

080133d4 <memcpy>:
 80133d4:	440a      	add	r2, r1
 80133d6:	4291      	cmp	r1, r2
 80133d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80133dc:	d100      	bne.n	80133e0 <memcpy+0xc>
 80133de:	4770      	bx	lr
 80133e0:	b510      	push	{r4, lr}
 80133e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133ea:	4291      	cmp	r1, r2
 80133ec:	d1f9      	bne.n	80133e2 <memcpy+0xe>
 80133ee:	bd10      	pop	{r4, pc}

080133f0 <nan>:
 80133f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80133f8 <nan+0x8>
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop
 80133f8:	00000000 	.word	0x00000000
 80133fc:	7ff80000 	.word	0x7ff80000

08013400 <__assert_func>:
 8013400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013402:	4614      	mov	r4, r2
 8013404:	461a      	mov	r2, r3
 8013406:	4b09      	ldr	r3, [pc, #36]	; (801342c <__assert_func+0x2c>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	4605      	mov	r5, r0
 801340c:	68d8      	ldr	r0, [r3, #12]
 801340e:	b14c      	cbz	r4, 8013424 <__assert_func+0x24>
 8013410:	4b07      	ldr	r3, [pc, #28]	; (8013430 <__assert_func+0x30>)
 8013412:	9100      	str	r1, [sp, #0]
 8013414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013418:	4906      	ldr	r1, [pc, #24]	; (8013434 <__assert_func+0x34>)
 801341a:	462b      	mov	r3, r5
 801341c:	f000 fbca 	bl	8013bb4 <fiprintf>
 8013420:	f000 fc5e 	bl	8013ce0 <abort>
 8013424:	4b04      	ldr	r3, [pc, #16]	; (8013438 <__assert_func+0x38>)
 8013426:	461c      	mov	r4, r3
 8013428:	e7f3      	b.n	8013412 <__assert_func+0x12>
 801342a:	bf00      	nop
 801342c:	200001f4 	.word	0x200001f4
 8013430:	08015542 	.word	0x08015542
 8013434:	0801554f 	.word	0x0801554f
 8013438:	0801557d 	.word	0x0801557d

0801343c <_calloc_r>:
 801343c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801343e:	fba1 2402 	umull	r2, r4, r1, r2
 8013442:	b94c      	cbnz	r4, 8013458 <_calloc_r+0x1c>
 8013444:	4611      	mov	r1, r2
 8013446:	9201      	str	r2, [sp, #4]
 8013448:	f7fd ffd8 	bl	80113fc <_malloc_r>
 801344c:	9a01      	ldr	r2, [sp, #4]
 801344e:	4605      	mov	r5, r0
 8013450:	b930      	cbnz	r0, 8013460 <_calloc_r+0x24>
 8013452:	4628      	mov	r0, r5
 8013454:	b003      	add	sp, #12
 8013456:	bd30      	pop	{r4, r5, pc}
 8013458:	220c      	movs	r2, #12
 801345a:	6002      	str	r2, [r0, #0]
 801345c:	2500      	movs	r5, #0
 801345e:	e7f8      	b.n	8013452 <_calloc_r+0x16>
 8013460:	4621      	mov	r1, r4
 8013462:	f7fd f854 	bl	801050e <memset>
 8013466:	e7f4      	b.n	8013452 <_calloc_r+0x16>

08013468 <rshift>:
 8013468:	6903      	ldr	r3, [r0, #16]
 801346a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801346e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013472:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013476:	f100 0414 	add.w	r4, r0, #20
 801347a:	dd45      	ble.n	8013508 <rshift+0xa0>
 801347c:	f011 011f 	ands.w	r1, r1, #31
 8013480:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013484:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013488:	d10c      	bne.n	80134a4 <rshift+0x3c>
 801348a:	f100 0710 	add.w	r7, r0, #16
 801348e:	4629      	mov	r1, r5
 8013490:	42b1      	cmp	r1, r6
 8013492:	d334      	bcc.n	80134fe <rshift+0x96>
 8013494:	1a9b      	subs	r3, r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	1eea      	subs	r2, r5, #3
 801349a:	4296      	cmp	r6, r2
 801349c:	bf38      	it	cc
 801349e:	2300      	movcc	r3, #0
 80134a0:	4423      	add	r3, r4
 80134a2:	e015      	b.n	80134d0 <rshift+0x68>
 80134a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80134a8:	f1c1 0820 	rsb	r8, r1, #32
 80134ac:	40cf      	lsrs	r7, r1
 80134ae:	f105 0e04 	add.w	lr, r5, #4
 80134b2:	46a1      	mov	r9, r4
 80134b4:	4576      	cmp	r6, lr
 80134b6:	46f4      	mov	ip, lr
 80134b8:	d815      	bhi.n	80134e6 <rshift+0x7e>
 80134ba:	1a9a      	subs	r2, r3, r2
 80134bc:	0092      	lsls	r2, r2, #2
 80134be:	3a04      	subs	r2, #4
 80134c0:	3501      	adds	r5, #1
 80134c2:	42ae      	cmp	r6, r5
 80134c4:	bf38      	it	cc
 80134c6:	2200      	movcc	r2, #0
 80134c8:	18a3      	adds	r3, r4, r2
 80134ca:	50a7      	str	r7, [r4, r2]
 80134cc:	b107      	cbz	r7, 80134d0 <rshift+0x68>
 80134ce:	3304      	adds	r3, #4
 80134d0:	1b1a      	subs	r2, r3, r4
 80134d2:	42a3      	cmp	r3, r4
 80134d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80134d8:	bf08      	it	eq
 80134da:	2300      	moveq	r3, #0
 80134dc:	6102      	str	r2, [r0, #16]
 80134de:	bf08      	it	eq
 80134e0:	6143      	streq	r3, [r0, #20]
 80134e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e6:	f8dc c000 	ldr.w	ip, [ip]
 80134ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80134ee:	ea4c 0707 	orr.w	r7, ip, r7
 80134f2:	f849 7b04 	str.w	r7, [r9], #4
 80134f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80134fa:	40cf      	lsrs	r7, r1
 80134fc:	e7da      	b.n	80134b4 <rshift+0x4c>
 80134fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8013502:	f847 cf04 	str.w	ip, [r7, #4]!
 8013506:	e7c3      	b.n	8013490 <rshift+0x28>
 8013508:	4623      	mov	r3, r4
 801350a:	e7e1      	b.n	80134d0 <rshift+0x68>

0801350c <__hexdig_fun>:
 801350c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013510:	2b09      	cmp	r3, #9
 8013512:	d802      	bhi.n	801351a <__hexdig_fun+0xe>
 8013514:	3820      	subs	r0, #32
 8013516:	b2c0      	uxtb	r0, r0
 8013518:	4770      	bx	lr
 801351a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801351e:	2b05      	cmp	r3, #5
 8013520:	d801      	bhi.n	8013526 <__hexdig_fun+0x1a>
 8013522:	3847      	subs	r0, #71	; 0x47
 8013524:	e7f7      	b.n	8013516 <__hexdig_fun+0xa>
 8013526:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801352a:	2b05      	cmp	r3, #5
 801352c:	d801      	bhi.n	8013532 <__hexdig_fun+0x26>
 801352e:	3827      	subs	r0, #39	; 0x27
 8013530:	e7f1      	b.n	8013516 <__hexdig_fun+0xa>
 8013532:	2000      	movs	r0, #0
 8013534:	4770      	bx	lr
	...

08013538 <__gethex>:
 8013538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353c:	4617      	mov	r7, r2
 801353e:	680a      	ldr	r2, [r1, #0]
 8013540:	b085      	sub	sp, #20
 8013542:	f102 0b02 	add.w	fp, r2, #2
 8013546:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801354a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801354e:	4681      	mov	r9, r0
 8013550:	468a      	mov	sl, r1
 8013552:	9302      	str	r3, [sp, #8]
 8013554:	32fe      	adds	r2, #254	; 0xfe
 8013556:	eb02 030b 	add.w	r3, r2, fp
 801355a:	46d8      	mov	r8, fp
 801355c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013560:	9301      	str	r3, [sp, #4]
 8013562:	2830      	cmp	r0, #48	; 0x30
 8013564:	d0f7      	beq.n	8013556 <__gethex+0x1e>
 8013566:	f7ff ffd1 	bl	801350c <__hexdig_fun>
 801356a:	4604      	mov	r4, r0
 801356c:	2800      	cmp	r0, #0
 801356e:	d138      	bne.n	80135e2 <__gethex+0xaa>
 8013570:	49a7      	ldr	r1, [pc, #668]	; (8013810 <__gethex+0x2d8>)
 8013572:	2201      	movs	r2, #1
 8013574:	4640      	mov	r0, r8
 8013576:	f7ff ff0b 	bl	8013390 <strncmp>
 801357a:	4606      	mov	r6, r0
 801357c:	2800      	cmp	r0, #0
 801357e:	d169      	bne.n	8013654 <__gethex+0x11c>
 8013580:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013584:	465d      	mov	r5, fp
 8013586:	f7ff ffc1 	bl	801350c <__hexdig_fun>
 801358a:	2800      	cmp	r0, #0
 801358c:	d064      	beq.n	8013658 <__gethex+0x120>
 801358e:	465a      	mov	r2, fp
 8013590:	7810      	ldrb	r0, [r2, #0]
 8013592:	2830      	cmp	r0, #48	; 0x30
 8013594:	4690      	mov	r8, r2
 8013596:	f102 0201 	add.w	r2, r2, #1
 801359a:	d0f9      	beq.n	8013590 <__gethex+0x58>
 801359c:	f7ff ffb6 	bl	801350c <__hexdig_fun>
 80135a0:	2301      	movs	r3, #1
 80135a2:	fab0 f480 	clz	r4, r0
 80135a6:	0964      	lsrs	r4, r4, #5
 80135a8:	465e      	mov	r6, fp
 80135aa:	9301      	str	r3, [sp, #4]
 80135ac:	4642      	mov	r2, r8
 80135ae:	4615      	mov	r5, r2
 80135b0:	3201      	adds	r2, #1
 80135b2:	7828      	ldrb	r0, [r5, #0]
 80135b4:	f7ff ffaa 	bl	801350c <__hexdig_fun>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d1f8      	bne.n	80135ae <__gethex+0x76>
 80135bc:	4994      	ldr	r1, [pc, #592]	; (8013810 <__gethex+0x2d8>)
 80135be:	2201      	movs	r2, #1
 80135c0:	4628      	mov	r0, r5
 80135c2:	f7ff fee5 	bl	8013390 <strncmp>
 80135c6:	b978      	cbnz	r0, 80135e8 <__gethex+0xb0>
 80135c8:	b946      	cbnz	r6, 80135dc <__gethex+0xa4>
 80135ca:	1c6e      	adds	r6, r5, #1
 80135cc:	4632      	mov	r2, r6
 80135ce:	4615      	mov	r5, r2
 80135d0:	3201      	adds	r2, #1
 80135d2:	7828      	ldrb	r0, [r5, #0]
 80135d4:	f7ff ff9a 	bl	801350c <__hexdig_fun>
 80135d8:	2800      	cmp	r0, #0
 80135da:	d1f8      	bne.n	80135ce <__gethex+0x96>
 80135dc:	1b73      	subs	r3, r6, r5
 80135de:	009e      	lsls	r6, r3, #2
 80135e0:	e004      	b.n	80135ec <__gethex+0xb4>
 80135e2:	2400      	movs	r4, #0
 80135e4:	4626      	mov	r6, r4
 80135e6:	e7e1      	b.n	80135ac <__gethex+0x74>
 80135e8:	2e00      	cmp	r6, #0
 80135ea:	d1f7      	bne.n	80135dc <__gethex+0xa4>
 80135ec:	782b      	ldrb	r3, [r5, #0]
 80135ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80135f2:	2b50      	cmp	r3, #80	; 0x50
 80135f4:	d13d      	bne.n	8013672 <__gethex+0x13a>
 80135f6:	786b      	ldrb	r3, [r5, #1]
 80135f8:	2b2b      	cmp	r3, #43	; 0x2b
 80135fa:	d02f      	beq.n	801365c <__gethex+0x124>
 80135fc:	2b2d      	cmp	r3, #45	; 0x2d
 80135fe:	d031      	beq.n	8013664 <__gethex+0x12c>
 8013600:	1c69      	adds	r1, r5, #1
 8013602:	f04f 0b00 	mov.w	fp, #0
 8013606:	7808      	ldrb	r0, [r1, #0]
 8013608:	f7ff ff80 	bl	801350c <__hexdig_fun>
 801360c:	1e42      	subs	r2, r0, #1
 801360e:	b2d2      	uxtb	r2, r2
 8013610:	2a18      	cmp	r2, #24
 8013612:	d82e      	bhi.n	8013672 <__gethex+0x13a>
 8013614:	f1a0 0210 	sub.w	r2, r0, #16
 8013618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801361c:	f7ff ff76 	bl	801350c <__hexdig_fun>
 8013620:	f100 3cff 	add.w	ip, r0, #4294967295
 8013624:	fa5f fc8c 	uxtb.w	ip, ip
 8013628:	f1bc 0f18 	cmp.w	ip, #24
 801362c:	d91d      	bls.n	801366a <__gethex+0x132>
 801362e:	f1bb 0f00 	cmp.w	fp, #0
 8013632:	d000      	beq.n	8013636 <__gethex+0xfe>
 8013634:	4252      	negs	r2, r2
 8013636:	4416      	add	r6, r2
 8013638:	f8ca 1000 	str.w	r1, [sl]
 801363c:	b1dc      	cbz	r4, 8013676 <__gethex+0x13e>
 801363e:	9b01      	ldr	r3, [sp, #4]
 8013640:	2b00      	cmp	r3, #0
 8013642:	bf14      	ite	ne
 8013644:	f04f 0800 	movne.w	r8, #0
 8013648:	f04f 0806 	moveq.w	r8, #6
 801364c:	4640      	mov	r0, r8
 801364e:	b005      	add	sp, #20
 8013650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013654:	4645      	mov	r5, r8
 8013656:	4626      	mov	r6, r4
 8013658:	2401      	movs	r4, #1
 801365a:	e7c7      	b.n	80135ec <__gethex+0xb4>
 801365c:	f04f 0b00 	mov.w	fp, #0
 8013660:	1ca9      	adds	r1, r5, #2
 8013662:	e7d0      	b.n	8013606 <__gethex+0xce>
 8013664:	f04f 0b01 	mov.w	fp, #1
 8013668:	e7fa      	b.n	8013660 <__gethex+0x128>
 801366a:	230a      	movs	r3, #10
 801366c:	fb03 0002 	mla	r0, r3, r2, r0
 8013670:	e7d0      	b.n	8013614 <__gethex+0xdc>
 8013672:	4629      	mov	r1, r5
 8013674:	e7e0      	b.n	8013638 <__gethex+0x100>
 8013676:	eba5 0308 	sub.w	r3, r5, r8
 801367a:	3b01      	subs	r3, #1
 801367c:	4621      	mov	r1, r4
 801367e:	2b07      	cmp	r3, #7
 8013680:	dc0a      	bgt.n	8013698 <__gethex+0x160>
 8013682:	4648      	mov	r0, r9
 8013684:	f7fd ff46 	bl	8011514 <_Balloc>
 8013688:	4604      	mov	r4, r0
 801368a:	b940      	cbnz	r0, 801369e <__gethex+0x166>
 801368c:	4b61      	ldr	r3, [pc, #388]	; (8013814 <__gethex+0x2dc>)
 801368e:	4602      	mov	r2, r0
 8013690:	21e4      	movs	r1, #228	; 0xe4
 8013692:	4861      	ldr	r0, [pc, #388]	; (8013818 <__gethex+0x2e0>)
 8013694:	f7ff feb4 	bl	8013400 <__assert_func>
 8013698:	3101      	adds	r1, #1
 801369a:	105b      	asrs	r3, r3, #1
 801369c:	e7ef      	b.n	801367e <__gethex+0x146>
 801369e:	f100 0a14 	add.w	sl, r0, #20
 80136a2:	2300      	movs	r3, #0
 80136a4:	495a      	ldr	r1, [pc, #360]	; (8013810 <__gethex+0x2d8>)
 80136a6:	f8cd a004 	str.w	sl, [sp, #4]
 80136aa:	469b      	mov	fp, r3
 80136ac:	45a8      	cmp	r8, r5
 80136ae:	d342      	bcc.n	8013736 <__gethex+0x1fe>
 80136b0:	9801      	ldr	r0, [sp, #4]
 80136b2:	f840 bb04 	str.w	fp, [r0], #4
 80136b6:	eba0 000a 	sub.w	r0, r0, sl
 80136ba:	1080      	asrs	r0, r0, #2
 80136bc:	6120      	str	r0, [r4, #16]
 80136be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80136c2:	4658      	mov	r0, fp
 80136c4:	f7fe f818 	bl	80116f8 <__hi0bits>
 80136c8:	683d      	ldr	r5, [r7, #0]
 80136ca:	eba8 0000 	sub.w	r0, r8, r0
 80136ce:	42a8      	cmp	r0, r5
 80136d0:	dd59      	ble.n	8013786 <__gethex+0x24e>
 80136d2:	eba0 0805 	sub.w	r8, r0, r5
 80136d6:	4641      	mov	r1, r8
 80136d8:	4620      	mov	r0, r4
 80136da:	f7fe fba7 	bl	8011e2c <__any_on>
 80136de:	4683      	mov	fp, r0
 80136e0:	b1b8      	cbz	r0, 8013712 <__gethex+0x1da>
 80136e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80136e6:	1159      	asrs	r1, r3, #5
 80136e8:	f003 021f 	and.w	r2, r3, #31
 80136ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80136f0:	f04f 0b01 	mov.w	fp, #1
 80136f4:	fa0b f202 	lsl.w	r2, fp, r2
 80136f8:	420a      	tst	r2, r1
 80136fa:	d00a      	beq.n	8013712 <__gethex+0x1da>
 80136fc:	455b      	cmp	r3, fp
 80136fe:	dd06      	ble.n	801370e <__gethex+0x1d6>
 8013700:	f1a8 0102 	sub.w	r1, r8, #2
 8013704:	4620      	mov	r0, r4
 8013706:	f7fe fb91 	bl	8011e2c <__any_on>
 801370a:	2800      	cmp	r0, #0
 801370c:	d138      	bne.n	8013780 <__gethex+0x248>
 801370e:	f04f 0b02 	mov.w	fp, #2
 8013712:	4641      	mov	r1, r8
 8013714:	4620      	mov	r0, r4
 8013716:	f7ff fea7 	bl	8013468 <rshift>
 801371a:	4446      	add	r6, r8
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	42b3      	cmp	r3, r6
 8013720:	da41      	bge.n	80137a6 <__gethex+0x26e>
 8013722:	4621      	mov	r1, r4
 8013724:	4648      	mov	r0, r9
 8013726:	f7fd ff35 	bl	8011594 <_Bfree>
 801372a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801372c:	2300      	movs	r3, #0
 801372e:	6013      	str	r3, [r2, #0]
 8013730:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013734:	e78a      	b.n	801364c <__gethex+0x114>
 8013736:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801373a:	2a2e      	cmp	r2, #46	; 0x2e
 801373c:	d014      	beq.n	8013768 <__gethex+0x230>
 801373e:	2b20      	cmp	r3, #32
 8013740:	d106      	bne.n	8013750 <__gethex+0x218>
 8013742:	9b01      	ldr	r3, [sp, #4]
 8013744:	f843 bb04 	str.w	fp, [r3], #4
 8013748:	f04f 0b00 	mov.w	fp, #0
 801374c:	9301      	str	r3, [sp, #4]
 801374e:	465b      	mov	r3, fp
 8013750:	7828      	ldrb	r0, [r5, #0]
 8013752:	9303      	str	r3, [sp, #12]
 8013754:	f7ff feda 	bl	801350c <__hexdig_fun>
 8013758:	9b03      	ldr	r3, [sp, #12]
 801375a:	f000 000f 	and.w	r0, r0, #15
 801375e:	4098      	lsls	r0, r3
 8013760:	ea4b 0b00 	orr.w	fp, fp, r0
 8013764:	3304      	adds	r3, #4
 8013766:	e7a1      	b.n	80136ac <__gethex+0x174>
 8013768:	45a8      	cmp	r8, r5
 801376a:	d8e8      	bhi.n	801373e <__gethex+0x206>
 801376c:	2201      	movs	r2, #1
 801376e:	4628      	mov	r0, r5
 8013770:	9303      	str	r3, [sp, #12]
 8013772:	f7ff fe0d 	bl	8013390 <strncmp>
 8013776:	4926      	ldr	r1, [pc, #152]	; (8013810 <__gethex+0x2d8>)
 8013778:	9b03      	ldr	r3, [sp, #12]
 801377a:	2800      	cmp	r0, #0
 801377c:	d1df      	bne.n	801373e <__gethex+0x206>
 801377e:	e795      	b.n	80136ac <__gethex+0x174>
 8013780:	f04f 0b03 	mov.w	fp, #3
 8013784:	e7c5      	b.n	8013712 <__gethex+0x1da>
 8013786:	da0b      	bge.n	80137a0 <__gethex+0x268>
 8013788:	eba5 0800 	sub.w	r8, r5, r0
 801378c:	4621      	mov	r1, r4
 801378e:	4642      	mov	r2, r8
 8013790:	4648      	mov	r0, r9
 8013792:	f7fe f919 	bl	80119c8 <__lshift>
 8013796:	eba6 0608 	sub.w	r6, r6, r8
 801379a:	4604      	mov	r4, r0
 801379c:	f100 0a14 	add.w	sl, r0, #20
 80137a0:	f04f 0b00 	mov.w	fp, #0
 80137a4:	e7ba      	b.n	801371c <__gethex+0x1e4>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	42b3      	cmp	r3, r6
 80137aa:	dd73      	ble.n	8013894 <__gethex+0x35c>
 80137ac:	1b9e      	subs	r6, r3, r6
 80137ae:	42b5      	cmp	r5, r6
 80137b0:	dc34      	bgt.n	801381c <__gethex+0x2e4>
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2b02      	cmp	r3, #2
 80137b6:	d023      	beq.n	8013800 <__gethex+0x2c8>
 80137b8:	2b03      	cmp	r3, #3
 80137ba:	d025      	beq.n	8013808 <__gethex+0x2d0>
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d115      	bne.n	80137ec <__gethex+0x2b4>
 80137c0:	42b5      	cmp	r5, r6
 80137c2:	d113      	bne.n	80137ec <__gethex+0x2b4>
 80137c4:	2d01      	cmp	r5, #1
 80137c6:	d10b      	bne.n	80137e0 <__gethex+0x2a8>
 80137c8:	9a02      	ldr	r2, [sp, #8]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6013      	str	r3, [r2, #0]
 80137ce:	2301      	movs	r3, #1
 80137d0:	6123      	str	r3, [r4, #16]
 80137d2:	f8ca 3000 	str.w	r3, [sl]
 80137d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80137dc:	601c      	str	r4, [r3, #0]
 80137de:	e735      	b.n	801364c <__gethex+0x114>
 80137e0:	1e69      	subs	r1, r5, #1
 80137e2:	4620      	mov	r0, r4
 80137e4:	f7fe fb22 	bl	8011e2c <__any_on>
 80137e8:	2800      	cmp	r0, #0
 80137ea:	d1ed      	bne.n	80137c8 <__gethex+0x290>
 80137ec:	4621      	mov	r1, r4
 80137ee:	4648      	mov	r0, r9
 80137f0:	f7fd fed0 	bl	8011594 <_Bfree>
 80137f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137f6:	2300      	movs	r3, #0
 80137f8:	6013      	str	r3, [r2, #0]
 80137fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80137fe:	e725      	b.n	801364c <__gethex+0x114>
 8013800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013802:	2b00      	cmp	r3, #0
 8013804:	d1f2      	bne.n	80137ec <__gethex+0x2b4>
 8013806:	e7df      	b.n	80137c8 <__gethex+0x290>
 8013808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801380a:	2b00      	cmp	r3, #0
 801380c:	d1dc      	bne.n	80137c8 <__gethex+0x290>
 801380e:	e7ed      	b.n	80137ec <__gethex+0x2b4>
 8013810:	080153d4 	.word	0x080153d4
 8013814:	08015269 	.word	0x08015269
 8013818:	0801557e 	.word	0x0801557e
 801381c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013820:	f1bb 0f00 	cmp.w	fp, #0
 8013824:	d133      	bne.n	801388e <__gethex+0x356>
 8013826:	f1b8 0f00 	cmp.w	r8, #0
 801382a:	d004      	beq.n	8013836 <__gethex+0x2fe>
 801382c:	4641      	mov	r1, r8
 801382e:	4620      	mov	r0, r4
 8013830:	f7fe fafc 	bl	8011e2c <__any_on>
 8013834:	4683      	mov	fp, r0
 8013836:	ea4f 1268 	mov.w	r2, r8, asr #5
 801383a:	2301      	movs	r3, #1
 801383c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013840:	f008 081f 	and.w	r8, r8, #31
 8013844:	fa03 f308 	lsl.w	r3, r3, r8
 8013848:	4213      	tst	r3, r2
 801384a:	4631      	mov	r1, r6
 801384c:	4620      	mov	r0, r4
 801384e:	bf18      	it	ne
 8013850:	f04b 0b02 	orrne.w	fp, fp, #2
 8013854:	1bad      	subs	r5, r5, r6
 8013856:	f7ff fe07 	bl	8013468 <rshift>
 801385a:	687e      	ldr	r6, [r7, #4]
 801385c:	f04f 0802 	mov.w	r8, #2
 8013860:	f1bb 0f00 	cmp.w	fp, #0
 8013864:	d04a      	beq.n	80138fc <__gethex+0x3c4>
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b02      	cmp	r3, #2
 801386a:	d016      	beq.n	801389a <__gethex+0x362>
 801386c:	2b03      	cmp	r3, #3
 801386e:	d018      	beq.n	80138a2 <__gethex+0x36a>
 8013870:	2b01      	cmp	r3, #1
 8013872:	d109      	bne.n	8013888 <__gethex+0x350>
 8013874:	f01b 0f02 	tst.w	fp, #2
 8013878:	d006      	beq.n	8013888 <__gethex+0x350>
 801387a:	f8da 3000 	ldr.w	r3, [sl]
 801387e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013882:	f01b 0f01 	tst.w	fp, #1
 8013886:	d10f      	bne.n	80138a8 <__gethex+0x370>
 8013888:	f048 0810 	orr.w	r8, r8, #16
 801388c:	e036      	b.n	80138fc <__gethex+0x3c4>
 801388e:	f04f 0b01 	mov.w	fp, #1
 8013892:	e7d0      	b.n	8013836 <__gethex+0x2fe>
 8013894:	f04f 0801 	mov.w	r8, #1
 8013898:	e7e2      	b.n	8013860 <__gethex+0x328>
 801389a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801389c:	f1c3 0301 	rsb	r3, r3, #1
 80138a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d0ef      	beq.n	8013888 <__gethex+0x350>
 80138a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80138ac:	f104 0214 	add.w	r2, r4, #20
 80138b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80138ba:	2300      	movs	r3, #0
 80138bc:	4694      	mov	ip, r2
 80138be:	f852 1b04 	ldr.w	r1, [r2], #4
 80138c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80138c6:	d01e      	beq.n	8013906 <__gethex+0x3ce>
 80138c8:	3101      	adds	r1, #1
 80138ca:	f8cc 1000 	str.w	r1, [ip]
 80138ce:	f1b8 0f02 	cmp.w	r8, #2
 80138d2:	f104 0214 	add.w	r2, r4, #20
 80138d6:	d13d      	bne.n	8013954 <__gethex+0x41c>
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	3b01      	subs	r3, #1
 80138dc:	42ab      	cmp	r3, r5
 80138de:	d10b      	bne.n	80138f8 <__gethex+0x3c0>
 80138e0:	1169      	asrs	r1, r5, #5
 80138e2:	2301      	movs	r3, #1
 80138e4:	f005 051f 	and.w	r5, r5, #31
 80138e8:	fa03 f505 	lsl.w	r5, r3, r5
 80138ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138f0:	421d      	tst	r5, r3
 80138f2:	bf18      	it	ne
 80138f4:	f04f 0801 	movne.w	r8, #1
 80138f8:	f048 0820 	orr.w	r8, r8, #32
 80138fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138fe:	601c      	str	r4, [r3, #0]
 8013900:	9b02      	ldr	r3, [sp, #8]
 8013902:	601e      	str	r6, [r3, #0]
 8013904:	e6a2      	b.n	801364c <__gethex+0x114>
 8013906:	4290      	cmp	r0, r2
 8013908:	f842 3c04 	str.w	r3, [r2, #-4]
 801390c:	d8d6      	bhi.n	80138bc <__gethex+0x384>
 801390e:	68a2      	ldr	r2, [r4, #8]
 8013910:	4593      	cmp	fp, r2
 8013912:	db17      	blt.n	8013944 <__gethex+0x40c>
 8013914:	6861      	ldr	r1, [r4, #4]
 8013916:	4648      	mov	r0, r9
 8013918:	3101      	adds	r1, #1
 801391a:	f7fd fdfb 	bl	8011514 <_Balloc>
 801391e:	4682      	mov	sl, r0
 8013920:	b918      	cbnz	r0, 801392a <__gethex+0x3f2>
 8013922:	4b1b      	ldr	r3, [pc, #108]	; (8013990 <__gethex+0x458>)
 8013924:	4602      	mov	r2, r0
 8013926:	2184      	movs	r1, #132	; 0x84
 8013928:	e6b3      	b.n	8013692 <__gethex+0x15a>
 801392a:	6922      	ldr	r2, [r4, #16]
 801392c:	3202      	adds	r2, #2
 801392e:	f104 010c 	add.w	r1, r4, #12
 8013932:	0092      	lsls	r2, r2, #2
 8013934:	300c      	adds	r0, #12
 8013936:	f7ff fd4d 	bl	80133d4 <memcpy>
 801393a:	4621      	mov	r1, r4
 801393c:	4648      	mov	r0, r9
 801393e:	f7fd fe29 	bl	8011594 <_Bfree>
 8013942:	4654      	mov	r4, sl
 8013944:	6922      	ldr	r2, [r4, #16]
 8013946:	1c51      	adds	r1, r2, #1
 8013948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801394c:	6121      	str	r1, [r4, #16]
 801394e:	2101      	movs	r1, #1
 8013950:	6151      	str	r1, [r2, #20]
 8013952:	e7bc      	b.n	80138ce <__gethex+0x396>
 8013954:	6921      	ldr	r1, [r4, #16]
 8013956:	4559      	cmp	r1, fp
 8013958:	dd0b      	ble.n	8013972 <__gethex+0x43a>
 801395a:	2101      	movs	r1, #1
 801395c:	4620      	mov	r0, r4
 801395e:	f7ff fd83 	bl	8013468 <rshift>
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	3601      	adds	r6, #1
 8013966:	42b3      	cmp	r3, r6
 8013968:	f6ff aedb 	blt.w	8013722 <__gethex+0x1ea>
 801396c:	f04f 0801 	mov.w	r8, #1
 8013970:	e7c2      	b.n	80138f8 <__gethex+0x3c0>
 8013972:	f015 051f 	ands.w	r5, r5, #31
 8013976:	d0f9      	beq.n	801396c <__gethex+0x434>
 8013978:	9b01      	ldr	r3, [sp, #4]
 801397a:	441a      	add	r2, r3
 801397c:	f1c5 0520 	rsb	r5, r5, #32
 8013980:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013984:	f7fd feb8 	bl	80116f8 <__hi0bits>
 8013988:	42a8      	cmp	r0, r5
 801398a:	dbe6      	blt.n	801395a <__gethex+0x422>
 801398c:	e7ee      	b.n	801396c <__gethex+0x434>
 801398e:	bf00      	nop
 8013990:	08015269 	.word	0x08015269

08013994 <L_shift>:
 8013994:	f1c2 0208 	rsb	r2, r2, #8
 8013998:	0092      	lsls	r2, r2, #2
 801399a:	b570      	push	{r4, r5, r6, lr}
 801399c:	f1c2 0620 	rsb	r6, r2, #32
 80139a0:	6843      	ldr	r3, [r0, #4]
 80139a2:	6804      	ldr	r4, [r0, #0]
 80139a4:	fa03 f506 	lsl.w	r5, r3, r6
 80139a8:	432c      	orrs	r4, r5
 80139aa:	40d3      	lsrs	r3, r2
 80139ac:	6004      	str	r4, [r0, #0]
 80139ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80139b2:	4288      	cmp	r0, r1
 80139b4:	d3f4      	bcc.n	80139a0 <L_shift+0xc>
 80139b6:	bd70      	pop	{r4, r5, r6, pc}

080139b8 <__match>:
 80139b8:	b530      	push	{r4, r5, lr}
 80139ba:	6803      	ldr	r3, [r0, #0]
 80139bc:	3301      	adds	r3, #1
 80139be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139c2:	b914      	cbnz	r4, 80139ca <__match+0x12>
 80139c4:	6003      	str	r3, [r0, #0]
 80139c6:	2001      	movs	r0, #1
 80139c8:	bd30      	pop	{r4, r5, pc}
 80139ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80139d2:	2d19      	cmp	r5, #25
 80139d4:	bf98      	it	ls
 80139d6:	3220      	addls	r2, #32
 80139d8:	42a2      	cmp	r2, r4
 80139da:	d0f0      	beq.n	80139be <__match+0x6>
 80139dc:	2000      	movs	r0, #0
 80139de:	e7f3      	b.n	80139c8 <__match+0x10>

080139e0 <__hexnan>:
 80139e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e4:	680b      	ldr	r3, [r1, #0]
 80139e6:	6801      	ldr	r1, [r0, #0]
 80139e8:	115e      	asrs	r6, r3, #5
 80139ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80139ee:	f013 031f 	ands.w	r3, r3, #31
 80139f2:	b087      	sub	sp, #28
 80139f4:	bf18      	it	ne
 80139f6:	3604      	addne	r6, #4
 80139f8:	2500      	movs	r5, #0
 80139fa:	1f37      	subs	r7, r6, #4
 80139fc:	4682      	mov	sl, r0
 80139fe:	4690      	mov	r8, r2
 8013a00:	9301      	str	r3, [sp, #4]
 8013a02:	f846 5c04 	str.w	r5, [r6, #-4]
 8013a06:	46b9      	mov	r9, r7
 8013a08:	463c      	mov	r4, r7
 8013a0a:	9502      	str	r5, [sp, #8]
 8013a0c:	46ab      	mov	fp, r5
 8013a0e:	784a      	ldrb	r2, [r1, #1]
 8013a10:	1c4b      	adds	r3, r1, #1
 8013a12:	9303      	str	r3, [sp, #12]
 8013a14:	b342      	cbz	r2, 8013a68 <__hexnan+0x88>
 8013a16:	4610      	mov	r0, r2
 8013a18:	9105      	str	r1, [sp, #20]
 8013a1a:	9204      	str	r2, [sp, #16]
 8013a1c:	f7ff fd76 	bl	801350c <__hexdig_fun>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d14f      	bne.n	8013ac4 <__hexnan+0xe4>
 8013a24:	9a04      	ldr	r2, [sp, #16]
 8013a26:	9905      	ldr	r1, [sp, #20]
 8013a28:	2a20      	cmp	r2, #32
 8013a2a:	d818      	bhi.n	8013a5e <__hexnan+0x7e>
 8013a2c:	9b02      	ldr	r3, [sp, #8]
 8013a2e:	459b      	cmp	fp, r3
 8013a30:	dd13      	ble.n	8013a5a <__hexnan+0x7a>
 8013a32:	454c      	cmp	r4, r9
 8013a34:	d206      	bcs.n	8013a44 <__hexnan+0x64>
 8013a36:	2d07      	cmp	r5, #7
 8013a38:	dc04      	bgt.n	8013a44 <__hexnan+0x64>
 8013a3a:	462a      	mov	r2, r5
 8013a3c:	4649      	mov	r1, r9
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f7ff ffa8 	bl	8013994 <L_shift>
 8013a44:	4544      	cmp	r4, r8
 8013a46:	d950      	bls.n	8013aea <__hexnan+0x10a>
 8013a48:	2300      	movs	r3, #0
 8013a4a:	f1a4 0904 	sub.w	r9, r4, #4
 8013a4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a52:	f8cd b008 	str.w	fp, [sp, #8]
 8013a56:	464c      	mov	r4, r9
 8013a58:	461d      	mov	r5, r3
 8013a5a:	9903      	ldr	r1, [sp, #12]
 8013a5c:	e7d7      	b.n	8013a0e <__hexnan+0x2e>
 8013a5e:	2a29      	cmp	r2, #41	; 0x29
 8013a60:	d155      	bne.n	8013b0e <__hexnan+0x12e>
 8013a62:	3102      	adds	r1, #2
 8013a64:	f8ca 1000 	str.w	r1, [sl]
 8013a68:	f1bb 0f00 	cmp.w	fp, #0
 8013a6c:	d04f      	beq.n	8013b0e <__hexnan+0x12e>
 8013a6e:	454c      	cmp	r4, r9
 8013a70:	d206      	bcs.n	8013a80 <__hexnan+0xa0>
 8013a72:	2d07      	cmp	r5, #7
 8013a74:	dc04      	bgt.n	8013a80 <__hexnan+0xa0>
 8013a76:	462a      	mov	r2, r5
 8013a78:	4649      	mov	r1, r9
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f7ff ff8a 	bl	8013994 <L_shift>
 8013a80:	4544      	cmp	r4, r8
 8013a82:	d934      	bls.n	8013aee <__hexnan+0x10e>
 8013a84:	f1a8 0204 	sub.w	r2, r8, #4
 8013a88:	4623      	mov	r3, r4
 8013a8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013a8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013a92:	429f      	cmp	r7, r3
 8013a94:	d2f9      	bcs.n	8013a8a <__hexnan+0xaa>
 8013a96:	1b3b      	subs	r3, r7, r4
 8013a98:	f023 0303 	bic.w	r3, r3, #3
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	3e03      	subs	r6, #3
 8013aa0:	3401      	adds	r4, #1
 8013aa2:	42a6      	cmp	r6, r4
 8013aa4:	bf38      	it	cc
 8013aa6:	2304      	movcc	r3, #4
 8013aa8:	4443      	add	r3, r8
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f843 2b04 	str.w	r2, [r3], #4
 8013ab0:	429f      	cmp	r7, r3
 8013ab2:	d2fb      	bcs.n	8013aac <__hexnan+0xcc>
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	b91b      	cbnz	r3, 8013ac0 <__hexnan+0xe0>
 8013ab8:	4547      	cmp	r7, r8
 8013aba:	d126      	bne.n	8013b0a <__hexnan+0x12a>
 8013abc:	2301      	movs	r3, #1
 8013abe:	603b      	str	r3, [r7, #0]
 8013ac0:	2005      	movs	r0, #5
 8013ac2:	e025      	b.n	8013b10 <__hexnan+0x130>
 8013ac4:	3501      	adds	r5, #1
 8013ac6:	2d08      	cmp	r5, #8
 8013ac8:	f10b 0b01 	add.w	fp, fp, #1
 8013acc:	dd06      	ble.n	8013adc <__hexnan+0xfc>
 8013ace:	4544      	cmp	r4, r8
 8013ad0:	d9c3      	bls.n	8013a5a <__hexnan+0x7a>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ad8:	2501      	movs	r5, #1
 8013ada:	3c04      	subs	r4, #4
 8013adc:	6822      	ldr	r2, [r4, #0]
 8013ade:	f000 000f 	and.w	r0, r0, #15
 8013ae2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013ae6:	6020      	str	r0, [r4, #0]
 8013ae8:	e7b7      	b.n	8013a5a <__hexnan+0x7a>
 8013aea:	2508      	movs	r5, #8
 8013aec:	e7b5      	b.n	8013a5a <__hexnan+0x7a>
 8013aee:	9b01      	ldr	r3, [sp, #4]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d0df      	beq.n	8013ab4 <__hexnan+0xd4>
 8013af4:	f1c3 0320 	rsb	r3, r3, #32
 8013af8:	f04f 32ff 	mov.w	r2, #4294967295
 8013afc:	40da      	lsrs	r2, r3
 8013afe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013b02:	4013      	ands	r3, r2
 8013b04:	f846 3c04 	str.w	r3, [r6, #-4]
 8013b08:	e7d4      	b.n	8013ab4 <__hexnan+0xd4>
 8013b0a:	3f04      	subs	r7, #4
 8013b0c:	e7d2      	b.n	8013ab4 <__hexnan+0xd4>
 8013b0e:	2004      	movs	r0, #4
 8013b10:	b007      	add	sp, #28
 8013b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b16 <__ascii_mbtowc>:
 8013b16:	b082      	sub	sp, #8
 8013b18:	b901      	cbnz	r1, 8013b1c <__ascii_mbtowc+0x6>
 8013b1a:	a901      	add	r1, sp, #4
 8013b1c:	b142      	cbz	r2, 8013b30 <__ascii_mbtowc+0x1a>
 8013b1e:	b14b      	cbz	r3, 8013b34 <__ascii_mbtowc+0x1e>
 8013b20:	7813      	ldrb	r3, [r2, #0]
 8013b22:	600b      	str	r3, [r1, #0]
 8013b24:	7812      	ldrb	r2, [r2, #0]
 8013b26:	1e10      	subs	r0, r2, #0
 8013b28:	bf18      	it	ne
 8013b2a:	2001      	movne	r0, #1
 8013b2c:	b002      	add	sp, #8
 8013b2e:	4770      	bx	lr
 8013b30:	4610      	mov	r0, r2
 8013b32:	e7fb      	b.n	8013b2c <__ascii_mbtowc+0x16>
 8013b34:	f06f 0001 	mvn.w	r0, #1
 8013b38:	e7f8      	b.n	8013b2c <__ascii_mbtowc+0x16>

08013b3a <_realloc_r>:
 8013b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3e:	4680      	mov	r8, r0
 8013b40:	4614      	mov	r4, r2
 8013b42:	460e      	mov	r6, r1
 8013b44:	b921      	cbnz	r1, 8013b50 <_realloc_r+0x16>
 8013b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	f7fd bc56 	b.w	80113fc <_malloc_r>
 8013b50:	b92a      	cbnz	r2, 8013b5e <_realloc_r+0x24>
 8013b52:	f7fd fbdf 	bl	8011314 <_free_r>
 8013b56:	4625      	mov	r5, r4
 8013b58:	4628      	mov	r0, r5
 8013b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b5e:	f000 f8c6 	bl	8013cee <_malloc_usable_size_r>
 8013b62:	4284      	cmp	r4, r0
 8013b64:	4607      	mov	r7, r0
 8013b66:	d802      	bhi.n	8013b6e <_realloc_r+0x34>
 8013b68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b6c:	d812      	bhi.n	8013b94 <_realloc_r+0x5a>
 8013b6e:	4621      	mov	r1, r4
 8013b70:	4640      	mov	r0, r8
 8013b72:	f7fd fc43 	bl	80113fc <_malloc_r>
 8013b76:	4605      	mov	r5, r0
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d0ed      	beq.n	8013b58 <_realloc_r+0x1e>
 8013b7c:	42bc      	cmp	r4, r7
 8013b7e:	4622      	mov	r2, r4
 8013b80:	4631      	mov	r1, r6
 8013b82:	bf28      	it	cs
 8013b84:	463a      	movcs	r2, r7
 8013b86:	f7ff fc25 	bl	80133d4 <memcpy>
 8013b8a:	4631      	mov	r1, r6
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	f7fd fbc1 	bl	8011314 <_free_r>
 8013b92:	e7e1      	b.n	8013b58 <_realloc_r+0x1e>
 8013b94:	4635      	mov	r5, r6
 8013b96:	e7df      	b.n	8013b58 <_realloc_r+0x1e>

08013b98 <__ascii_wctomb>:
 8013b98:	b149      	cbz	r1, 8013bae <__ascii_wctomb+0x16>
 8013b9a:	2aff      	cmp	r2, #255	; 0xff
 8013b9c:	bf85      	ittet	hi
 8013b9e:	238a      	movhi	r3, #138	; 0x8a
 8013ba0:	6003      	strhi	r3, [r0, #0]
 8013ba2:	700a      	strbls	r2, [r1, #0]
 8013ba4:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ba8:	bf98      	it	ls
 8013baa:	2001      	movls	r0, #1
 8013bac:	4770      	bx	lr
 8013bae:	4608      	mov	r0, r1
 8013bb0:	4770      	bx	lr
	...

08013bb4 <fiprintf>:
 8013bb4:	b40e      	push	{r1, r2, r3}
 8013bb6:	b503      	push	{r0, r1, lr}
 8013bb8:	4601      	mov	r1, r0
 8013bba:	ab03      	add	r3, sp, #12
 8013bbc:	4805      	ldr	r0, [pc, #20]	; (8013bd4 <fiprintf+0x20>)
 8013bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bc2:	6800      	ldr	r0, [r0, #0]
 8013bc4:	9301      	str	r3, [sp, #4]
 8013bc6:	f7ff f96b 	bl	8012ea0 <_vfiprintf_r>
 8013bca:	b002      	add	sp, #8
 8013bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bd0:	b003      	add	sp, #12
 8013bd2:	4770      	bx	lr
 8013bd4:	200001f4 	.word	0x200001f4

08013bd8 <__swhatbuf_r>:
 8013bd8:	b570      	push	{r4, r5, r6, lr}
 8013bda:	460c      	mov	r4, r1
 8013bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be0:	2900      	cmp	r1, #0
 8013be2:	b096      	sub	sp, #88	; 0x58
 8013be4:	4615      	mov	r5, r2
 8013be6:	461e      	mov	r6, r3
 8013be8:	da0d      	bge.n	8013c06 <__swhatbuf_r+0x2e>
 8013bea:	89a3      	ldrh	r3, [r4, #12]
 8013bec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013bf0:	f04f 0100 	mov.w	r1, #0
 8013bf4:	bf0c      	ite	eq
 8013bf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013bfa:	2340      	movne	r3, #64	; 0x40
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	6031      	str	r1, [r6, #0]
 8013c00:	602b      	str	r3, [r5, #0]
 8013c02:	b016      	add	sp, #88	; 0x58
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	466a      	mov	r2, sp
 8013c08:	f000 f848 	bl	8013c9c <_fstat_r>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	dbec      	blt.n	8013bea <__swhatbuf_r+0x12>
 8013c10:	9901      	ldr	r1, [sp, #4]
 8013c12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013c16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013c1a:	4259      	negs	r1, r3
 8013c1c:	4159      	adcs	r1, r3
 8013c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c22:	e7eb      	b.n	8013bfc <__swhatbuf_r+0x24>

08013c24 <__smakebuf_r>:
 8013c24:	898b      	ldrh	r3, [r1, #12]
 8013c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c28:	079d      	lsls	r5, r3, #30
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	d507      	bpl.n	8013c40 <__smakebuf_r+0x1c>
 8013c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	6123      	str	r3, [r4, #16]
 8013c38:	2301      	movs	r3, #1
 8013c3a:	6163      	str	r3, [r4, #20]
 8013c3c:	b002      	add	sp, #8
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}
 8013c40:	ab01      	add	r3, sp, #4
 8013c42:	466a      	mov	r2, sp
 8013c44:	f7ff ffc8 	bl	8013bd8 <__swhatbuf_r>
 8013c48:	9900      	ldr	r1, [sp, #0]
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f7fd fbd5 	bl	80113fc <_malloc_r>
 8013c52:	b948      	cbnz	r0, 8013c68 <__smakebuf_r+0x44>
 8013c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c58:	059a      	lsls	r2, r3, #22
 8013c5a:	d4ef      	bmi.n	8013c3c <__smakebuf_r+0x18>
 8013c5c:	f023 0303 	bic.w	r3, r3, #3
 8013c60:	f043 0302 	orr.w	r3, r3, #2
 8013c64:	81a3      	strh	r3, [r4, #12]
 8013c66:	e7e3      	b.n	8013c30 <__smakebuf_r+0xc>
 8013c68:	89a3      	ldrh	r3, [r4, #12]
 8013c6a:	6020      	str	r0, [r4, #0]
 8013c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c70:	81a3      	strh	r3, [r4, #12]
 8013c72:	9b00      	ldr	r3, [sp, #0]
 8013c74:	6163      	str	r3, [r4, #20]
 8013c76:	9b01      	ldr	r3, [sp, #4]
 8013c78:	6120      	str	r0, [r4, #16]
 8013c7a:	b15b      	cbz	r3, 8013c94 <__smakebuf_r+0x70>
 8013c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c80:	4630      	mov	r0, r6
 8013c82:	f000 f81d 	bl	8013cc0 <_isatty_r>
 8013c86:	b128      	cbz	r0, 8013c94 <__smakebuf_r+0x70>
 8013c88:	89a3      	ldrh	r3, [r4, #12]
 8013c8a:	f023 0303 	bic.w	r3, r3, #3
 8013c8e:	f043 0301 	orr.w	r3, r3, #1
 8013c92:	81a3      	strh	r3, [r4, #12]
 8013c94:	89a3      	ldrh	r3, [r4, #12]
 8013c96:	431d      	orrs	r5, r3
 8013c98:	81a5      	strh	r5, [r4, #12]
 8013c9a:	e7cf      	b.n	8013c3c <__smakebuf_r+0x18>

08013c9c <_fstat_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4d07      	ldr	r5, [pc, #28]	; (8013cbc <_fstat_r+0x20>)
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	4608      	mov	r0, r1
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	602b      	str	r3, [r5, #0]
 8013caa:	f7ee fffa 	bl	8002ca2 <_fstat>
 8013cae:	1c43      	adds	r3, r0, #1
 8013cb0:	d102      	bne.n	8013cb8 <_fstat_r+0x1c>
 8013cb2:	682b      	ldr	r3, [r5, #0]
 8013cb4:	b103      	cbz	r3, 8013cb8 <_fstat_r+0x1c>
 8013cb6:	6023      	str	r3, [r4, #0]
 8013cb8:	bd38      	pop	{r3, r4, r5, pc}
 8013cba:	bf00      	nop
 8013cbc:	2000093c 	.word	0x2000093c

08013cc0 <_isatty_r>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	4d06      	ldr	r5, [pc, #24]	; (8013cdc <_isatty_r+0x1c>)
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	4608      	mov	r0, r1
 8013cca:	602b      	str	r3, [r5, #0]
 8013ccc:	f7ee fff9 	bl	8002cc2 <_isatty>
 8013cd0:	1c43      	adds	r3, r0, #1
 8013cd2:	d102      	bne.n	8013cda <_isatty_r+0x1a>
 8013cd4:	682b      	ldr	r3, [r5, #0]
 8013cd6:	b103      	cbz	r3, 8013cda <_isatty_r+0x1a>
 8013cd8:	6023      	str	r3, [r4, #0]
 8013cda:	bd38      	pop	{r3, r4, r5, pc}
 8013cdc:	2000093c 	.word	0x2000093c

08013ce0 <abort>:
 8013ce0:	b508      	push	{r3, lr}
 8013ce2:	2006      	movs	r0, #6
 8013ce4:	f000 f834 	bl	8013d50 <raise>
 8013ce8:	2001      	movs	r0, #1
 8013cea:	f7ee ff8b 	bl	8002c04 <_exit>

08013cee <_malloc_usable_size_r>:
 8013cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cf2:	1f18      	subs	r0, r3, #4
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	bfbc      	itt	lt
 8013cf8:	580b      	ldrlt	r3, [r1, r0]
 8013cfa:	18c0      	addlt	r0, r0, r3
 8013cfc:	4770      	bx	lr

08013cfe <_raise_r>:
 8013cfe:	291f      	cmp	r1, #31
 8013d00:	b538      	push	{r3, r4, r5, lr}
 8013d02:	4604      	mov	r4, r0
 8013d04:	460d      	mov	r5, r1
 8013d06:	d904      	bls.n	8013d12 <_raise_r+0x14>
 8013d08:	2316      	movs	r3, #22
 8013d0a:	6003      	str	r3, [r0, #0]
 8013d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d10:	bd38      	pop	{r3, r4, r5, pc}
 8013d12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013d14:	b112      	cbz	r2, 8013d1c <_raise_r+0x1e>
 8013d16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d1a:	b94b      	cbnz	r3, 8013d30 <_raise_r+0x32>
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	f000 f831 	bl	8013d84 <_getpid_r>
 8013d22:	462a      	mov	r2, r5
 8013d24:	4601      	mov	r1, r0
 8013d26:	4620      	mov	r0, r4
 8013d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d2c:	f000 b818 	b.w	8013d60 <_kill_r>
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d00a      	beq.n	8013d4a <_raise_r+0x4c>
 8013d34:	1c59      	adds	r1, r3, #1
 8013d36:	d103      	bne.n	8013d40 <_raise_r+0x42>
 8013d38:	2316      	movs	r3, #22
 8013d3a:	6003      	str	r3, [r0, #0]
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	e7e7      	b.n	8013d10 <_raise_r+0x12>
 8013d40:	2400      	movs	r4, #0
 8013d42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d46:	4628      	mov	r0, r5
 8013d48:	4798      	blx	r3
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	e7e0      	b.n	8013d10 <_raise_r+0x12>
	...

08013d50 <raise>:
 8013d50:	4b02      	ldr	r3, [pc, #8]	; (8013d5c <raise+0xc>)
 8013d52:	4601      	mov	r1, r0
 8013d54:	6818      	ldr	r0, [r3, #0]
 8013d56:	f7ff bfd2 	b.w	8013cfe <_raise_r>
 8013d5a:	bf00      	nop
 8013d5c:	200001f4 	.word	0x200001f4

08013d60 <_kill_r>:
 8013d60:	b538      	push	{r3, r4, r5, lr}
 8013d62:	4d07      	ldr	r5, [pc, #28]	; (8013d80 <_kill_r+0x20>)
 8013d64:	2300      	movs	r3, #0
 8013d66:	4604      	mov	r4, r0
 8013d68:	4608      	mov	r0, r1
 8013d6a:	4611      	mov	r1, r2
 8013d6c:	602b      	str	r3, [r5, #0]
 8013d6e:	f7ee ff39 	bl	8002be4 <_kill>
 8013d72:	1c43      	adds	r3, r0, #1
 8013d74:	d102      	bne.n	8013d7c <_kill_r+0x1c>
 8013d76:	682b      	ldr	r3, [r5, #0]
 8013d78:	b103      	cbz	r3, 8013d7c <_kill_r+0x1c>
 8013d7a:	6023      	str	r3, [r4, #0]
 8013d7c:	bd38      	pop	{r3, r4, r5, pc}
 8013d7e:	bf00      	nop
 8013d80:	2000093c 	.word	0x2000093c

08013d84 <_getpid_r>:
 8013d84:	f7ee bf26 	b.w	8002bd4 <_getpid>

08013d88 <pow>:
 8013d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d8a:	ed2d 8b02 	vpush	{d8}
 8013d8e:	eeb0 8a40 	vmov.f32	s16, s0
 8013d92:	eef0 8a60 	vmov.f32	s17, s1
 8013d96:	ec55 4b11 	vmov	r4, r5, d1
 8013d9a:	f000 f8ad 	bl	8013ef8 <__ieee754_pow>
 8013d9e:	4622      	mov	r2, r4
 8013da0:	462b      	mov	r3, r5
 8013da2:	4620      	mov	r0, r4
 8013da4:	4629      	mov	r1, r5
 8013da6:	ec57 6b10 	vmov	r6, r7, d0
 8013daa:	f7ec febf 	bl	8000b2c <__aeabi_dcmpun>
 8013dae:	2800      	cmp	r0, #0
 8013db0:	d13b      	bne.n	8013e2a <pow+0xa2>
 8013db2:	ec51 0b18 	vmov	r0, r1, d8
 8013db6:	2200      	movs	r2, #0
 8013db8:	2300      	movs	r3, #0
 8013dba:	f7ec fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8013dbe:	b1b8      	cbz	r0, 8013df0 <pow+0x68>
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7ec fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	d146      	bne.n	8013e5e <pow+0xd6>
 8013dd0:	ec45 4b10 	vmov	d0, r4, r5
 8013dd4:	f000 f848 	bl	8013e68 <finite>
 8013dd8:	b338      	cbz	r0, 8013e2a <pow+0xa2>
 8013dda:	2200      	movs	r2, #0
 8013ddc:	2300      	movs	r3, #0
 8013dde:	4620      	mov	r0, r4
 8013de0:	4629      	mov	r1, r5
 8013de2:	f7ec fe7b 	bl	8000adc <__aeabi_dcmplt>
 8013de6:	b300      	cbz	r0, 8013e2a <pow+0xa2>
 8013de8:	f7fc fbe4 	bl	80105b4 <__errno>
 8013dec:	2322      	movs	r3, #34	; 0x22
 8013dee:	e01b      	b.n	8013e28 <pow+0xa0>
 8013df0:	ec47 6b10 	vmov	d0, r6, r7
 8013df4:	f000 f838 	bl	8013e68 <finite>
 8013df8:	b9e0      	cbnz	r0, 8013e34 <pow+0xac>
 8013dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8013dfe:	eef0 0a68 	vmov.f32	s1, s17
 8013e02:	f000 f831 	bl	8013e68 <finite>
 8013e06:	b1a8      	cbz	r0, 8013e34 <pow+0xac>
 8013e08:	ec45 4b10 	vmov	d0, r4, r5
 8013e0c:	f000 f82c 	bl	8013e68 <finite>
 8013e10:	b180      	cbz	r0, 8013e34 <pow+0xac>
 8013e12:	4632      	mov	r2, r6
 8013e14:	463b      	mov	r3, r7
 8013e16:	4630      	mov	r0, r6
 8013e18:	4639      	mov	r1, r7
 8013e1a:	f7ec fe87 	bl	8000b2c <__aeabi_dcmpun>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d0e2      	beq.n	8013de8 <pow+0x60>
 8013e22:	f7fc fbc7 	bl	80105b4 <__errno>
 8013e26:	2321      	movs	r3, #33	; 0x21
 8013e28:	6003      	str	r3, [r0, #0]
 8013e2a:	ecbd 8b02 	vpop	{d8}
 8013e2e:	ec47 6b10 	vmov	d0, r6, r7
 8013e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e34:	2200      	movs	r2, #0
 8013e36:	2300      	movs	r3, #0
 8013e38:	4630      	mov	r0, r6
 8013e3a:	4639      	mov	r1, r7
 8013e3c:	f7ec fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	d0f2      	beq.n	8013e2a <pow+0xa2>
 8013e44:	eeb0 0a48 	vmov.f32	s0, s16
 8013e48:	eef0 0a68 	vmov.f32	s1, s17
 8013e4c:	f000 f80c 	bl	8013e68 <finite>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d0ea      	beq.n	8013e2a <pow+0xa2>
 8013e54:	ec45 4b10 	vmov	d0, r4, r5
 8013e58:	f000 f806 	bl	8013e68 <finite>
 8013e5c:	e7c3      	b.n	8013de6 <pow+0x5e>
 8013e5e:	4f01      	ldr	r7, [pc, #4]	; (8013e64 <pow+0xdc>)
 8013e60:	2600      	movs	r6, #0
 8013e62:	e7e2      	b.n	8013e2a <pow+0xa2>
 8013e64:	3ff00000 	.word	0x3ff00000

08013e68 <finite>:
 8013e68:	b082      	sub	sp, #8
 8013e6a:	ed8d 0b00 	vstr	d0, [sp]
 8013e6e:	9801      	ldr	r0, [sp, #4]
 8013e70:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013e74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013e78:	0fc0      	lsrs	r0, r0, #31
 8013e7a:	b002      	add	sp, #8
 8013e7c:	4770      	bx	lr
	...

08013e80 <trunc>:
 8013e80:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013e84:	ec5c bb10 	vmov	fp, ip, d0
 8013e88:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013e8c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8013e90:	2913      	cmp	r1, #19
 8013e92:	4664      	mov	r4, ip
 8013e94:	dc11      	bgt.n	8013eba <trunc+0x3a>
 8013e96:	2900      	cmp	r1, #0
 8013e98:	bfa7      	ittee	ge
 8013e9a:	4b15      	ldrge	r3, [pc, #84]	; (8013ef0 <trunc+0x70>)
 8013e9c:	fa43 f101 	asrge.w	r1, r3, r1
 8013ea0:	2200      	movlt	r2, #0
 8013ea2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8013ea6:	bfa4      	itt	ge
 8013ea8:	2200      	movge	r2, #0
 8013eaa:	ea01 030c 	andge.w	r3, r1, ip
 8013eae:	4693      	mov	fp, r2
 8013eb0:	469c      	mov	ip, r3
 8013eb2:	ec4c bb10 	vmov	d0, fp, ip
 8013eb6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013eba:	2933      	cmp	r1, #51	; 0x33
 8013ebc:	dd0d      	ble.n	8013eda <trunc+0x5a>
 8013ebe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013ec2:	d1f6      	bne.n	8013eb2 <trunc+0x32>
 8013ec4:	4663      	mov	r3, ip
 8013ec6:	ee10 2a10 	vmov	r2, s0
 8013eca:	ee10 0a10 	vmov	r0, s0
 8013ece:	4621      	mov	r1, r4
 8013ed0:	f7ec f9dc 	bl	800028c <__adddf3>
 8013ed4:	4683      	mov	fp, r0
 8013ed6:	468c      	mov	ip, r1
 8013ed8:	e7eb      	b.n	8013eb2 <trunc+0x32>
 8013eda:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8013ede:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee2:	40c3      	lsrs	r3, r0
 8013ee4:	ea2b 0603 	bic.w	r6, fp, r3
 8013ee8:	46b3      	mov	fp, r6
 8013eea:	46a4      	mov	ip, r4
 8013eec:	e7e1      	b.n	8013eb2 <trunc+0x32>
 8013eee:	bf00      	nop
 8013ef0:	fff00000 	.word	0xfff00000
 8013ef4:	00000000 	.word	0x00000000

08013ef8 <__ieee754_pow>:
 8013ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013efc:	ed2d 8b06 	vpush	{d8-d10}
 8013f00:	b089      	sub	sp, #36	; 0x24
 8013f02:	ed8d 1b00 	vstr	d1, [sp]
 8013f06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013f0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013f0e:	ea58 0102 	orrs.w	r1, r8, r2
 8013f12:	ec57 6b10 	vmov	r6, r7, d0
 8013f16:	d115      	bne.n	8013f44 <__ieee754_pow+0x4c>
 8013f18:	19b3      	adds	r3, r6, r6
 8013f1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013f1e:	4152      	adcs	r2, r2
 8013f20:	4299      	cmp	r1, r3
 8013f22:	4b89      	ldr	r3, [pc, #548]	; (8014148 <__ieee754_pow+0x250>)
 8013f24:	4193      	sbcs	r3, r2
 8013f26:	f080 84d1 	bcs.w	80148cc <__ieee754_pow+0x9d4>
 8013f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f2e:	4630      	mov	r0, r6
 8013f30:	4639      	mov	r1, r7
 8013f32:	f7ec f9ab 	bl	800028c <__adddf3>
 8013f36:	ec41 0b10 	vmov	d0, r0, r1
 8013f3a:	b009      	add	sp, #36	; 0x24
 8013f3c:	ecbd 8b06 	vpop	{d8-d10}
 8013f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f44:	4b81      	ldr	r3, [pc, #516]	; (801414c <__ieee754_pow+0x254>)
 8013f46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013f4a:	429c      	cmp	r4, r3
 8013f4c:	ee10 aa10 	vmov	sl, s0
 8013f50:	463d      	mov	r5, r7
 8013f52:	dc06      	bgt.n	8013f62 <__ieee754_pow+0x6a>
 8013f54:	d101      	bne.n	8013f5a <__ieee754_pow+0x62>
 8013f56:	2e00      	cmp	r6, #0
 8013f58:	d1e7      	bne.n	8013f2a <__ieee754_pow+0x32>
 8013f5a:	4598      	cmp	r8, r3
 8013f5c:	dc01      	bgt.n	8013f62 <__ieee754_pow+0x6a>
 8013f5e:	d10f      	bne.n	8013f80 <__ieee754_pow+0x88>
 8013f60:	b172      	cbz	r2, 8013f80 <__ieee754_pow+0x88>
 8013f62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013f66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013f6a:	ea55 050a 	orrs.w	r5, r5, sl
 8013f6e:	d1dc      	bne.n	8013f2a <__ieee754_pow+0x32>
 8013f70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013f74:	18db      	adds	r3, r3, r3
 8013f76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013f7a:	4152      	adcs	r2, r2
 8013f7c:	429d      	cmp	r5, r3
 8013f7e:	e7d0      	b.n	8013f22 <__ieee754_pow+0x2a>
 8013f80:	2d00      	cmp	r5, #0
 8013f82:	da3b      	bge.n	8013ffc <__ieee754_pow+0x104>
 8013f84:	4b72      	ldr	r3, [pc, #456]	; (8014150 <__ieee754_pow+0x258>)
 8013f86:	4598      	cmp	r8, r3
 8013f88:	dc51      	bgt.n	801402e <__ieee754_pow+0x136>
 8013f8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013f8e:	4598      	cmp	r8, r3
 8013f90:	f340 84ab 	ble.w	80148ea <__ieee754_pow+0x9f2>
 8013f94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013f98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013f9c:	2b14      	cmp	r3, #20
 8013f9e:	dd0f      	ble.n	8013fc0 <__ieee754_pow+0xc8>
 8013fa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013fa4:	fa22 f103 	lsr.w	r1, r2, r3
 8013fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8013fac:	4293      	cmp	r3, r2
 8013fae:	f040 849c 	bne.w	80148ea <__ieee754_pow+0x9f2>
 8013fb2:	f001 0101 	and.w	r1, r1, #1
 8013fb6:	f1c1 0302 	rsb	r3, r1, #2
 8013fba:	9304      	str	r3, [sp, #16]
 8013fbc:	b182      	cbz	r2, 8013fe0 <__ieee754_pow+0xe8>
 8013fbe:	e05f      	b.n	8014080 <__ieee754_pow+0x188>
 8013fc0:	2a00      	cmp	r2, #0
 8013fc2:	d15b      	bne.n	801407c <__ieee754_pow+0x184>
 8013fc4:	f1c3 0314 	rsb	r3, r3, #20
 8013fc8:	fa48 f103 	asr.w	r1, r8, r3
 8013fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd0:	4543      	cmp	r3, r8
 8013fd2:	f040 8487 	bne.w	80148e4 <__ieee754_pow+0x9ec>
 8013fd6:	f001 0101 	and.w	r1, r1, #1
 8013fda:	f1c1 0302 	rsb	r3, r1, #2
 8013fde:	9304      	str	r3, [sp, #16]
 8013fe0:	4b5c      	ldr	r3, [pc, #368]	; (8014154 <__ieee754_pow+0x25c>)
 8013fe2:	4598      	cmp	r8, r3
 8013fe4:	d132      	bne.n	801404c <__ieee754_pow+0x154>
 8013fe6:	f1b9 0f00 	cmp.w	r9, #0
 8013fea:	f280 8477 	bge.w	80148dc <__ieee754_pow+0x9e4>
 8013fee:	4959      	ldr	r1, [pc, #356]	; (8014154 <__ieee754_pow+0x25c>)
 8013ff0:	4632      	mov	r2, r6
 8013ff2:	463b      	mov	r3, r7
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	f7ec fc29 	bl	800084c <__aeabi_ddiv>
 8013ffa:	e79c      	b.n	8013f36 <__ieee754_pow+0x3e>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	9304      	str	r3, [sp, #16]
 8014000:	2a00      	cmp	r2, #0
 8014002:	d13d      	bne.n	8014080 <__ieee754_pow+0x188>
 8014004:	4b51      	ldr	r3, [pc, #324]	; (801414c <__ieee754_pow+0x254>)
 8014006:	4598      	cmp	r8, r3
 8014008:	d1ea      	bne.n	8013fe0 <__ieee754_pow+0xe8>
 801400a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801400e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014012:	ea53 030a 	orrs.w	r3, r3, sl
 8014016:	f000 8459 	beq.w	80148cc <__ieee754_pow+0x9d4>
 801401a:	4b4f      	ldr	r3, [pc, #316]	; (8014158 <__ieee754_pow+0x260>)
 801401c:	429c      	cmp	r4, r3
 801401e:	dd08      	ble.n	8014032 <__ieee754_pow+0x13a>
 8014020:	f1b9 0f00 	cmp.w	r9, #0
 8014024:	f2c0 8456 	blt.w	80148d4 <__ieee754_pow+0x9dc>
 8014028:	e9dd 0100 	ldrd	r0, r1, [sp]
 801402c:	e783      	b.n	8013f36 <__ieee754_pow+0x3e>
 801402e:	2302      	movs	r3, #2
 8014030:	e7e5      	b.n	8013ffe <__ieee754_pow+0x106>
 8014032:	f1b9 0f00 	cmp.w	r9, #0
 8014036:	f04f 0000 	mov.w	r0, #0
 801403a:	f04f 0100 	mov.w	r1, #0
 801403e:	f6bf af7a 	bge.w	8013f36 <__ieee754_pow+0x3e>
 8014042:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014046:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801404a:	e774      	b.n	8013f36 <__ieee754_pow+0x3e>
 801404c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014050:	d106      	bne.n	8014060 <__ieee754_pow+0x168>
 8014052:	4632      	mov	r2, r6
 8014054:	463b      	mov	r3, r7
 8014056:	4630      	mov	r0, r6
 8014058:	4639      	mov	r1, r7
 801405a:	f7ec facd 	bl	80005f8 <__aeabi_dmul>
 801405e:	e76a      	b.n	8013f36 <__ieee754_pow+0x3e>
 8014060:	4b3e      	ldr	r3, [pc, #248]	; (801415c <__ieee754_pow+0x264>)
 8014062:	4599      	cmp	r9, r3
 8014064:	d10c      	bne.n	8014080 <__ieee754_pow+0x188>
 8014066:	2d00      	cmp	r5, #0
 8014068:	db0a      	blt.n	8014080 <__ieee754_pow+0x188>
 801406a:	ec47 6b10 	vmov	d0, r6, r7
 801406e:	b009      	add	sp, #36	; 0x24
 8014070:	ecbd 8b06 	vpop	{d8-d10}
 8014074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014078:	f000 bd20 	b.w	8014abc <__ieee754_sqrt>
 801407c:	2300      	movs	r3, #0
 801407e:	9304      	str	r3, [sp, #16]
 8014080:	ec47 6b10 	vmov	d0, r6, r7
 8014084:	f000 fc62 	bl	801494c <fabs>
 8014088:	ec51 0b10 	vmov	r0, r1, d0
 801408c:	f1ba 0f00 	cmp.w	sl, #0
 8014090:	d129      	bne.n	80140e6 <__ieee754_pow+0x1ee>
 8014092:	b124      	cbz	r4, 801409e <__ieee754_pow+0x1a6>
 8014094:	4b2f      	ldr	r3, [pc, #188]	; (8014154 <__ieee754_pow+0x25c>)
 8014096:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801409a:	429a      	cmp	r2, r3
 801409c:	d123      	bne.n	80140e6 <__ieee754_pow+0x1ee>
 801409e:	f1b9 0f00 	cmp.w	r9, #0
 80140a2:	da05      	bge.n	80140b0 <__ieee754_pow+0x1b8>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	2000      	movs	r0, #0
 80140aa:	492a      	ldr	r1, [pc, #168]	; (8014154 <__ieee754_pow+0x25c>)
 80140ac:	f7ec fbce 	bl	800084c <__aeabi_ddiv>
 80140b0:	2d00      	cmp	r5, #0
 80140b2:	f6bf af40 	bge.w	8013f36 <__ieee754_pow+0x3e>
 80140b6:	9b04      	ldr	r3, [sp, #16]
 80140b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140c0:	431c      	orrs	r4, r3
 80140c2:	d108      	bne.n	80140d6 <__ieee754_pow+0x1de>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	4610      	mov	r0, r2
 80140ca:	4619      	mov	r1, r3
 80140cc:	f7ec f8dc 	bl	8000288 <__aeabi_dsub>
 80140d0:	4602      	mov	r2, r0
 80140d2:	460b      	mov	r3, r1
 80140d4:	e78f      	b.n	8013ff6 <__ieee754_pow+0xfe>
 80140d6:	9b04      	ldr	r3, [sp, #16]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	f47f af2c 	bne.w	8013f36 <__ieee754_pow+0x3e>
 80140de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140e2:	4619      	mov	r1, r3
 80140e4:	e727      	b.n	8013f36 <__ieee754_pow+0x3e>
 80140e6:	0feb      	lsrs	r3, r5, #31
 80140e8:	3b01      	subs	r3, #1
 80140ea:	9306      	str	r3, [sp, #24]
 80140ec:	9a06      	ldr	r2, [sp, #24]
 80140ee:	9b04      	ldr	r3, [sp, #16]
 80140f0:	4313      	orrs	r3, r2
 80140f2:	d102      	bne.n	80140fa <__ieee754_pow+0x202>
 80140f4:	4632      	mov	r2, r6
 80140f6:	463b      	mov	r3, r7
 80140f8:	e7e6      	b.n	80140c8 <__ieee754_pow+0x1d0>
 80140fa:	4b19      	ldr	r3, [pc, #100]	; (8014160 <__ieee754_pow+0x268>)
 80140fc:	4598      	cmp	r8, r3
 80140fe:	f340 80fb 	ble.w	80142f8 <__ieee754_pow+0x400>
 8014102:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014106:	4598      	cmp	r8, r3
 8014108:	4b13      	ldr	r3, [pc, #76]	; (8014158 <__ieee754_pow+0x260>)
 801410a:	dd0c      	ble.n	8014126 <__ieee754_pow+0x22e>
 801410c:	429c      	cmp	r4, r3
 801410e:	dc0f      	bgt.n	8014130 <__ieee754_pow+0x238>
 8014110:	f1b9 0f00 	cmp.w	r9, #0
 8014114:	da0f      	bge.n	8014136 <__ieee754_pow+0x23e>
 8014116:	2000      	movs	r0, #0
 8014118:	b009      	add	sp, #36	; 0x24
 801411a:	ecbd 8b06 	vpop	{d8-d10}
 801411e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014122:	f000 bcc2 	b.w	8014aaa <__math_oflow>
 8014126:	429c      	cmp	r4, r3
 8014128:	dbf2      	blt.n	8014110 <__ieee754_pow+0x218>
 801412a:	4b0a      	ldr	r3, [pc, #40]	; (8014154 <__ieee754_pow+0x25c>)
 801412c:	429c      	cmp	r4, r3
 801412e:	dd19      	ble.n	8014164 <__ieee754_pow+0x26c>
 8014130:	f1b9 0f00 	cmp.w	r9, #0
 8014134:	dcef      	bgt.n	8014116 <__ieee754_pow+0x21e>
 8014136:	2000      	movs	r0, #0
 8014138:	b009      	add	sp, #36	; 0x24
 801413a:	ecbd 8b06 	vpop	{d8-d10}
 801413e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014142:	f000 bca9 	b.w	8014a98 <__math_uflow>
 8014146:	bf00      	nop
 8014148:	fff00000 	.word	0xfff00000
 801414c:	7ff00000 	.word	0x7ff00000
 8014150:	433fffff 	.word	0x433fffff
 8014154:	3ff00000 	.word	0x3ff00000
 8014158:	3fefffff 	.word	0x3fefffff
 801415c:	3fe00000 	.word	0x3fe00000
 8014160:	41e00000 	.word	0x41e00000
 8014164:	4b60      	ldr	r3, [pc, #384]	; (80142e8 <__ieee754_pow+0x3f0>)
 8014166:	2200      	movs	r2, #0
 8014168:	f7ec f88e 	bl	8000288 <__aeabi_dsub>
 801416c:	a354      	add	r3, pc, #336	; (adr r3, 80142c0 <__ieee754_pow+0x3c8>)
 801416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014172:	4604      	mov	r4, r0
 8014174:	460d      	mov	r5, r1
 8014176:	f7ec fa3f 	bl	80005f8 <__aeabi_dmul>
 801417a:	a353      	add	r3, pc, #332	; (adr r3, 80142c8 <__ieee754_pow+0x3d0>)
 801417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014180:	4606      	mov	r6, r0
 8014182:	460f      	mov	r7, r1
 8014184:	4620      	mov	r0, r4
 8014186:	4629      	mov	r1, r5
 8014188:	f7ec fa36 	bl	80005f8 <__aeabi_dmul>
 801418c:	4b57      	ldr	r3, [pc, #348]	; (80142ec <__ieee754_pow+0x3f4>)
 801418e:	4682      	mov	sl, r0
 8014190:	468b      	mov	fp, r1
 8014192:	2200      	movs	r2, #0
 8014194:	4620      	mov	r0, r4
 8014196:	4629      	mov	r1, r5
 8014198:	f7ec fa2e 	bl	80005f8 <__aeabi_dmul>
 801419c:	4602      	mov	r2, r0
 801419e:	460b      	mov	r3, r1
 80141a0:	a14b      	add	r1, pc, #300	; (adr r1, 80142d0 <__ieee754_pow+0x3d8>)
 80141a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141a6:	f7ec f86f 	bl	8000288 <__aeabi_dsub>
 80141aa:	4622      	mov	r2, r4
 80141ac:	462b      	mov	r3, r5
 80141ae:	f7ec fa23 	bl	80005f8 <__aeabi_dmul>
 80141b2:	4602      	mov	r2, r0
 80141b4:	460b      	mov	r3, r1
 80141b6:	2000      	movs	r0, #0
 80141b8:	494d      	ldr	r1, [pc, #308]	; (80142f0 <__ieee754_pow+0x3f8>)
 80141ba:	f7ec f865 	bl	8000288 <__aeabi_dsub>
 80141be:	4622      	mov	r2, r4
 80141c0:	4680      	mov	r8, r0
 80141c2:	4689      	mov	r9, r1
 80141c4:	462b      	mov	r3, r5
 80141c6:	4620      	mov	r0, r4
 80141c8:	4629      	mov	r1, r5
 80141ca:	f7ec fa15 	bl	80005f8 <__aeabi_dmul>
 80141ce:	4602      	mov	r2, r0
 80141d0:	460b      	mov	r3, r1
 80141d2:	4640      	mov	r0, r8
 80141d4:	4649      	mov	r1, r9
 80141d6:	f7ec fa0f 	bl	80005f8 <__aeabi_dmul>
 80141da:	a33f      	add	r3, pc, #252	; (adr r3, 80142d8 <__ieee754_pow+0x3e0>)
 80141dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e0:	f7ec fa0a 	bl	80005f8 <__aeabi_dmul>
 80141e4:	4602      	mov	r2, r0
 80141e6:	460b      	mov	r3, r1
 80141e8:	4650      	mov	r0, sl
 80141ea:	4659      	mov	r1, fp
 80141ec:	f7ec f84c 	bl	8000288 <__aeabi_dsub>
 80141f0:	4602      	mov	r2, r0
 80141f2:	460b      	mov	r3, r1
 80141f4:	4680      	mov	r8, r0
 80141f6:	4689      	mov	r9, r1
 80141f8:	4630      	mov	r0, r6
 80141fa:	4639      	mov	r1, r7
 80141fc:	f7ec f846 	bl	800028c <__adddf3>
 8014200:	2000      	movs	r0, #0
 8014202:	4632      	mov	r2, r6
 8014204:	463b      	mov	r3, r7
 8014206:	4604      	mov	r4, r0
 8014208:	460d      	mov	r5, r1
 801420a:	f7ec f83d 	bl	8000288 <__aeabi_dsub>
 801420e:	4602      	mov	r2, r0
 8014210:	460b      	mov	r3, r1
 8014212:	4640      	mov	r0, r8
 8014214:	4649      	mov	r1, r9
 8014216:	f7ec f837 	bl	8000288 <__aeabi_dsub>
 801421a:	9b04      	ldr	r3, [sp, #16]
 801421c:	9a06      	ldr	r2, [sp, #24]
 801421e:	3b01      	subs	r3, #1
 8014220:	4313      	orrs	r3, r2
 8014222:	4682      	mov	sl, r0
 8014224:	468b      	mov	fp, r1
 8014226:	f040 81e7 	bne.w	80145f8 <__ieee754_pow+0x700>
 801422a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80142e0 <__ieee754_pow+0x3e8>
 801422e:	eeb0 8a47 	vmov.f32	s16, s14
 8014232:	eef0 8a67 	vmov.f32	s17, s15
 8014236:	e9dd 6700 	ldrd	r6, r7, [sp]
 801423a:	2600      	movs	r6, #0
 801423c:	4632      	mov	r2, r6
 801423e:	463b      	mov	r3, r7
 8014240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014244:	f7ec f820 	bl	8000288 <__aeabi_dsub>
 8014248:	4622      	mov	r2, r4
 801424a:	462b      	mov	r3, r5
 801424c:	f7ec f9d4 	bl	80005f8 <__aeabi_dmul>
 8014250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014254:	4680      	mov	r8, r0
 8014256:	4689      	mov	r9, r1
 8014258:	4650      	mov	r0, sl
 801425a:	4659      	mov	r1, fp
 801425c:	f7ec f9cc 	bl	80005f8 <__aeabi_dmul>
 8014260:	4602      	mov	r2, r0
 8014262:	460b      	mov	r3, r1
 8014264:	4640      	mov	r0, r8
 8014266:	4649      	mov	r1, r9
 8014268:	f7ec f810 	bl	800028c <__adddf3>
 801426c:	4632      	mov	r2, r6
 801426e:	463b      	mov	r3, r7
 8014270:	4680      	mov	r8, r0
 8014272:	4689      	mov	r9, r1
 8014274:	4620      	mov	r0, r4
 8014276:	4629      	mov	r1, r5
 8014278:	f7ec f9be 	bl	80005f8 <__aeabi_dmul>
 801427c:	460b      	mov	r3, r1
 801427e:	4604      	mov	r4, r0
 8014280:	460d      	mov	r5, r1
 8014282:	4602      	mov	r2, r0
 8014284:	4649      	mov	r1, r9
 8014286:	4640      	mov	r0, r8
 8014288:	f7ec f800 	bl	800028c <__adddf3>
 801428c:	4b19      	ldr	r3, [pc, #100]	; (80142f4 <__ieee754_pow+0x3fc>)
 801428e:	4299      	cmp	r1, r3
 8014290:	ec45 4b19 	vmov	d9, r4, r5
 8014294:	4606      	mov	r6, r0
 8014296:	460f      	mov	r7, r1
 8014298:	468b      	mov	fp, r1
 801429a:	f340 82f0 	ble.w	801487e <__ieee754_pow+0x986>
 801429e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80142a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80142a6:	4303      	orrs	r3, r0
 80142a8:	f000 81e4 	beq.w	8014674 <__ieee754_pow+0x77c>
 80142ac:	ec51 0b18 	vmov	r0, r1, d8
 80142b0:	2200      	movs	r2, #0
 80142b2:	2300      	movs	r3, #0
 80142b4:	f7ec fc12 	bl	8000adc <__aeabi_dcmplt>
 80142b8:	3800      	subs	r0, #0
 80142ba:	bf18      	it	ne
 80142bc:	2001      	movne	r0, #1
 80142be:	e72b      	b.n	8014118 <__ieee754_pow+0x220>
 80142c0:	60000000 	.word	0x60000000
 80142c4:	3ff71547 	.word	0x3ff71547
 80142c8:	f85ddf44 	.word	0xf85ddf44
 80142cc:	3e54ae0b 	.word	0x3e54ae0b
 80142d0:	55555555 	.word	0x55555555
 80142d4:	3fd55555 	.word	0x3fd55555
 80142d8:	652b82fe 	.word	0x652b82fe
 80142dc:	3ff71547 	.word	0x3ff71547
 80142e0:	00000000 	.word	0x00000000
 80142e4:	bff00000 	.word	0xbff00000
 80142e8:	3ff00000 	.word	0x3ff00000
 80142ec:	3fd00000 	.word	0x3fd00000
 80142f0:	3fe00000 	.word	0x3fe00000
 80142f4:	408fffff 	.word	0x408fffff
 80142f8:	4bd5      	ldr	r3, [pc, #852]	; (8014650 <__ieee754_pow+0x758>)
 80142fa:	402b      	ands	r3, r5
 80142fc:	2200      	movs	r2, #0
 80142fe:	b92b      	cbnz	r3, 801430c <__ieee754_pow+0x414>
 8014300:	4bd4      	ldr	r3, [pc, #848]	; (8014654 <__ieee754_pow+0x75c>)
 8014302:	f7ec f979 	bl	80005f8 <__aeabi_dmul>
 8014306:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801430a:	460c      	mov	r4, r1
 801430c:	1523      	asrs	r3, r4, #20
 801430e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014312:	4413      	add	r3, r2
 8014314:	9305      	str	r3, [sp, #20]
 8014316:	4bd0      	ldr	r3, [pc, #832]	; (8014658 <__ieee754_pow+0x760>)
 8014318:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801431c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014320:	429c      	cmp	r4, r3
 8014322:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014326:	dd08      	ble.n	801433a <__ieee754_pow+0x442>
 8014328:	4bcc      	ldr	r3, [pc, #816]	; (801465c <__ieee754_pow+0x764>)
 801432a:	429c      	cmp	r4, r3
 801432c:	f340 8162 	ble.w	80145f4 <__ieee754_pow+0x6fc>
 8014330:	9b05      	ldr	r3, [sp, #20]
 8014332:	3301      	adds	r3, #1
 8014334:	9305      	str	r3, [sp, #20]
 8014336:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801433a:	2400      	movs	r4, #0
 801433c:	00e3      	lsls	r3, r4, #3
 801433e:	9307      	str	r3, [sp, #28]
 8014340:	4bc7      	ldr	r3, [pc, #796]	; (8014660 <__ieee754_pow+0x768>)
 8014342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014346:	ed93 7b00 	vldr	d7, [r3]
 801434a:	4629      	mov	r1, r5
 801434c:	ec53 2b17 	vmov	r2, r3, d7
 8014350:	eeb0 9a47 	vmov.f32	s18, s14
 8014354:	eef0 9a67 	vmov.f32	s19, s15
 8014358:	4682      	mov	sl, r0
 801435a:	f7eb ff95 	bl	8000288 <__aeabi_dsub>
 801435e:	4652      	mov	r2, sl
 8014360:	4606      	mov	r6, r0
 8014362:	460f      	mov	r7, r1
 8014364:	462b      	mov	r3, r5
 8014366:	ec51 0b19 	vmov	r0, r1, d9
 801436a:	f7eb ff8f 	bl	800028c <__adddf3>
 801436e:	4602      	mov	r2, r0
 8014370:	460b      	mov	r3, r1
 8014372:	2000      	movs	r0, #0
 8014374:	49bb      	ldr	r1, [pc, #748]	; (8014664 <__ieee754_pow+0x76c>)
 8014376:	f7ec fa69 	bl	800084c <__aeabi_ddiv>
 801437a:	ec41 0b1a 	vmov	d10, r0, r1
 801437e:	4602      	mov	r2, r0
 8014380:	460b      	mov	r3, r1
 8014382:	4630      	mov	r0, r6
 8014384:	4639      	mov	r1, r7
 8014386:	f7ec f937 	bl	80005f8 <__aeabi_dmul>
 801438a:	2300      	movs	r3, #0
 801438c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014390:	9302      	str	r3, [sp, #8]
 8014392:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014396:	46ab      	mov	fp, r5
 8014398:	106d      	asrs	r5, r5, #1
 801439a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801439e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80143a2:	ec41 0b18 	vmov	d8, r0, r1
 80143a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80143aa:	2200      	movs	r2, #0
 80143ac:	4640      	mov	r0, r8
 80143ae:	4649      	mov	r1, r9
 80143b0:	4614      	mov	r4, r2
 80143b2:	461d      	mov	r5, r3
 80143b4:	f7ec f920 	bl	80005f8 <__aeabi_dmul>
 80143b8:	4602      	mov	r2, r0
 80143ba:	460b      	mov	r3, r1
 80143bc:	4630      	mov	r0, r6
 80143be:	4639      	mov	r1, r7
 80143c0:	f7eb ff62 	bl	8000288 <__aeabi_dsub>
 80143c4:	ec53 2b19 	vmov	r2, r3, d9
 80143c8:	4606      	mov	r6, r0
 80143ca:	460f      	mov	r7, r1
 80143cc:	4620      	mov	r0, r4
 80143ce:	4629      	mov	r1, r5
 80143d0:	f7eb ff5a 	bl	8000288 <__aeabi_dsub>
 80143d4:	4602      	mov	r2, r0
 80143d6:	460b      	mov	r3, r1
 80143d8:	4650      	mov	r0, sl
 80143da:	4659      	mov	r1, fp
 80143dc:	f7eb ff54 	bl	8000288 <__aeabi_dsub>
 80143e0:	4642      	mov	r2, r8
 80143e2:	464b      	mov	r3, r9
 80143e4:	f7ec f908 	bl	80005f8 <__aeabi_dmul>
 80143e8:	4602      	mov	r2, r0
 80143ea:	460b      	mov	r3, r1
 80143ec:	4630      	mov	r0, r6
 80143ee:	4639      	mov	r1, r7
 80143f0:	f7eb ff4a 	bl	8000288 <__aeabi_dsub>
 80143f4:	ec53 2b1a 	vmov	r2, r3, d10
 80143f8:	f7ec f8fe 	bl	80005f8 <__aeabi_dmul>
 80143fc:	ec53 2b18 	vmov	r2, r3, d8
 8014400:	ec41 0b19 	vmov	d9, r0, r1
 8014404:	ec51 0b18 	vmov	r0, r1, d8
 8014408:	f7ec f8f6 	bl	80005f8 <__aeabi_dmul>
 801440c:	a37c      	add	r3, pc, #496	; (adr r3, 8014600 <__ieee754_pow+0x708>)
 801440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014412:	4604      	mov	r4, r0
 8014414:	460d      	mov	r5, r1
 8014416:	f7ec f8ef 	bl	80005f8 <__aeabi_dmul>
 801441a:	a37b      	add	r3, pc, #492	; (adr r3, 8014608 <__ieee754_pow+0x710>)
 801441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014420:	f7eb ff34 	bl	800028c <__adddf3>
 8014424:	4622      	mov	r2, r4
 8014426:	462b      	mov	r3, r5
 8014428:	f7ec f8e6 	bl	80005f8 <__aeabi_dmul>
 801442c:	a378      	add	r3, pc, #480	; (adr r3, 8014610 <__ieee754_pow+0x718>)
 801442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014432:	f7eb ff2b 	bl	800028c <__adddf3>
 8014436:	4622      	mov	r2, r4
 8014438:	462b      	mov	r3, r5
 801443a:	f7ec f8dd 	bl	80005f8 <__aeabi_dmul>
 801443e:	a376      	add	r3, pc, #472	; (adr r3, 8014618 <__ieee754_pow+0x720>)
 8014440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014444:	f7eb ff22 	bl	800028c <__adddf3>
 8014448:	4622      	mov	r2, r4
 801444a:	462b      	mov	r3, r5
 801444c:	f7ec f8d4 	bl	80005f8 <__aeabi_dmul>
 8014450:	a373      	add	r3, pc, #460	; (adr r3, 8014620 <__ieee754_pow+0x728>)
 8014452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014456:	f7eb ff19 	bl	800028c <__adddf3>
 801445a:	4622      	mov	r2, r4
 801445c:	462b      	mov	r3, r5
 801445e:	f7ec f8cb 	bl	80005f8 <__aeabi_dmul>
 8014462:	a371      	add	r3, pc, #452	; (adr r3, 8014628 <__ieee754_pow+0x730>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7eb ff10 	bl	800028c <__adddf3>
 801446c:	4622      	mov	r2, r4
 801446e:	4606      	mov	r6, r0
 8014470:	460f      	mov	r7, r1
 8014472:	462b      	mov	r3, r5
 8014474:	4620      	mov	r0, r4
 8014476:	4629      	mov	r1, r5
 8014478:	f7ec f8be 	bl	80005f8 <__aeabi_dmul>
 801447c:	4602      	mov	r2, r0
 801447e:	460b      	mov	r3, r1
 8014480:	4630      	mov	r0, r6
 8014482:	4639      	mov	r1, r7
 8014484:	f7ec f8b8 	bl	80005f8 <__aeabi_dmul>
 8014488:	4642      	mov	r2, r8
 801448a:	4604      	mov	r4, r0
 801448c:	460d      	mov	r5, r1
 801448e:	464b      	mov	r3, r9
 8014490:	ec51 0b18 	vmov	r0, r1, d8
 8014494:	f7eb fefa 	bl	800028c <__adddf3>
 8014498:	ec53 2b19 	vmov	r2, r3, d9
 801449c:	f7ec f8ac 	bl	80005f8 <__aeabi_dmul>
 80144a0:	4622      	mov	r2, r4
 80144a2:	462b      	mov	r3, r5
 80144a4:	f7eb fef2 	bl	800028c <__adddf3>
 80144a8:	4642      	mov	r2, r8
 80144aa:	4682      	mov	sl, r0
 80144ac:	468b      	mov	fp, r1
 80144ae:	464b      	mov	r3, r9
 80144b0:	4640      	mov	r0, r8
 80144b2:	4649      	mov	r1, r9
 80144b4:	f7ec f8a0 	bl	80005f8 <__aeabi_dmul>
 80144b8:	4b6b      	ldr	r3, [pc, #428]	; (8014668 <__ieee754_pow+0x770>)
 80144ba:	2200      	movs	r2, #0
 80144bc:	4606      	mov	r6, r0
 80144be:	460f      	mov	r7, r1
 80144c0:	f7eb fee4 	bl	800028c <__adddf3>
 80144c4:	4652      	mov	r2, sl
 80144c6:	465b      	mov	r3, fp
 80144c8:	f7eb fee0 	bl	800028c <__adddf3>
 80144cc:	2000      	movs	r0, #0
 80144ce:	4604      	mov	r4, r0
 80144d0:	460d      	mov	r5, r1
 80144d2:	4602      	mov	r2, r0
 80144d4:	460b      	mov	r3, r1
 80144d6:	4640      	mov	r0, r8
 80144d8:	4649      	mov	r1, r9
 80144da:	f7ec f88d 	bl	80005f8 <__aeabi_dmul>
 80144de:	4b62      	ldr	r3, [pc, #392]	; (8014668 <__ieee754_pow+0x770>)
 80144e0:	4680      	mov	r8, r0
 80144e2:	4689      	mov	r9, r1
 80144e4:	2200      	movs	r2, #0
 80144e6:	4620      	mov	r0, r4
 80144e8:	4629      	mov	r1, r5
 80144ea:	f7eb fecd 	bl	8000288 <__aeabi_dsub>
 80144ee:	4632      	mov	r2, r6
 80144f0:	463b      	mov	r3, r7
 80144f2:	f7eb fec9 	bl	8000288 <__aeabi_dsub>
 80144f6:	4602      	mov	r2, r0
 80144f8:	460b      	mov	r3, r1
 80144fa:	4650      	mov	r0, sl
 80144fc:	4659      	mov	r1, fp
 80144fe:	f7eb fec3 	bl	8000288 <__aeabi_dsub>
 8014502:	ec53 2b18 	vmov	r2, r3, d8
 8014506:	f7ec f877 	bl	80005f8 <__aeabi_dmul>
 801450a:	4622      	mov	r2, r4
 801450c:	4606      	mov	r6, r0
 801450e:	460f      	mov	r7, r1
 8014510:	462b      	mov	r3, r5
 8014512:	ec51 0b19 	vmov	r0, r1, d9
 8014516:	f7ec f86f 	bl	80005f8 <__aeabi_dmul>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	4630      	mov	r0, r6
 8014520:	4639      	mov	r1, r7
 8014522:	f7eb feb3 	bl	800028c <__adddf3>
 8014526:	4606      	mov	r6, r0
 8014528:	460f      	mov	r7, r1
 801452a:	4602      	mov	r2, r0
 801452c:	460b      	mov	r3, r1
 801452e:	4640      	mov	r0, r8
 8014530:	4649      	mov	r1, r9
 8014532:	f7eb feab 	bl	800028c <__adddf3>
 8014536:	a33e      	add	r3, pc, #248	; (adr r3, 8014630 <__ieee754_pow+0x738>)
 8014538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453c:	2000      	movs	r0, #0
 801453e:	4604      	mov	r4, r0
 8014540:	460d      	mov	r5, r1
 8014542:	f7ec f859 	bl	80005f8 <__aeabi_dmul>
 8014546:	4642      	mov	r2, r8
 8014548:	ec41 0b18 	vmov	d8, r0, r1
 801454c:	464b      	mov	r3, r9
 801454e:	4620      	mov	r0, r4
 8014550:	4629      	mov	r1, r5
 8014552:	f7eb fe99 	bl	8000288 <__aeabi_dsub>
 8014556:	4602      	mov	r2, r0
 8014558:	460b      	mov	r3, r1
 801455a:	4630      	mov	r0, r6
 801455c:	4639      	mov	r1, r7
 801455e:	f7eb fe93 	bl	8000288 <__aeabi_dsub>
 8014562:	a335      	add	r3, pc, #212	; (adr r3, 8014638 <__ieee754_pow+0x740>)
 8014564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014568:	f7ec f846 	bl	80005f8 <__aeabi_dmul>
 801456c:	a334      	add	r3, pc, #208	; (adr r3, 8014640 <__ieee754_pow+0x748>)
 801456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014572:	4606      	mov	r6, r0
 8014574:	460f      	mov	r7, r1
 8014576:	4620      	mov	r0, r4
 8014578:	4629      	mov	r1, r5
 801457a:	f7ec f83d 	bl	80005f8 <__aeabi_dmul>
 801457e:	4602      	mov	r2, r0
 8014580:	460b      	mov	r3, r1
 8014582:	4630      	mov	r0, r6
 8014584:	4639      	mov	r1, r7
 8014586:	f7eb fe81 	bl	800028c <__adddf3>
 801458a:	9a07      	ldr	r2, [sp, #28]
 801458c:	4b37      	ldr	r3, [pc, #220]	; (801466c <__ieee754_pow+0x774>)
 801458e:	4413      	add	r3, r2
 8014590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014594:	f7eb fe7a 	bl	800028c <__adddf3>
 8014598:	4682      	mov	sl, r0
 801459a:	9805      	ldr	r0, [sp, #20]
 801459c:	468b      	mov	fp, r1
 801459e:	f7eb ffc1 	bl	8000524 <__aeabi_i2d>
 80145a2:	9a07      	ldr	r2, [sp, #28]
 80145a4:	4b32      	ldr	r3, [pc, #200]	; (8014670 <__ieee754_pow+0x778>)
 80145a6:	4413      	add	r3, r2
 80145a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145ac:	4606      	mov	r6, r0
 80145ae:	460f      	mov	r7, r1
 80145b0:	4652      	mov	r2, sl
 80145b2:	465b      	mov	r3, fp
 80145b4:	ec51 0b18 	vmov	r0, r1, d8
 80145b8:	f7eb fe68 	bl	800028c <__adddf3>
 80145bc:	4642      	mov	r2, r8
 80145be:	464b      	mov	r3, r9
 80145c0:	f7eb fe64 	bl	800028c <__adddf3>
 80145c4:	4632      	mov	r2, r6
 80145c6:	463b      	mov	r3, r7
 80145c8:	f7eb fe60 	bl	800028c <__adddf3>
 80145cc:	2000      	movs	r0, #0
 80145ce:	4632      	mov	r2, r6
 80145d0:	463b      	mov	r3, r7
 80145d2:	4604      	mov	r4, r0
 80145d4:	460d      	mov	r5, r1
 80145d6:	f7eb fe57 	bl	8000288 <__aeabi_dsub>
 80145da:	4642      	mov	r2, r8
 80145dc:	464b      	mov	r3, r9
 80145de:	f7eb fe53 	bl	8000288 <__aeabi_dsub>
 80145e2:	ec53 2b18 	vmov	r2, r3, d8
 80145e6:	f7eb fe4f 	bl	8000288 <__aeabi_dsub>
 80145ea:	4602      	mov	r2, r0
 80145ec:	460b      	mov	r3, r1
 80145ee:	4650      	mov	r0, sl
 80145f0:	4659      	mov	r1, fp
 80145f2:	e610      	b.n	8014216 <__ieee754_pow+0x31e>
 80145f4:	2401      	movs	r4, #1
 80145f6:	e6a1      	b.n	801433c <__ieee754_pow+0x444>
 80145f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014648 <__ieee754_pow+0x750>
 80145fc:	e617      	b.n	801422e <__ieee754_pow+0x336>
 80145fe:	bf00      	nop
 8014600:	4a454eef 	.word	0x4a454eef
 8014604:	3fca7e28 	.word	0x3fca7e28
 8014608:	93c9db65 	.word	0x93c9db65
 801460c:	3fcd864a 	.word	0x3fcd864a
 8014610:	a91d4101 	.word	0xa91d4101
 8014614:	3fd17460 	.word	0x3fd17460
 8014618:	518f264d 	.word	0x518f264d
 801461c:	3fd55555 	.word	0x3fd55555
 8014620:	db6fabff 	.word	0xdb6fabff
 8014624:	3fdb6db6 	.word	0x3fdb6db6
 8014628:	33333303 	.word	0x33333303
 801462c:	3fe33333 	.word	0x3fe33333
 8014630:	e0000000 	.word	0xe0000000
 8014634:	3feec709 	.word	0x3feec709
 8014638:	dc3a03fd 	.word	0xdc3a03fd
 801463c:	3feec709 	.word	0x3feec709
 8014640:	145b01f5 	.word	0x145b01f5
 8014644:	be3e2fe0 	.word	0xbe3e2fe0
 8014648:	00000000 	.word	0x00000000
 801464c:	3ff00000 	.word	0x3ff00000
 8014650:	7ff00000 	.word	0x7ff00000
 8014654:	43400000 	.word	0x43400000
 8014658:	0003988e 	.word	0x0003988e
 801465c:	000bb679 	.word	0x000bb679
 8014660:	080155e0 	.word	0x080155e0
 8014664:	3ff00000 	.word	0x3ff00000
 8014668:	40080000 	.word	0x40080000
 801466c:	08015600 	.word	0x08015600
 8014670:	080155f0 	.word	0x080155f0
 8014674:	a3b3      	add	r3, pc, #716	; (adr r3, 8014944 <__ieee754_pow+0xa4c>)
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	4640      	mov	r0, r8
 801467c:	4649      	mov	r1, r9
 801467e:	f7eb fe05 	bl	800028c <__adddf3>
 8014682:	4622      	mov	r2, r4
 8014684:	ec41 0b1a 	vmov	d10, r0, r1
 8014688:	462b      	mov	r3, r5
 801468a:	4630      	mov	r0, r6
 801468c:	4639      	mov	r1, r7
 801468e:	f7eb fdfb 	bl	8000288 <__aeabi_dsub>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	ec51 0b1a 	vmov	r0, r1, d10
 801469a:	f7ec fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 801469e:	2800      	cmp	r0, #0
 80146a0:	f47f ae04 	bne.w	80142ac <__ieee754_pow+0x3b4>
 80146a4:	4aa2      	ldr	r2, [pc, #648]	; (8014930 <__ieee754_pow+0xa38>)
 80146a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146aa:	4293      	cmp	r3, r2
 80146ac:	f340 8107 	ble.w	80148be <__ieee754_pow+0x9c6>
 80146b0:	151b      	asrs	r3, r3, #20
 80146b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80146b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80146ba:	fa4a fa03 	asr.w	sl, sl, r3
 80146be:	44da      	add	sl, fp
 80146c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80146c4:	489b      	ldr	r0, [pc, #620]	; (8014934 <__ieee754_pow+0xa3c>)
 80146c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80146ca:	4108      	asrs	r0, r1
 80146cc:	ea00 030a 	and.w	r3, r0, sl
 80146d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80146d4:	f1c1 0114 	rsb	r1, r1, #20
 80146d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80146dc:	fa4a fa01 	asr.w	sl, sl, r1
 80146e0:	f1bb 0f00 	cmp.w	fp, #0
 80146e4:	f04f 0200 	mov.w	r2, #0
 80146e8:	4620      	mov	r0, r4
 80146ea:	4629      	mov	r1, r5
 80146ec:	bfb8      	it	lt
 80146ee:	f1ca 0a00 	rsblt	sl, sl, #0
 80146f2:	f7eb fdc9 	bl	8000288 <__aeabi_dsub>
 80146f6:	ec41 0b19 	vmov	d9, r0, r1
 80146fa:	4642      	mov	r2, r8
 80146fc:	464b      	mov	r3, r9
 80146fe:	ec51 0b19 	vmov	r0, r1, d9
 8014702:	f7eb fdc3 	bl	800028c <__adddf3>
 8014706:	a37a      	add	r3, pc, #488	; (adr r3, 80148f0 <__ieee754_pow+0x9f8>)
 8014708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470c:	2000      	movs	r0, #0
 801470e:	4604      	mov	r4, r0
 8014710:	460d      	mov	r5, r1
 8014712:	f7eb ff71 	bl	80005f8 <__aeabi_dmul>
 8014716:	ec53 2b19 	vmov	r2, r3, d9
 801471a:	4606      	mov	r6, r0
 801471c:	460f      	mov	r7, r1
 801471e:	4620      	mov	r0, r4
 8014720:	4629      	mov	r1, r5
 8014722:	f7eb fdb1 	bl	8000288 <__aeabi_dsub>
 8014726:	4602      	mov	r2, r0
 8014728:	460b      	mov	r3, r1
 801472a:	4640      	mov	r0, r8
 801472c:	4649      	mov	r1, r9
 801472e:	f7eb fdab 	bl	8000288 <__aeabi_dsub>
 8014732:	a371      	add	r3, pc, #452	; (adr r3, 80148f8 <__ieee754_pow+0xa00>)
 8014734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014738:	f7eb ff5e 	bl	80005f8 <__aeabi_dmul>
 801473c:	a370      	add	r3, pc, #448	; (adr r3, 8014900 <__ieee754_pow+0xa08>)
 801473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014742:	4680      	mov	r8, r0
 8014744:	4689      	mov	r9, r1
 8014746:	4620      	mov	r0, r4
 8014748:	4629      	mov	r1, r5
 801474a:	f7eb ff55 	bl	80005f8 <__aeabi_dmul>
 801474e:	4602      	mov	r2, r0
 8014750:	460b      	mov	r3, r1
 8014752:	4640      	mov	r0, r8
 8014754:	4649      	mov	r1, r9
 8014756:	f7eb fd99 	bl	800028c <__adddf3>
 801475a:	4604      	mov	r4, r0
 801475c:	460d      	mov	r5, r1
 801475e:	4602      	mov	r2, r0
 8014760:	460b      	mov	r3, r1
 8014762:	4630      	mov	r0, r6
 8014764:	4639      	mov	r1, r7
 8014766:	f7eb fd91 	bl	800028c <__adddf3>
 801476a:	4632      	mov	r2, r6
 801476c:	463b      	mov	r3, r7
 801476e:	4680      	mov	r8, r0
 8014770:	4689      	mov	r9, r1
 8014772:	f7eb fd89 	bl	8000288 <__aeabi_dsub>
 8014776:	4602      	mov	r2, r0
 8014778:	460b      	mov	r3, r1
 801477a:	4620      	mov	r0, r4
 801477c:	4629      	mov	r1, r5
 801477e:	f7eb fd83 	bl	8000288 <__aeabi_dsub>
 8014782:	4642      	mov	r2, r8
 8014784:	4606      	mov	r6, r0
 8014786:	460f      	mov	r7, r1
 8014788:	464b      	mov	r3, r9
 801478a:	4640      	mov	r0, r8
 801478c:	4649      	mov	r1, r9
 801478e:	f7eb ff33 	bl	80005f8 <__aeabi_dmul>
 8014792:	a35d      	add	r3, pc, #372	; (adr r3, 8014908 <__ieee754_pow+0xa10>)
 8014794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014798:	4604      	mov	r4, r0
 801479a:	460d      	mov	r5, r1
 801479c:	f7eb ff2c 	bl	80005f8 <__aeabi_dmul>
 80147a0:	a35b      	add	r3, pc, #364	; (adr r3, 8014910 <__ieee754_pow+0xa18>)
 80147a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a6:	f7eb fd6f 	bl	8000288 <__aeabi_dsub>
 80147aa:	4622      	mov	r2, r4
 80147ac:	462b      	mov	r3, r5
 80147ae:	f7eb ff23 	bl	80005f8 <__aeabi_dmul>
 80147b2:	a359      	add	r3, pc, #356	; (adr r3, 8014918 <__ieee754_pow+0xa20>)
 80147b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b8:	f7eb fd68 	bl	800028c <__adddf3>
 80147bc:	4622      	mov	r2, r4
 80147be:	462b      	mov	r3, r5
 80147c0:	f7eb ff1a 	bl	80005f8 <__aeabi_dmul>
 80147c4:	a356      	add	r3, pc, #344	; (adr r3, 8014920 <__ieee754_pow+0xa28>)
 80147c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ca:	f7eb fd5d 	bl	8000288 <__aeabi_dsub>
 80147ce:	4622      	mov	r2, r4
 80147d0:	462b      	mov	r3, r5
 80147d2:	f7eb ff11 	bl	80005f8 <__aeabi_dmul>
 80147d6:	a354      	add	r3, pc, #336	; (adr r3, 8014928 <__ieee754_pow+0xa30>)
 80147d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147dc:	f7eb fd56 	bl	800028c <__adddf3>
 80147e0:	4622      	mov	r2, r4
 80147e2:	462b      	mov	r3, r5
 80147e4:	f7eb ff08 	bl	80005f8 <__aeabi_dmul>
 80147e8:	4602      	mov	r2, r0
 80147ea:	460b      	mov	r3, r1
 80147ec:	4640      	mov	r0, r8
 80147ee:	4649      	mov	r1, r9
 80147f0:	f7eb fd4a 	bl	8000288 <__aeabi_dsub>
 80147f4:	4604      	mov	r4, r0
 80147f6:	460d      	mov	r5, r1
 80147f8:	4602      	mov	r2, r0
 80147fa:	460b      	mov	r3, r1
 80147fc:	4640      	mov	r0, r8
 80147fe:	4649      	mov	r1, r9
 8014800:	f7eb fefa 	bl	80005f8 <__aeabi_dmul>
 8014804:	2200      	movs	r2, #0
 8014806:	ec41 0b19 	vmov	d9, r0, r1
 801480a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801480e:	4620      	mov	r0, r4
 8014810:	4629      	mov	r1, r5
 8014812:	f7eb fd39 	bl	8000288 <__aeabi_dsub>
 8014816:	4602      	mov	r2, r0
 8014818:	460b      	mov	r3, r1
 801481a:	ec51 0b19 	vmov	r0, r1, d9
 801481e:	f7ec f815 	bl	800084c <__aeabi_ddiv>
 8014822:	4632      	mov	r2, r6
 8014824:	4604      	mov	r4, r0
 8014826:	460d      	mov	r5, r1
 8014828:	463b      	mov	r3, r7
 801482a:	4640      	mov	r0, r8
 801482c:	4649      	mov	r1, r9
 801482e:	f7eb fee3 	bl	80005f8 <__aeabi_dmul>
 8014832:	4632      	mov	r2, r6
 8014834:	463b      	mov	r3, r7
 8014836:	f7eb fd29 	bl	800028c <__adddf3>
 801483a:	4602      	mov	r2, r0
 801483c:	460b      	mov	r3, r1
 801483e:	4620      	mov	r0, r4
 8014840:	4629      	mov	r1, r5
 8014842:	f7eb fd21 	bl	8000288 <__aeabi_dsub>
 8014846:	4642      	mov	r2, r8
 8014848:	464b      	mov	r3, r9
 801484a:	f7eb fd1d 	bl	8000288 <__aeabi_dsub>
 801484e:	460b      	mov	r3, r1
 8014850:	4602      	mov	r2, r0
 8014852:	4939      	ldr	r1, [pc, #228]	; (8014938 <__ieee754_pow+0xa40>)
 8014854:	2000      	movs	r0, #0
 8014856:	f7eb fd17 	bl	8000288 <__aeabi_dsub>
 801485a:	ec41 0b10 	vmov	d0, r0, r1
 801485e:	ee10 3a90 	vmov	r3, s1
 8014862:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801486a:	da2b      	bge.n	80148c4 <__ieee754_pow+0x9cc>
 801486c:	4650      	mov	r0, sl
 801486e:	f000 f877 	bl	8014960 <scalbn>
 8014872:	ec51 0b10 	vmov	r0, r1, d0
 8014876:	ec53 2b18 	vmov	r2, r3, d8
 801487a:	f7ff bbee 	b.w	801405a <__ieee754_pow+0x162>
 801487e:	4b2f      	ldr	r3, [pc, #188]	; (801493c <__ieee754_pow+0xa44>)
 8014880:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014884:	429e      	cmp	r6, r3
 8014886:	f77f af0d 	ble.w	80146a4 <__ieee754_pow+0x7ac>
 801488a:	4b2d      	ldr	r3, [pc, #180]	; (8014940 <__ieee754_pow+0xa48>)
 801488c:	440b      	add	r3, r1
 801488e:	4303      	orrs	r3, r0
 8014890:	d009      	beq.n	80148a6 <__ieee754_pow+0x9ae>
 8014892:	ec51 0b18 	vmov	r0, r1, d8
 8014896:	2200      	movs	r2, #0
 8014898:	2300      	movs	r3, #0
 801489a:	f7ec f91f 	bl	8000adc <__aeabi_dcmplt>
 801489e:	3800      	subs	r0, #0
 80148a0:	bf18      	it	ne
 80148a2:	2001      	movne	r0, #1
 80148a4:	e448      	b.n	8014138 <__ieee754_pow+0x240>
 80148a6:	4622      	mov	r2, r4
 80148a8:	462b      	mov	r3, r5
 80148aa:	f7eb fced 	bl	8000288 <__aeabi_dsub>
 80148ae:	4642      	mov	r2, r8
 80148b0:	464b      	mov	r3, r9
 80148b2:	f7ec f927 	bl	8000b04 <__aeabi_dcmpge>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	f43f aef4 	beq.w	80146a4 <__ieee754_pow+0x7ac>
 80148bc:	e7e9      	b.n	8014892 <__ieee754_pow+0x99a>
 80148be:	f04f 0a00 	mov.w	sl, #0
 80148c2:	e71a      	b.n	80146fa <__ieee754_pow+0x802>
 80148c4:	ec51 0b10 	vmov	r0, r1, d0
 80148c8:	4619      	mov	r1, r3
 80148ca:	e7d4      	b.n	8014876 <__ieee754_pow+0x97e>
 80148cc:	491a      	ldr	r1, [pc, #104]	; (8014938 <__ieee754_pow+0xa40>)
 80148ce:	2000      	movs	r0, #0
 80148d0:	f7ff bb31 	b.w	8013f36 <__ieee754_pow+0x3e>
 80148d4:	2000      	movs	r0, #0
 80148d6:	2100      	movs	r1, #0
 80148d8:	f7ff bb2d 	b.w	8013f36 <__ieee754_pow+0x3e>
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7ff bb29 	b.w	8013f36 <__ieee754_pow+0x3e>
 80148e4:	9204      	str	r2, [sp, #16]
 80148e6:	f7ff bb7b 	b.w	8013fe0 <__ieee754_pow+0xe8>
 80148ea:	2300      	movs	r3, #0
 80148ec:	f7ff bb65 	b.w	8013fba <__ieee754_pow+0xc2>
 80148f0:	00000000 	.word	0x00000000
 80148f4:	3fe62e43 	.word	0x3fe62e43
 80148f8:	fefa39ef 	.word	0xfefa39ef
 80148fc:	3fe62e42 	.word	0x3fe62e42
 8014900:	0ca86c39 	.word	0x0ca86c39
 8014904:	be205c61 	.word	0xbe205c61
 8014908:	72bea4d0 	.word	0x72bea4d0
 801490c:	3e663769 	.word	0x3e663769
 8014910:	c5d26bf1 	.word	0xc5d26bf1
 8014914:	3ebbbd41 	.word	0x3ebbbd41
 8014918:	af25de2c 	.word	0xaf25de2c
 801491c:	3f11566a 	.word	0x3f11566a
 8014920:	16bebd93 	.word	0x16bebd93
 8014924:	3f66c16c 	.word	0x3f66c16c
 8014928:	5555553e 	.word	0x5555553e
 801492c:	3fc55555 	.word	0x3fc55555
 8014930:	3fe00000 	.word	0x3fe00000
 8014934:	fff00000 	.word	0xfff00000
 8014938:	3ff00000 	.word	0x3ff00000
 801493c:	4090cbff 	.word	0x4090cbff
 8014940:	3f6f3400 	.word	0x3f6f3400
 8014944:	652b82fe 	.word	0x652b82fe
 8014948:	3c971547 	.word	0x3c971547

0801494c <fabs>:
 801494c:	ec51 0b10 	vmov	r0, r1, d0
 8014950:	ee10 2a10 	vmov	r2, s0
 8014954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014958:	ec43 2b10 	vmov	d0, r2, r3
 801495c:	4770      	bx	lr
	...

08014960 <scalbn>:
 8014960:	b570      	push	{r4, r5, r6, lr}
 8014962:	ec55 4b10 	vmov	r4, r5, d0
 8014966:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801496a:	4606      	mov	r6, r0
 801496c:	462b      	mov	r3, r5
 801496e:	b999      	cbnz	r1, 8014998 <scalbn+0x38>
 8014970:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014974:	4323      	orrs	r3, r4
 8014976:	d03f      	beq.n	80149f8 <scalbn+0x98>
 8014978:	4b35      	ldr	r3, [pc, #212]	; (8014a50 <scalbn+0xf0>)
 801497a:	4629      	mov	r1, r5
 801497c:	ee10 0a10 	vmov	r0, s0
 8014980:	2200      	movs	r2, #0
 8014982:	f7eb fe39 	bl	80005f8 <__aeabi_dmul>
 8014986:	4b33      	ldr	r3, [pc, #204]	; (8014a54 <scalbn+0xf4>)
 8014988:	429e      	cmp	r6, r3
 801498a:	4604      	mov	r4, r0
 801498c:	460d      	mov	r5, r1
 801498e:	da10      	bge.n	80149b2 <scalbn+0x52>
 8014990:	a327      	add	r3, pc, #156	; (adr r3, 8014a30 <scalbn+0xd0>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	e01f      	b.n	80149d8 <scalbn+0x78>
 8014998:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801499c:	4291      	cmp	r1, r2
 801499e:	d10c      	bne.n	80149ba <scalbn+0x5a>
 80149a0:	ee10 2a10 	vmov	r2, s0
 80149a4:	4620      	mov	r0, r4
 80149a6:	4629      	mov	r1, r5
 80149a8:	f7eb fc70 	bl	800028c <__adddf3>
 80149ac:	4604      	mov	r4, r0
 80149ae:	460d      	mov	r5, r1
 80149b0:	e022      	b.n	80149f8 <scalbn+0x98>
 80149b2:	460b      	mov	r3, r1
 80149b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80149b8:	3936      	subs	r1, #54	; 0x36
 80149ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80149be:	4296      	cmp	r6, r2
 80149c0:	dd0d      	ble.n	80149de <scalbn+0x7e>
 80149c2:	2d00      	cmp	r5, #0
 80149c4:	a11c      	add	r1, pc, #112	; (adr r1, 8014a38 <scalbn+0xd8>)
 80149c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149ca:	da02      	bge.n	80149d2 <scalbn+0x72>
 80149cc:	a11c      	add	r1, pc, #112	; (adr r1, 8014a40 <scalbn+0xe0>)
 80149ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149d2:	a319      	add	r3, pc, #100	; (adr r3, 8014a38 <scalbn+0xd8>)
 80149d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d8:	f7eb fe0e 	bl	80005f8 <__aeabi_dmul>
 80149dc:	e7e6      	b.n	80149ac <scalbn+0x4c>
 80149de:	1872      	adds	r2, r6, r1
 80149e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149e4:	428a      	cmp	r2, r1
 80149e6:	dcec      	bgt.n	80149c2 <scalbn+0x62>
 80149e8:	2a00      	cmp	r2, #0
 80149ea:	dd08      	ble.n	80149fe <scalbn+0x9e>
 80149ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149f8:	ec45 4b10 	vmov	d0, r4, r5
 80149fc:	bd70      	pop	{r4, r5, r6, pc}
 80149fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014a02:	da08      	bge.n	8014a16 <scalbn+0xb6>
 8014a04:	2d00      	cmp	r5, #0
 8014a06:	a10a      	add	r1, pc, #40	; (adr r1, 8014a30 <scalbn+0xd0>)
 8014a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a0c:	dac0      	bge.n	8014990 <scalbn+0x30>
 8014a0e:	a10e      	add	r1, pc, #56	; (adr r1, 8014a48 <scalbn+0xe8>)
 8014a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a14:	e7bc      	b.n	8014990 <scalbn+0x30>
 8014a16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a1a:	3236      	adds	r2, #54	; 0x36
 8014a1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014a24:	4620      	mov	r0, r4
 8014a26:	4b0c      	ldr	r3, [pc, #48]	; (8014a58 <scalbn+0xf8>)
 8014a28:	2200      	movs	r2, #0
 8014a2a:	e7d5      	b.n	80149d8 <scalbn+0x78>
 8014a2c:	f3af 8000 	nop.w
 8014a30:	c2f8f359 	.word	0xc2f8f359
 8014a34:	01a56e1f 	.word	0x01a56e1f
 8014a38:	8800759c 	.word	0x8800759c
 8014a3c:	7e37e43c 	.word	0x7e37e43c
 8014a40:	8800759c 	.word	0x8800759c
 8014a44:	fe37e43c 	.word	0xfe37e43c
 8014a48:	c2f8f359 	.word	0xc2f8f359
 8014a4c:	81a56e1f 	.word	0x81a56e1f
 8014a50:	43500000 	.word	0x43500000
 8014a54:	ffff3cb0 	.word	0xffff3cb0
 8014a58:	3c900000 	.word	0x3c900000

08014a5c <with_errno>:
 8014a5c:	b570      	push	{r4, r5, r6, lr}
 8014a5e:	4604      	mov	r4, r0
 8014a60:	460d      	mov	r5, r1
 8014a62:	4616      	mov	r6, r2
 8014a64:	f7fb fda6 	bl	80105b4 <__errno>
 8014a68:	4629      	mov	r1, r5
 8014a6a:	6006      	str	r6, [r0, #0]
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}

08014a70 <xflow>:
 8014a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a72:	4614      	mov	r4, r2
 8014a74:	461d      	mov	r5, r3
 8014a76:	b108      	cbz	r0, 8014a7c <xflow+0xc>
 8014a78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8014a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a84:	4620      	mov	r0, r4
 8014a86:	4629      	mov	r1, r5
 8014a88:	f7eb fdb6 	bl	80005f8 <__aeabi_dmul>
 8014a8c:	2222      	movs	r2, #34	; 0x22
 8014a8e:	b003      	add	sp, #12
 8014a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a94:	f7ff bfe2 	b.w	8014a5c <with_errno>

08014a98 <__math_uflow>:
 8014a98:	b508      	push	{r3, lr}
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014aa0:	f7ff ffe6 	bl	8014a70 <xflow>
 8014aa4:	ec41 0b10 	vmov	d0, r0, r1
 8014aa8:	bd08      	pop	{r3, pc}

08014aaa <__math_oflow>:
 8014aaa:	b508      	push	{r3, lr}
 8014aac:	2200      	movs	r2, #0
 8014aae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014ab2:	f7ff ffdd 	bl	8014a70 <xflow>
 8014ab6:	ec41 0b10 	vmov	d0, r0, r1
 8014aba:	bd08      	pop	{r3, pc}

08014abc <__ieee754_sqrt>:
 8014abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	ec55 4b10 	vmov	r4, r5, d0
 8014ac4:	4e67      	ldr	r6, [pc, #412]	; (8014c64 <__ieee754_sqrt+0x1a8>)
 8014ac6:	43ae      	bics	r6, r5
 8014ac8:	ee10 0a10 	vmov	r0, s0
 8014acc:	ee10 2a10 	vmov	r2, s0
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	462b      	mov	r3, r5
 8014ad4:	d10d      	bne.n	8014af2 <__ieee754_sqrt+0x36>
 8014ad6:	f7eb fd8f 	bl	80005f8 <__aeabi_dmul>
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	4620      	mov	r0, r4
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	f7eb fbd3 	bl	800028c <__adddf3>
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	460d      	mov	r5, r1
 8014aea:	ec45 4b10 	vmov	d0, r4, r5
 8014aee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af2:	2d00      	cmp	r5, #0
 8014af4:	dc0b      	bgt.n	8014b0e <__ieee754_sqrt+0x52>
 8014af6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014afa:	4326      	orrs	r6, r4
 8014afc:	d0f5      	beq.n	8014aea <__ieee754_sqrt+0x2e>
 8014afe:	b135      	cbz	r5, 8014b0e <__ieee754_sqrt+0x52>
 8014b00:	f7eb fbc2 	bl	8000288 <__aeabi_dsub>
 8014b04:	4602      	mov	r2, r0
 8014b06:	460b      	mov	r3, r1
 8014b08:	f7eb fea0 	bl	800084c <__aeabi_ddiv>
 8014b0c:	e7eb      	b.n	8014ae6 <__ieee754_sqrt+0x2a>
 8014b0e:	1509      	asrs	r1, r1, #20
 8014b10:	f000 808d 	beq.w	8014c2e <__ieee754_sqrt+0x172>
 8014b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b18:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014b20:	07c9      	lsls	r1, r1, #31
 8014b22:	bf5c      	itt	pl
 8014b24:	005b      	lslpl	r3, r3, #1
 8014b26:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014b2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014b2e:	bf58      	it	pl
 8014b30:	0052      	lslpl	r2, r2, #1
 8014b32:	2500      	movs	r5, #0
 8014b34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014b38:	1076      	asrs	r6, r6, #1
 8014b3a:	0052      	lsls	r2, r2, #1
 8014b3c:	f04f 0e16 	mov.w	lr, #22
 8014b40:	46ac      	mov	ip, r5
 8014b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014b46:	eb0c 0001 	add.w	r0, ip, r1
 8014b4a:	4298      	cmp	r0, r3
 8014b4c:	bfde      	ittt	le
 8014b4e:	1a1b      	suble	r3, r3, r0
 8014b50:	eb00 0c01 	addle.w	ip, r0, r1
 8014b54:	186d      	addle	r5, r5, r1
 8014b56:	005b      	lsls	r3, r3, #1
 8014b58:	f1be 0e01 	subs.w	lr, lr, #1
 8014b5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014b60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014b68:	d1ed      	bne.n	8014b46 <__ieee754_sqrt+0x8a>
 8014b6a:	4674      	mov	r4, lr
 8014b6c:	2720      	movs	r7, #32
 8014b6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014b72:	4563      	cmp	r3, ip
 8014b74:	eb01 000e 	add.w	r0, r1, lr
 8014b78:	dc02      	bgt.n	8014b80 <__ieee754_sqrt+0xc4>
 8014b7a:	d113      	bne.n	8014ba4 <__ieee754_sqrt+0xe8>
 8014b7c:	4290      	cmp	r0, r2
 8014b7e:	d811      	bhi.n	8014ba4 <__ieee754_sqrt+0xe8>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	eb00 0e01 	add.w	lr, r0, r1
 8014b86:	da57      	bge.n	8014c38 <__ieee754_sqrt+0x17c>
 8014b88:	f1be 0f00 	cmp.w	lr, #0
 8014b8c:	db54      	blt.n	8014c38 <__ieee754_sqrt+0x17c>
 8014b8e:	f10c 0801 	add.w	r8, ip, #1
 8014b92:	eba3 030c 	sub.w	r3, r3, ip
 8014b96:	4290      	cmp	r0, r2
 8014b98:	bf88      	it	hi
 8014b9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014b9e:	1a12      	subs	r2, r2, r0
 8014ba0:	440c      	add	r4, r1
 8014ba2:	46c4      	mov	ip, r8
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	3f01      	subs	r7, #1
 8014ba8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014bac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014bb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014bb4:	d1dd      	bne.n	8014b72 <__ieee754_sqrt+0xb6>
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	d01b      	beq.n	8014bf2 <__ieee754_sqrt+0x136>
 8014bba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014c68 <__ieee754_sqrt+0x1ac>
 8014bbe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014c6c <__ieee754_sqrt+0x1b0>
 8014bc2:	e9da 0100 	ldrd	r0, r1, [sl]
 8014bc6:	e9db 2300 	ldrd	r2, r3, [fp]
 8014bca:	f7eb fb5d 	bl	8000288 <__aeabi_dsub>
 8014bce:	e9da 8900 	ldrd	r8, r9, [sl]
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	4640      	mov	r0, r8
 8014bd8:	4649      	mov	r1, r9
 8014bda:	f7eb ff89 	bl	8000af0 <__aeabi_dcmple>
 8014bde:	b140      	cbz	r0, 8014bf2 <__ieee754_sqrt+0x136>
 8014be0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014be4:	e9da 0100 	ldrd	r0, r1, [sl]
 8014be8:	e9db 2300 	ldrd	r2, r3, [fp]
 8014bec:	d126      	bne.n	8014c3c <__ieee754_sqrt+0x180>
 8014bee:	3501      	adds	r5, #1
 8014bf0:	463c      	mov	r4, r7
 8014bf2:	106a      	asrs	r2, r5, #1
 8014bf4:	0863      	lsrs	r3, r4, #1
 8014bf6:	07e9      	lsls	r1, r5, #31
 8014bf8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014bfc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014c00:	bf48      	it	mi
 8014c02:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014c06:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014c0a:	461c      	mov	r4, r3
 8014c0c:	e76d      	b.n	8014aea <__ieee754_sqrt+0x2e>
 8014c0e:	0ad3      	lsrs	r3, r2, #11
 8014c10:	3815      	subs	r0, #21
 8014c12:	0552      	lsls	r2, r2, #21
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d0fa      	beq.n	8014c0e <__ieee754_sqrt+0x152>
 8014c18:	02dc      	lsls	r4, r3, #11
 8014c1a:	d50a      	bpl.n	8014c32 <__ieee754_sqrt+0x176>
 8014c1c:	f1c1 0420 	rsb	r4, r1, #32
 8014c20:	fa22 f404 	lsr.w	r4, r2, r4
 8014c24:	1e4d      	subs	r5, r1, #1
 8014c26:	408a      	lsls	r2, r1
 8014c28:	4323      	orrs	r3, r4
 8014c2a:	1b41      	subs	r1, r0, r5
 8014c2c:	e772      	b.n	8014b14 <__ieee754_sqrt+0x58>
 8014c2e:	4608      	mov	r0, r1
 8014c30:	e7f0      	b.n	8014c14 <__ieee754_sqrt+0x158>
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	3101      	adds	r1, #1
 8014c36:	e7ef      	b.n	8014c18 <__ieee754_sqrt+0x15c>
 8014c38:	46e0      	mov	r8, ip
 8014c3a:	e7aa      	b.n	8014b92 <__ieee754_sqrt+0xd6>
 8014c3c:	f7eb fb26 	bl	800028c <__adddf3>
 8014c40:	e9da 8900 	ldrd	r8, r9, [sl]
 8014c44:	4602      	mov	r2, r0
 8014c46:	460b      	mov	r3, r1
 8014c48:	4640      	mov	r0, r8
 8014c4a:	4649      	mov	r1, r9
 8014c4c:	f7eb ff46 	bl	8000adc <__aeabi_dcmplt>
 8014c50:	b120      	cbz	r0, 8014c5c <__ieee754_sqrt+0x1a0>
 8014c52:	1ca0      	adds	r0, r4, #2
 8014c54:	bf08      	it	eq
 8014c56:	3501      	addeq	r5, #1
 8014c58:	3402      	adds	r4, #2
 8014c5a:	e7ca      	b.n	8014bf2 <__ieee754_sqrt+0x136>
 8014c5c:	3401      	adds	r4, #1
 8014c5e:	f024 0401 	bic.w	r4, r4, #1
 8014c62:	e7c6      	b.n	8014bf2 <__ieee754_sqrt+0x136>
 8014c64:	7ff00000 	.word	0x7ff00000
 8014c68:	20000368 	.word	0x20000368
 8014c6c:	20000370 	.word	0x20000370

08014c70 <_init>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr

08014c7c <_fini>:
 8014c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7e:	bf00      	nop
 8014c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c82:	bc08      	pop	{r3}
 8014c84:	469e      	mov	lr, r3
 8014c86:	4770      	bx	lr
